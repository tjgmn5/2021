WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
So let's go ahead and deploy that application.

00:00:02.850 --> 00:00:04.740
I go to udacitychange,

00:00:04.740 --> 00:00:07.680
I right-click on it, I go to deploy.

00:00:07.680 --> 00:00:12.735
Now, I'm able to take this application and deploy it into the AWS Cloud.

00:00:12.735 --> 00:00:18.015
Now, I'm going to go through and look at this in the AWS Cloud console.

00:00:18.015 --> 00:00:20.750
Now that I've got the AWS console open,

00:00:20.750 --> 00:00:23.815
I'm going to again go ahead and search for Lambda.

00:00:23.815 --> 00:00:28.350
Click on that and I have my trick that I do where I look at the last modified,

00:00:28.350 --> 00:00:29.670
I toggle by that,

00:00:29.670 --> 00:00:33.630
and I can see that udacitychange here.

00:00:33.630 --> 00:00:36.870
This was modified just recently.

00:00:36.870 --> 00:00:40.700
Now, if I go and I look at this udacitychange function,

00:00:40.700 --> 00:00:44.150
I can scroll down here and see that API Gateway is

00:00:44.150 --> 00:00:47.540
now configured to work with my function.

00:00:47.540 --> 00:00:50.030
I also have CloudWatch log.

00:00:50.030 --> 00:00:51.365
So if I scroll down,

00:00:51.365 --> 00:00:53.725
I can see this function in action.

00:00:53.725 --> 00:00:55.500
It's the exact same code.

00:00:55.500 --> 00:00:59.060
Now, what I"m going to do is I'm going to test this out locally as well.

00:00:59.060 --> 00:01:02.630
So I'm going to go through and make another test function and we'll

00:01:02.630 --> 00:01:08.275
call this one udacitytestchange.

00:01:08.275 --> 00:01:14.990
I'm going to go through here and just put in the same contract that I did before.

00:01:14.990 --> 00:01:18.935
Amount $1.89.

00:01:18.935 --> 00:01:22.265
Here we go. Now, I go ahead and I save this.

00:01:22.265 --> 00:01:25.525
Now, I have a saved payload.

00:01:25.525 --> 00:01:29.515
I test it and I get a response back exactly what I expected.

00:01:29.515 --> 00:01:30.670
A JSON base response.

00:01:30.670 --> 00:01:33.775
So this is actually pretty powerful, but there's even more.

00:01:33.775 --> 00:01:36.760
What we're going to do is now I'm going to scroll down

00:01:36.760 --> 00:01:40.040
here and look at the input that was actually created for me.

00:01:40.040 --> 00:01:43.225
If I scroll all the way down to the very bottom here,

00:01:43.225 --> 00:01:46.810
I can see that the API Gateway is actually selected.

00:01:46.810 --> 00:01:49.325
If I click on API Gateway.

00:01:49.325 --> 00:01:52.820
You can see that there's a URL that's actually been given to me.

00:01:52.820 --> 00:01:57.080
I could go back to my Cloud nine environment and actually test it out from there.

00:01:57.080 --> 00:01:58.775
Now that I have this URL,

00:01:58.775 --> 00:02:01.580
what I can do is I can take this URL and I could go back to

00:02:01.580 --> 00:02:04.640
my Cloud nine environment and actually test it out from there.

00:02:04.640 --> 00:02:07.495
So I'm going to go back to my Cloud nine environment.

00:02:07.495 --> 00:02:11.270
What I'm going to do is I'm going to open up this shell

00:02:11.270 --> 00:02:16.490
here and I'm going to look inside of my udacitychange app.

00:02:17.300 --> 00:02:21.650
Inside of there, there's a virtual environment that's automatically created.

00:02:21.650 --> 00:02:25.590
So I'm going to source it. Source venv/bin/activate.

00:02:27.890 --> 00:02:30.915
Then if I type in which Python,

00:02:30.915 --> 00:02:37.435
you can see that the Python is actually going to be inside of this virtual environment.

00:02:37.435 --> 00:02:40.515
If I say which python3,

00:02:40.515 --> 00:02:45.295
you can see this python3 is actually in the environment that I sourced.

00:02:45.295 --> 00:02:51.975
Now, if I type in pip3 install ipython,

00:02:51.975 --> 00:02:59.010
it'll actually install that ipython terminal inside of this shell environment.

00:02:59.010 --> 00:03:00.485
I'm going to make it a little bit bigger.

00:03:00.485 --> 00:03:03.360
Now, I'm going to type in the ipython shell.

00:03:03.970 --> 00:03:07.505
I can even do a pip install from here.

00:03:07.505 --> 00:03:10.560
I can say pip install requests.

00:03:11.540 --> 00:03:14.450
Now that the request is installed,

00:03:14.450 --> 00:03:18.000
I can actually go ahead and import requests.

00:03:18.800 --> 00:03:24.470
There we go. Now what I can do is I can actually make a request call to that URL.

00:03:24.470 --> 00:03:29.370
So I'm going to state that as a variable first. Here we go.

00:03:29.370 --> 00:03:39.525
Now, I can say result is equal to requests.post (url, json).

00:03:39.525 --> 00:03:40.710
Again, we'll do the same thing.

00:03:40.710 --> 00:03:43.525
We will actually add a json payload here.

00:03:43.525 --> 00:03:47.465
In this case, it'll just be a python dictionary.

00:03:47.465 --> 00:03:58.290
We'll say amount do a string, also do $1.23.

00:03:58.290 --> 00:04:02.140
Here we go. We'll return.

00:04:02.930 --> 00:04:08.620
Add an ending quote and I'd say result.json().

00:04:08.780 --> 00:04:12.920
That's pretty powerful. So I was able to call that

00:04:12.920 --> 00:04:16.940
remote API and this was running on AWS.

00:04:16.940 --> 00:04:19.850
So really the round-trip here is pretty incredible.

00:04:19.850 --> 00:04:21.425
How quickly you can write code,

00:04:21.425 --> 00:04:23.255
test it, deploy it,

00:04:23.255 --> 00:04:24.920
get a real URL,

00:04:24.920 --> 00:04:30.990
and actually get a production micro-service running that you can actually run yourself.

