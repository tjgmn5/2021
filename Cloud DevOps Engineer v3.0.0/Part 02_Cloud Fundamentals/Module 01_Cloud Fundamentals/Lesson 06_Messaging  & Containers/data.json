{
  "data": {
    "lesson": {
      "id": 850174,
      "key": "c05ffb47-32bb-4e86-9755-d4120c37abad",
      "title": "Messaging  & Containers",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn the basics of messaging and containers in the cloud.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/c05ffb47-32bb-4e86-9755-d4120c37abad/850174/1561701979887/Messaging++%26+Containers+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/c05ffb47-32bb-4e86-9755-d4120c37abad/850174/1561701977164/Messaging++%26+Containers+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 850175,
          "key": "09bcf170-9767-4e1d-a014-43d9f875d715",
          "title": "Lesson Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "09bcf170-9767-4e1d-a014-43d9f875d715",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850536,
              "key": "3599cd25-a724-496c-9146-933406bad3f9",
              "title": "CloudEng Course1 Lesson6 Introduction",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "cmZd4svDAW8",
                "china_cdn_id": "cmZd4svDAW8.mp4"
              }
            }
          ]
        },
        {
          "id": 850176,
          "key": "2643b0df-2435-4757-adeb-db175f1f32a8",
          "title": "Why do we need messaging in the cloud?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2643b0df-2435-4757-adeb-db175f1f32a8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850506,
              "key": "a9d1ab35-b7e0-4db3-8f52-648478bd4748",
              "title": "CloudEng Course1 Lesson6 WhyWeNeedMessaging V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fTCEEDPIMBA",
                "china_cdn_id": "fTCEEDPIMBA.mp4"
              }
            },
            {
              "id": 851124,
              "key": "57a292b0-f0df-49d1-8226-79b53e3e3dbf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h1>Messaging in the Cloud</h1>\n\nThere are often times that users of your applications need to be notified when certain events happen. Notifications, such as text messages or emails can be sent through services in the cloud. The use of the cloud offers benefits like lowered costs, increased storage, and flexibility. \n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 851125,
              "key": "b682fcd0-571b-4ddc-a600-324e77fe6738",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b682fcd0-571b-4ddc-a600-324e77fe6738",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Messages are typically sent between which two entities?",
                "answers": [
                  {
                    "id": "a1558883453571",
                    "text": "From one system to another system",
                    "is_correct": true
                  },
                  {
                    "id": "a1558883549221",
                    "text": "From a human to a system",
                    "is_correct": false
                  },
                  {
                    "id": "a1558883555965",
                    "text": "From a system to a human",
                    "is_correct": false
                  },
                  {
                    "id": "a1558883569570",
                    "text": "From a human to a human",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 850177,
          "key": "e6c6d0ed-fb23-4669-85a9-e060e11b6e83",
          "title": "Simple Notification Service (SNS)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6c6d0ed-fb23-4669-85a9-e060e11b6e83",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850499,
              "key": "5d42ba53-1656-4dfc-87b4-cdc16796e1f2",
              "title": "CloudEng Course1 Lesson6 SNS(PART ONE) V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "vW60dbTMQS0",
                "china_cdn_id": "vW60dbTMQS0.mp4"
              }
            },
            {
              "id": 851126,
              "key": "5a5234c5-2258-43fd-bd73-10f471cdd620",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h1>Simple Notification Service</h1>\nAmazon Simple Notification Service (or SNS) is a cloud service that allows you to send notifications to the users of your applications. SNS allows you to decouple the notification logic from being embedded in your applications and allows notifications to be published to a large number of subscribers. \n\n<h1>Features</h1>\n<ul>\n<li>SNS uses a publish/subscribe model.</li>\n<li> SNS can publish messages to Amazon SQS queues, AWS Lambda functions, and HTTP/S webhooks.</li>\n</ul>\n\n<h1>Tips</h1>\n<ul>\n<li>SNS is found under the Application Integration section on the AWS Management Console.</li>\n<li>SNS Topic names are limited to 256 characters.</li>\n\n<li>A notification can contain only one message.</li>\n</ul>\n",
              "instructor_notes": ""
            },
            {
              "id": 851127,
              "key": "cecd5031-de4e-4f03-8fbf-6ead67ce2a8a",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "cecd5031-de4e-4f03-8fbf-6ead67ce2a8a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which ways can notifications be sent to users via SNS? Pick three.",
                "answers": [
                  {
                    "id": "a1558884468397",
                    "text": " Mobile push",
                    "is_correct": true
                  },
                  {
                    "id": "a1558884577972",
                    "text": "Google alert",
                    "is_correct": false
                  },
                  {
                    "id": "a1558884578765",
                    "text": " Email",
                    "is_correct": true
                  },
                  {
                    "id": "a1558884579553",
                    "text": " Text message/SMS ",
                    "is_correct": true
                  },
                  {
                    "id": "a1558884580403",
                    "text": "Slack notification",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 859398,
              "key": "c831feec-31fe-4a48-9e4d-14bc988ce7d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Resources\n---\n* [Amazon SNS Overview](https://aws.amazon.com/sns/)\n* [What is Amazon SNS](https://docs.aws.amazon.com/sns/latest/dg/welcome.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 850500,
          "key": "e0e3c013-c3e3-477e-98d7-413c527ffaf2",
          "title": "Demo - Simple Notification Service (SNS) ",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0e3c013-c3e3-477e-98d7-413c527ffaf2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850501,
              "key": "c3c7b403-fea8-49f6-8ba4-5525a6cc851f",
              "title": "CloudEng Course1 Lesson6 SNS(PART TWO) V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wooRtQ5n10k",
                "china_cdn_id": "wooRtQ5n10k.mp4"
              }
            }
          ]
        },
        {
          "id": 850178,
          "key": "7b3aa662-cadc-4bb9-9404-f7d86d85d6b5",
          "title": "Why do we need queuing technology?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7b3aa662-cadc-4bb9-9404-f7d86d85d6b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850507,
              "key": "b44b973e-8049-435c-b77a-5f74efa65520",
              "title": "CloudEng Course1 Lesson6 WhyWeNeedQueuing V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WnkroShldb8",
                "china_cdn_id": "WnkroShldb8.mp4"
              }
            },
            {
              "id": 851128,
              "key": "fc9738d6-a801-40ee-b382-a42013b7ddac",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h1>Queues</h1>\n\nA queue is a data structure that holds requests called messages. Messages in a queue are commonly processed in order, first in, first out (or FIFO). \n\nMessaging queues improve:\n<ul>\n<li>performance</li>\n<li>scalability</li>\n<li>user experience</li>\n</ul>\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 851129,
              "key": "b89a8b14-0f90-4a89-98fc-e187375f5442",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b89a8b14-0f90-4a89-98fc-e187375f5442",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What type of processing does queuing support?",
                "answers": [
                  {
                    "id": "a1558885631780",
                    "text": "sequential processing",
                    "is_correct": false
                  },
                  {
                    "id": "a1558885690829",
                    "text": "asynchronous processing",
                    "is_correct": true
                  },
                  {
                    "id": "a1558885691712",
                    "text": "synchronous processing",
                    "is_correct": false
                  },
                  {
                    "id": "a1558885692521",
                    "text": "parallel processing",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 850179,
          "key": "b65b4ecd-316a-49c8-8f09-c637bd1a0d01",
          "title": "Simple Queue Service (SQS)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b65b4ecd-316a-49c8-8f09-c637bd1a0d01",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850502,
              "key": "64bbb437-f1ba-428a-a025-53d82d3e8820",
              "title": "CloudEng Course1 Lesson6 SQS(PART ONE) V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "QdmaZx1jkcw",
                "china_cdn_id": "QdmaZx1jkcw.mp4"
              }
            },
            {
              "id": 851133,
              "key": "bb32a35f-b90e-430f-b411-c2c7d8d83c09",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h1>Simple Queue Service</h1>\nAmazon Simple Queue Service (SQS) is a fully managed message queuing service that allows you to integrate queuing functionality in your application. SQS offers two types of message queues: standard and FIFO.\n\n<h1>Features</h1>\n<ul>\n<li>send messages</li>\n<li>store messages</li>\n<li>receive messages</li>\n</ul> \n\n<h1>Tips</h1>\n<ul>\n<li>The Simple Queue Service (SQS) is found under the Application Integration on the AWS Management Console.</li>\n<li>FIFO queues support up to 300 messages per second.</li>\n<li>FIFO queues guarantee the ordering of messages.</li>\n<li>Standard queues offer best-effort ordering but no guarantees.</li>\n<li>Standard queues deliver a message at least once, but occasionally more than one copy of a message is delivered.</li>\n</ul>\n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 851134,
              "key": "f04e9b53-cdeb-4d8f-8b3d-70fa0c9bb797",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f04e9b53-cdeb-4d8f-8b3d-70fa0c9bb797",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What are the benefits of a FIFO queue over a standard queue? Pick two.",
                "answers": [
                  {
                    "id": "a1558886819083",
                    "text": "messages are processed exactly once",
                    "is_correct": true
                  },
                  {
                    "id": "a1558886871706",
                    "text": "multiple copies of messages delivered",
                    "is_correct": false
                  },
                  {
                    "id": "a1558886872671",
                    "text": "messages are processed in exact order",
                    "is_correct": true
                  },
                  {
                    "id": "a1558886873503",
                    "text": "random ordering of messages",
                    "is_correct": false
                  },
                  {
                    "id": "a1558886874371",
                    "text": "unlimited throughput",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 859399,
              "key": "78d5a1bf-dd4e-4ef4-8467-324c4deb9079",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Resources\n---\n* [Amazon SQS Overview](https://aws.amazon.com/sqs/)\n* [What is Amazon SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcome.html)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1104110,
          "key": "07916aa8-d8b5-4e38-9372-bae476ff38a6",
          "title": "SQS - Create a Queue",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "07916aa8-d8b5-4e38-9372-bae476ff38a6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1104119,
              "key": "64efd20a-4e83-4763-91ab-e865860aba84",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">Amazon SQS is a service that hosts the queue of messages (requests and responses) from the decoupled application components. Have a quick look at this [SQS workflow](https://d2yegcrkszs8ng.cloudfront.net/sqsconsole-20200912023453940/assets/images/5e3f44ce52788a4fb8b8432e4441bf3f-SQS-diagram.svg) to understand it better. \n\nLet's see how to create an SQS queue, and learn to send/receive messages. \n\n## A. Queues Dashboard\nFrom the AWS management console, select SQS (Simple Queue Service), or you can directly go to the [Queues dashboard](https://console.aws.amazon.com/sqs/v2/home). Start the **Create queue** wizard from there. ",
              "instructor_notes": ""
            },
            {
              "id": 1104131,
              "key": "45eec64f-9c76-4ba5-9748-2ca4c30acc00",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfc560_screenshot-2020-11-26-at-8.10.59-pm/screenshot-2020-11-26-at-8.10.59-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/45eec64f-9c76-4ba5-9748-2ca4c30acc00",
              "caption": "Launch **Create queue** from Amazon SQS homepage",
              "alt": "",
              "width": 500,
              "height": 582,
              "instructor_notes": null
            },
            {
              "id": 1104132,
              "key": "5b5aab56-a2d2-4cc3-ab61-c8d5b535c37a",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfc5ac_screenshot-2020-11-26-at-8.12.12-pm/screenshot-2020-11-26-at-8.12.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/5b5aab56-a2d2-4cc3-ab61-c8d5b535c37a",
              "caption": "Launch **Create queue** from Queues dashboard",
              "alt": "",
              "width": 500,
              "height": 848,
              "instructor_notes": null
            },
            {
              "id": 1104134,
              "key": "587f47b5-b3c3-46ee-b42f-d31a0e4b3753",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## B. Create a Queue\nA queue can be created quickly in three steps:\n1. *General details* - Provide a case-sensitive name, and choose the type of queue - Standard or FIFO, you want to create. A standard queue supports an unlimited number of transactions per second (TPS) for each API action (SendMessage, ReceiveMessage, or DeleteMessage). Whereas, FIFO queues support up to 3000 messages per second while *strictly* preserving the message order.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1104135,
              "key": "261c28ce-af41-4360-a193-bad0680d6d3c",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfc647_screenshot-2020-11-26-at-8.12.59-pm/screenshot-2020-11-26-at-8.12.59-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/261c28ce-af41-4360-a193-bad0680d6d3c",
              "caption": "Snapshot: Create queue - General details",
              "alt": "",
              "width": 600,
              "height": 1216,
              "instructor_notes": null
            },
            {
              "id": 1104144,
              "key": "15fda57b-fc34-40f6-9946-c7d54bc281d7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. *Configuration details* - You can set the following items:\n * *Visibility timeout* - The time-duration (0 seconds - 12 hours) after which a *consumer* message can become visible to the other consumers. Generally, the consumer must process and delete a message from the queue.<br><br>\n\n * *Message retention period* - The duration (1 minute - 14 days) for which the queue retains a message that does not get deleted. Amazon SQS will automatically delete messages that have been in a queue for more than the specified period. <br><br>\n\n * *Delivery delay* - The time (0 seconds - 15 minutes) to intentionally delay the delivery of each (new) message added to the queue. According to AWS:\n>If your consumers need additional time to process messages, you must delay each new message coming to the queue.\n * *Maximum message size* - It should be between 1 KB and 256 KB.",
              "instructor_notes": ""
            },
            {
              "id": 1104136,
              "key": "b8a529c6-be61-4839-a093-f306ece68e89",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfc685_screenshot-2020-11-26-at-8.13.32-pm/screenshot-2020-11-26-at-8.13.32-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b8a529c6-be61-4839-a093-f306ece68e89",
              "caption": "Snapshot: Create queue - Configuration details",
              "alt": "",
              "width": 600,
              "height": 1144,
              "instructor_notes": null
            },
            {
              "id": 1104145,
              "key": "76dd240a-c238-434d-95aa-b9b379da9a5a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. *Access policy* - You can define specifically who can send/receive messages to/from your queue. Choose the queue owner, or specified AWS accounts, IAM users, and roles as sender/receiver. The access policy can also be defined in JSON format. ",
              "instructor_notes": ""
            },
            {
              "id": 1104137,
              "key": "590434be-cd24-4225-b573-7cc8acda9eca",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfc69a_screenshot-2020-11-26-at-8.14.19-pm/screenshot-2020-11-26-at-8.14.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/590434be-cd24-4225-b573-7cc8acda9eca",
              "caption": "Snapshot: Create queue - Access policy",
              "alt": "",
              "width": 600,
              "height": 1234,
              "instructor_notes": null
            },
            {
              "id": 1104146,
              "key": "294b92ad-b732-4f9f-8d65-e5c8ed888040",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## C. Details of an Existing Queue\nSelect a queue from the **Queues** dashboard to view the basic details and configuration.",
              "instructor_notes": ""
            },
            {
              "id": 1104143,
              "key": "46b89d1e-68ce-4505-965f-cdef3d643f6d",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfddb8_screenshot-2020-11-26-at-9.45.30-pm/screenshot-2020-11-26-at-9.45.30-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/46b89d1e-68ce-4505-965f-cdef3d643f6d",
              "caption": "Snapshot: Details of an existing queue",
              "alt": "",
              "width": 700,
              "height": 1756,
              "instructor_notes": null
            },
            {
              "id": 1104147,
              "key": "a283301d-1827-46e2-990e-34c6067f6667",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In the snapshot above, the URL `https://sqs.us-east-2.amazonaws.com/014421265158/MyQueue` is an essential field to use in your application components. In addition, you can also view details about the Lambda triggers, and the access policy. You can even monitor various metrics, such as approximate age of message, the number of messages sent/received/delayed/deleted/empty receives, and size consumed by sent messages.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1104148,
              "key": "7bbf329f-9b6a-4414-9028-c8ab40d7740e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## D. Send and receive messages\nFor the selected queue, you can either send/receive messages or configure Lambda function trigger. Let's see how to send and receive messages using a *Standard* queue.",
              "instructor_notes": ""
            },
            {
              "id": 1104149,
              "key": "ceeb796e-315f-450e-9474-b46848a8a6ee",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "1. **Send message**<br>\nSpecify the message body and delay duration while sending a message. As stated earlier, you must add a delay to each new message, if your consumers need additional time to process messages. In other words, your consumer will receive the message only after the duration specified here. \n\n You can also mention the metadata, such as timestamps, geospatial data, signatures, and identifiers in the form of *Message attributes*. \n\n In a FIFO queue, there is an additional concept of *message group*, to ensures that the messages belonging to a particular group are processed in a strict order. ",
              "instructor_notes": ""
            },
            {
              "id": 1104151,
              "key": "f6d6a75a-bce7-432a-9bad-905e0fadcb06",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfe56e_screenshot-2020-11-26-at-10.55.16-pm/screenshot-2020-11-26-at-10.55.16-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f6d6a75a-bce7-432a-9bad-905e0fadcb06",
              "caption": "Snapshot: Message body and delay duration while sending a message",
              "alt": "",
              "width": 600,
              "height": 1000,
              "instructor_notes": null
            },
            {
              "id": 1104150,
              "key": "c947dd24-41a9-4378-b367-3890c33c331c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "2. **Receive messages**<br>\nA consumer cannot choose a specific message to receive. Instead, a consumer *polls* to receive up to 10 number of messages from the queue. The snapshot below shows a message received after polling. The default polling duration is set to 30 seconds. \n\n Next, click on the message ID to view the message details, body, and metadata. Later, delete the message manually, if not in use. \n\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1104152,
              "key": "dc5554b6-4459-46ec-8891-27d5d4e2cf01",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfe5be_screenshot-2020-11-26-at-10.57.52-pm/screenshot-2020-11-26-at-10.57.52-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/dc5554b6-4459-46ec-8891-27d5d4e2cf01",
              "caption": "Snapshot: **Poll for messages** to receive messages ",
              "alt": "",
              "width": 600,
              "height": 736,
              "instructor_notes": null
            },
            {
              "id": 1104159,
              "key": "8f56b310-0a80-4d8d-92a0-c026ac9663cb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/November/5fbfe9fd_screenshot-2020-11-26-at-11.14.57-pm/screenshot-2020-11-26-at-11.14.57-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8f56b310-0a80-4d8d-92a0-c026ac9663cb",
              "caption": "Snapshot: View the message details, body, and metadata. ",
              "alt": "",
              "width": 500,
              "height": 1038,
              "instructor_notes": null
            },
            {
              "id": 1104121,
              "key": "9937c072-8bda-43d9-a41d-ceda9ad6596c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": ">**Note**: SQS pricing is based on the count and size of messages, and the interactions with Amazon S3 and the AWS Key Management Service.",
              "instructor_notes": ""
            },
            {
              "id": 1104123,
              "key": "97257f42-62a6-484d-813c-dc759266490b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## External Resource\n\n1. [Basic Amazon SQS architecture](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html)\n1. Refer to the [Getting started with Amazon SQS](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-getting-started.html), that demonstrates the following steps:\n * Step 1: Create a queue\n * Step 2: Send a message\n * Step 3: Receive and delete your message\n * Step 4: Delete your queue",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1106586,
          "key": "f908ab63-16fa-4ade-91ac-dcb5d17f5d92",
          "title": "Lab - SNS",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f908ab63-16fa-4ade-91ac-dcb5d17f5d92",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1106587,
              "key": "59526234-ed85-4283-bf55-2fb4db03ec5f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# SNS\n---\n\nIn this hands-on exercise, you will learn how to send alerts via SNS by creating a topic, subscribing to a topic, and publishing an alert message to a topic.\n\n1. Prerequisites: AWS Account\n2. By the end of this lab, you will be able to:\n * Create a topic\n * Subscribe to a topic\n * Publish a message to a topic\n\nFollow the exercise instructions described below: \n\n### Step 1. Create a Topic\n   * From the [AWS Management Console](https://console.aws.amazon.com/) page, select the SNS service.\n   * On the left-hand navigation pane, click on the **Topics** service, and start the **Create topic** wizard.\n   * In the *Details* section, enter a topic name of your choice\n   * In the *Access policy – optional* section, use the following configuration to create the topic:\n\n<center>\n\n|Configuration|Value|\n|---|---|\n|Policy method|`Basic`|\n|Define who can publish messages to the topic|`Everyone`|\n|Define who can subscribe to this topic|`Everyone`|\n</center>\n   * Finish the **Create topic**. The topic details will display, or you can select the newly created topic from the **Topics** dashboard to create a subscription next.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1106590,
              "key": "f445c8ef-00cd-455e-a90c-c466b8b0f8eb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 2. Subscribe to a Topic\n   * While you are viewing the details of the newly created topic, start the **Create subscription** wizard, and use the following details:\n\n<center>\n\n|Field|Value|\n|---|---|\n|Protocol|`Email`|\n|Endpoint|Enter your email that should receive the notifications|\n</center>\n   * The subscription page will display, and the status will be `Pending confirmation`. You will receive an email from Amazon SNS to confirm the subscription. Confirm the subscription. \n   * In your web browser, a subscription confirmation screen appears.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1106591,
              "key": "cbe1694f-8c5a-481a-afd7-52521d321413",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Step 3. Publish Message to a Topic\n   * Go back to the **Topics** service.\n   * Select the topic you created earlier and **Publish a message**  with the following details:\n\n<center>\n\n|Section|Field|Value|\n|---|---|---|\n|Message details|Subject|Wishes|\n|Message body|Message body <br>to send to the endpoint|Congratulations on your <br>Udacity Nanodegree Graduation!|\n|Message attributes|Type, Name, Value|`String`, `Occasion`, `Graduation`|\n</center>\n   * In your email client, you will receive an email from AWS Notifications (<no-reply@sns.amazonaws.com>)",
              "instructor_notes": ""
            },
            {
              "id": 1106632,
              "key": "7f6cc701-dede-4c85-8c3f-80cb4acfb5c8",
              "title": "Send alerts via SNS",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7f6cc701-dede-4c85-8c3f-80cb4acfb5c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a Topic",
                "Subscribe to a Topic",
                "Publish a Message to a Topic"
              ],
              "positive_feedback": "Amazing Work!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 850181,
          "key": "ade71b02-6963-4747-a7e0-bfe75242b984",
          "title": "Why do we need containers?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ade71b02-6963-4747-a7e0-bfe75242b984",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850505,
              "key": "f9c9c989-1c51-4d34-ab9b-14cdb7b6cc01",
              "title": "CloudEng Course1 Lesson6 WhyWeNeedContainers V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "WXuXp3WSz6E",
                "china_cdn_id": "WXuXp3WSz6E.mp4"
              }
            },
            {
              "id": 851136,
              "key": "98017f03-80c2-462a-8120-b7ca63754bf6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*We will be going more in-depth on the topic of microservices in Course: Microservices at Scale using AWS & Kubernetes*\n\nLet's learn about a few key terms:\n\n### What is a Container?\n\nOS level virtualization allows us to run *multiple isolated processes* in parallel. A container is an isolated process that consists of the following items, all bundled into one package:\n\n* the application code, \n* the required dependencies (e.g. libraries, utilities, configuration files), and \n* the necessary runtime environment to run the application. \n\nEach container is an independent component that can run on its own and be moved from environment to environment.\n\n### Benefit of Containers\n\n* Containers make it easier for developers to create, deploy, and run applications on different hardware and platforms, quickly and easily. \n* Containers share a single kernel and share application libraries. \n* Containers cause a lower system overhead as compared to Virtual Machines.",
              "instructor_notes": ""
            },
            {
              "id": 1146924,
              "key": "e399e948-1198-48f1-b906-9f58c599e325",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### How to create containers?\n\nSeveral platforms (called Container runtime/engines) allow us to create containers. A few such platforms are:\n\n* <a href=\"https://www.docker.com/products/container-runtime\" target=\"_blank\">Docker</a> \n* <a href=\"https://cri-o.io/\" target=\"_blank\">CRI-O</a>\n* <a href=\"https://openvz.org/\" target=\"_blank\">OpenVZ</a>\n* <a href=\"https://containerd.io/\" target=\"_blank\">Containerd</a>\n\nIn this ND, you will learn to create containers using the Docker engine.",
              "instructor_notes": null
            },
            {
              "id": 1123498,
              "key": "ffe859fb-3509-4220-883b-89146437d319",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n#### Docker Containers versus Virtual Machines\nThere are several benefits of using Containers over VMs:\n* Size: Containers are much smaller than Virtual Machines (VM) and run as isolated processes versus virtualized hardware. VMs can be in GBs while containers are in MBs.\n* Speed: Virtual Machines can be slow to boot and take minutes to launch. A container can spawn much more quickly typically in seconds.\n* Composability: Containers are designed to be programmatically built and are defined as source code. Virtual Machines are often replicas of a conventional computer system. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1123499,
              "key": "0f16c93d-f6d8-4cd3-a860-7fb3283c07da",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/5ff45cab_screenshot-2021-01-05-at-6.02.09-pm/screenshot-2021-01-05-at-6.02.09-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0f16c93d-f6d8-4cd3-a860-7fb3283c07da",
              "caption": "Comparing traditional, VMs, and containerized deployment",
              "alt": "",
              "width": 700,
              "height": 1454,
              "instructor_notes": null
            },
            {
              "id": 1123772,
              "key": "c18ffa73-7540-4c1b-aead-e4a49c473f6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### 2. Docker\nDocker is a (container runtime) tool that helps to build, test, and run containers. You can build containers locally using a *command-line utility*, [Docker Desktop](https://docs.docker.com/desktop/). If there are multiple containers running individual services of an application, you will need to use [Docker Compose](https://docs.docker.com/compose/) utility to specify dependent relationships between containers.\n\n### 3. Docker Image\nAn *image* (or Docker image) is a portable auto-generated template that contains a set of instructions to create a container. An image can be instantiated multiple numbers of times to create multiple *containers*.\n\n### 4. Dockerfile\t\nA text file containing commands to create an image. In other words, Docker generates images by reading the commands from a Dockerfile. \n\n\n### Recommended Read\n* [What is a Container?](https://www.docker.com/resources/what-container)\n* [How to Get Started with Docker?](https://docs.docker.com/get-started/) - Watch the video tutorial available here. \n",
              "instructor_notes": ""
            },
            {
              "id": 851137,
              "key": "5eaca6c7-9b88-46fe-8ab0-2e22740135e7",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5eaca6c7-9b88-46fe-8ab0-2e22740135e7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify components contained in a container. Pick two.",
                "answers": [
                  {
                    "id": "a1558888012789",
                    "text": "Application",
                    "is_correct": true
                  },
                  {
                    "id": "a1558888030818",
                    "text": "Virtualized hardware",
                    "is_correct": false
                  },
                  {
                    "id": "a1558888031631",
                    "text": "Runtime libraries",
                    "is_correct": true
                  },
                  {
                    "id": "a1558888032373",
                    "text": "Host operating system",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 850182,
          "key": "ee3722a3-c924-4147-b3b8-7250bbac591e",
          "title": "Elastic Container Service (ECS)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ee3722a3-c924-4147-b3b8-7250bbac591e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850496,
              "key": "f580326d-184d-47cd-9260-0f251ffdac4b",
              "title": "CloudEng Course1 Lesson6 ElasticContainerService(PART ONE) V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "W3XqJWl38k8",
                "china_cdn_id": "W3XqJWl38k8.mp4"
              }
            },
            {
              "id": 851140,
              "key": "8bc9c707-c3e7-4fe1-867d-e746631b79c4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h3>What is Elastic Container Service (ECS)? </h3>\n\nECS is an orchestration service used for automating deployment, scaling, and managing of your containerized applications. ECS works well with Docker containers by:\n\n<ul>\n<li>launching and stopping Docker containers</li>\n<li>scaling your applications</li>\n<li>querying the state of your applications</li>\n</ul>\n\n<h3>Tips</h3>\n<ul>\n<li>ECS falls under the Compute section on the AWS Management Console.</li>\n<li>You can schedule long-running applications, services, and batch processeses using ECS.</li>\n<li>Docker is the only container-runtime platform supported by Amazon ECS. Other container-runtime tools available in the insdustry are Rocket, LXD, OpenVZ, any a few more. </li>\n</ul>\n",
              "instructor_notes": ""
            },
            {
              "id": 851141,
              "key": "f50b729c-dd4a-4c18-901f-70c3c88308c7",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f50b729c-dd4a-4c18-901f-70c3c88308c7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Identify features of ECS. Pick three.",
                "answers": [
                  {
                    "id": "a1558890142470",
                    "text": "deployment automation",
                    "is_correct": true
                  },
                  {
                    "id": "a1558890168279",
                    "text": "notifying and alerting users",
                    "is_correct": false
                  },
                  {
                    "id": "a1558890169020",
                    "text": "automatic scaling ",
                    "is_correct": true
                  },
                  {
                    "id": "a1558890169775",
                    "text": "application management",
                    "is_correct": true
                  },
                  {
                    "id": "a1558890170470",
                    "text": "application installs",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 859400,
              "key": "653c3041-7912-4c35-8321-9b60e9e29e4c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Resources\n---\n* [What is Amazon ECS?](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html)\n* Before we move on to the demonstrate AWS ECS, make sure to have a glance at <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html\" target=\"_blank\">Docker basics for Amazon ECS</a>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 850497,
          "key": "299a5233-3c2e-4d1b-bd8f-e0b444687874",
          "title": "Demo - Elastic Container Service",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "299a5233-3c2e-4d1b-bd8f-e0b444687874",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850498,
              "key": "5a5283c5-95d2-41c4-bf2d-a17e9e5e4485",
              "title": "CloudEng Course1 Lesson6 ElasticContainerService(PART TWO) V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "2jVSICPoyNE",
                "china_cdn_id": "2jVSICPoyNE.mp4"
              }
            },
            {
              "id": 1123778,
              "key": "981ef0d6-6e02-4aa8-ad82-2cf67f15ecf8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### How does Amazon ECS helps?\nAssume you have a multi-container application that you want to run on the cloud. You may also require to scale the containers automatically based on the incoming traffic in such a case. \n\n Amazon ECS deploys, manages, and scales containers based on your resource needs and supports other AWS services like Elastic Load Balancing, EC2 security groups, EBS volumes, and IAM roles.\n\n### Key terms related to Amazon ECS\n\n1. **Task definition**<br> A [task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size) describes the application requirements concerning containers, such as the max amount of total CPU and memory used for the task (not for the individual container) and container definitions. \n\n ECS offers to create a task definition using either the AWS Fargate or AWS EC2. AWS Fargate is priced based on the task size, whereas the EC2 service is priced based on computing resource usage. ",
              "instructor_notes": ""
            },
            {
              "id": 1123780,
              "key": "4f90790d-44f8-481b-813d-d044e6c869d0",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/5ff58720_screenshot-2021-01-06-at-2.44.25-pm/screenshot-2021-01-06-at-2.44.25-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/4f90790d-44f8-481b-813d-d044e6c869d0",
              "caption": "You can create a task definition using either the AWS Fargate or AWS EC2",
              "alt": "",
              "width": 700,
              "height": 1234,
              "instructor_notes": null
            },
            {
              "id": 1123781,
              "key": "5296f371-db62-4e6a-8f13-2df0cbbd6909",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Either way, you can add a container definition, as shown in the snapshot below.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1123782,
              "key": "7d18d0b7-f660-42ab-8f9d-fb4f4a778a67",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/5ff58774_screenshot-2021-01-06-at-2.50.37-pm/screenshot-2021-01-06-at-2.50.37-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7d18d0b7-f660-42ab-8f9d-fb4f4a778a67",
              "caption": "Add a container definition",
              "alt": "",
              "width": 600,
              "height": 1590,
              "instructor_notes": null
            },
            {
              "id": 1123779,
              "key": "3b2a43c9-b73c-4f04-b1fa-a91fd7b03642",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n2. **ECS cluster**<br> A [cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html) is a set of containers running task requests within an AWS region. A default cluster gets created when you create and run your first task definition. \n\n\n3. **Container agent**<br> It is a utility that connects container instances to one of your clusters. Each container instance runs a container agent.\n\n\n4. **Container instance**<br> A [container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html) is an EC2 instance that is registered into any of your ECS clusters.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1128166,
          "key": "2fec1f9f-c8f8-4b58-b767-6a40cdfd0643",
          "title": "ECS - Create a Cluster",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2fec1f9f-c8f8-4b58-b767-6a40cdfd0643",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1128167,
              "key": "85775f54-84c6-4030-9e77-341a64f61e77",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this hands-on exercise, you will learn how to create a Cluster in Amazon ECS. \n\n* Prerequisites: AWS Account\n\n\nFollow these steps to create a Cluster in ECS.\n\n\n1. Navigate to the [ECS dashboard](https://console.aws.amazon.com/ecs/home), and select the **Clusters** service from the left-hand side menu pane. \n\n\n2. On the Clusters page, choose the **Create cluster** button.\n",
              "instructor_notes": ""
            },
            {
              "id": 1128171,
              "key": "9c696f7a-9b38-4c9e-93eb-f9ad1d8e60eb",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/6006c781_screenshot-2021-01-19-at-5.07.12-pm/screenshot-2021-01-19-at-5.07.12-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9c696f7a-9b38-4c9e-93eb-f9ad1d8e60eb",
              "caption": "Create a cluster",
              "alt": "",
              "width": 600,
              "height": 798,
              "instructor_notes": null
            },
            {
              "id": 1128168,
              "key": "3ab1c419-6741-45b2-b2d4-d81a0ad4c6d6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "3. At the *Select cluster template* step, choose the **Networking only** compatibility.\n",
              "instructor_notes": ""
            },
            {
              "id": 1128172,
              "key": "0f50429e-c29b-4dfc-a730-ad0c571b7d6f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/6006c7a0_screenshot-2021-01-19-at-5.14.07-pm/screenshot-2021-01-19-at-5.14.07-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0f50429e-c29b-4dfc-a730-ad0c571b7d6f",
              "caption": "Choosing the **Networking only** template, that allows creating a cluster and optionally create a VPC, and subnets.",
              "alt": "",
              "width": 500,
              "height": 832,
              "instructor_notes": null
            },
            {
              "id": 1128169,
              "key": "0d8f8bbb-1c4b-45fe-b9d4-5b763a129c53",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "4. At the *Configure Cluster* step, enter the name for your cluster. Choose a unique name.\n\n\n5. In the *Networking* section, create a new VPC for your cluster. You can keep the default settings for the subnet division. \n\n",
              "instructor_notes": ""
            },
            {
              "id": 1128173,
              "key": "0a362a62-e236-4dac-8ea7-247c2372df07",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2021/January/6006c808_screenshot-2021-01-19-at-5.18.31-pm/screenshot-2021-01-19-at-5.18.31-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/0a362a62-e236-4dac-8ea7-247c2372df07",
              "caption": "Creating the cluster in a new VPC",
              "alt": "",
              "width": 700,
              "height": 1048,
              "instructor_notes": null
            },
            {
              "id": 1128170,
              "key": "9eb328ae-e792-422d-9313-ef2133ed11a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n6. Enable the CloudWatch container insights. And finally, click the Create button. \n\n\n*Congratulations, you’ve created your first Cluster*\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 850183,
          "key": "7fdb0081-4311-45e1-a8de-1c07c92aea07",
          "title": "Lesson Recap",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7fdb0081-4311-45e1-a8de-1c07c92aea07",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 850537,
              "key": "ae0d50bb-e6c0-499f-8b8e-75e7b70227f2",
              "title": "CloudEng Course1 Lesson6 Recap",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "hq3jOhugjdQ",
                "china_cdn_id": "hq3jOhugjdQ.mp4"
              }
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}