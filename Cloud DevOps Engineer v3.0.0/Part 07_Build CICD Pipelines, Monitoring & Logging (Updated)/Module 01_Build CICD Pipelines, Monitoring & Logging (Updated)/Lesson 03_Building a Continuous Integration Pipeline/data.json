{
  "data": {
    "lesson": {
      "id": 1019954,
      "key": "88da9ac3-d392-4492-9e97-c3c2d62f17df",
      "title": "Building a Continuous Integration Pipeline",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson, we'll learn about CI, the common building blocks of CI tools, and we'll build a CI pipeline!",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/88da9ac3-d392-4492-9e97-c3c2d62f17df/1019954/1595577949238/Building+a+Continuous+Integration+Pipeline+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/88da9ac3-d392-4492-9e97-c3c2d62f17df/1019954/1595577940704/Building+a+Continuous+Integration+Pipeline+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 1019955,
          "key": "40f0a2c4-f1e5-4d0f-a24b-1b26869965b5",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "40f0a2c4-f1e5-4d0f-a24b-1b26869965b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029078,
              "key": "cd0d7aa7-35dd-4626-a15d-5043f2b1c8b3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Introduction to Continuous Integration",
              "instructor_notes": ""
            },
            {
              "id": 1029077,
              "key": "7bb9a6d4-f9a1-45be-8f95-66c41c1945f5",
              "title": "ND9991 C03 L02 Introduction To Continuous Integration",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "5vpe6w2bAwU",
                "china_cdn_id": "5vpe6w2bAwU.mp4"
              }
            },
            {
              "id": 1044938,
              "key": "039dec26-313f-4d39-8fe4-04bfcd5afc9f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/July/5f0dfe9c_screen-shot-2020-07-14-at-11.43.08-am/screen-shot-2020-07-14-at-11.43.08-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/039dec26-313f-4d39-8fe4-04bfcd5afc9f",
              "caption": "**Stop Number Two!**",
              "alt": "An image of a timeline saying we're on the second main lesson: Building a Continuous Integration Pipeline.",
              "width": 1338,
              "height": 214,
              "instructor_notes": null
            },
            {
              "id": 1029079,
              "key": "03526fd4-d443-4c48-98d1-f87e3974c4e6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### In this Lesson, We Will...\n- Learned about CI and How It Fits in the Bigger Picture\n- Discussed Some Behaviors of CI Veterans\n- Went Over Some of the Common Building Blocks of Most CI Tools, Like:\n  - Environment Variables\n  - Triggers\n  - Pipelines\n  - Jobs\n  - File Sharing Between Jobs\n  - Re-Usable Job Code\n  - Job Failures\n- Designed a Complete CI Pipeline\n\nI hope to give you enough information and practice in the art of Continuous Integration that you will be able to adopt and implement it in any of your future projects.\nLet's get started!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023049,
          "key": "c91556f9-ea5a-42ec-b0b0-bd64c26e7b50",
          "title": "Big Picture",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c91556f9-ea5a-42ec-b0b0-bd64c26e7b50",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029081,
              "key": "0150ea3e-8e9c-4287-8835-6693d410d9a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Big Picture",
              "instructor_notes": ""
            },
            {
              "id": 1028846,
              "key": "8d8ea90b-9fd1-466c-ac6d-941efe1e27b6",
              "title": "ND9991 C03 L02 Big Picture",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "_UPj64uP82s",
                "china_cdn_id": "_UPj64uP82s.mp4"
              }
            },
            {
              "id": 1028848,
              "key": "cad9ceef-0a60-4437-91c6-9e03b329ded4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Big Picture\n\n#### What is CI?\n\n**Continuous Integration** is the practice of automating the integration of code changes from multiple contributors into a single software project _([definition from Atlassian](https://www.atlassian.com/continuous-delivery/continuous-integration))_.\n\n#### CI Opens Doors\n\n- Singular, Unified, Consistent Build Process\n- Automatically Packaged and Downloadable \"Binaries\"\n- Faster Recovery from botched Integration (If You Break It, You Fix It!)\n- Unit Test Suite Gets Some Respect\n- Greater Transparency and Communication\n- More Time Adding Value (aka Developing Software)",
              "instructor_notes": ""
            },
            {
              "id": 1028847,
              "key": "85e00a5a-c678-4819-ac78-0656d12ca0ef",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5eee5f93_003/003.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/85e00a5a-c678-4819-ac78-0656d12ca0ef",
              "caption": "**Many Contributors, One Goal**",
              "alt": "An image showing many people with steams of ones and zeros connecting to a trophy which represents their shared goal.",
              "width": 6538,
              "height": 3766,
              "instructor_notes": null
            },
            {
              "id": 1028849,
              "key": "6a79d310-5445-4f3b-b066-a5306f68ee00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Differentiating between CI and CD\n\n_**Continuous integration** is all about the source code._ \n\nNew changes to the code need to be validated, verified, exercised, worked over, massaged and squeezed to see if there are leaks. We do this by compiling, transpiling, linting, running unit tests, performing static analysis, checking dependencies for security vulnerabilities and other things.\n\n_**Continuous deployment** is all about built code and deployment._\n\nOnce the source code has been built in CI, we're ready to ship it to servers and devices either in the same network or elsewhere. Depending on your team's delivery process and deployment strategy, you might deploy to a staging or pre-production server for final testing or you might deploy to production right away. Before doing so, CD can run scripts to prepare the infrastructure, run smoke tests, and handle rollbacks and reverts if something doesn't go as planned.\n",
              "instructor_notes": ""
            },
            {
              "id": 1031764,
              "key": "c2fef2fa-b02a-406c-8b6b-8d5281488a08",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/June/5eee5fb3_005-i/005-i.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/c2fef2fa-b02a-406c-8b6b-8d5281488a08",
              "caption": "",
              "alt": "",
              "width": 7330,
              "height": 2030,
              "instructor_notes": null
            },
            {
              "id": 1026362,
              "key": "f90372ab-94bc-48d1-af2d-97222bfedc9c",
              "title": "Big Picture Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f90372ab-94bc-48d1-af2d-97222bfedc9c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Mark the concepts that are part of Continuous _Integration_ but **not** Continuous _Deployment_.",
                "answers": [
                  {
                    "id": "a1589921017266",
                    "text": "Run unit/integration tests",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921018021",
                    "text": "Compile/lint code",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921018552",
                    "text": "Run smoke tests",
                    "is_correct": false
                  },
                  {
                    "id": "a1589921019096",
                    "text": "Static Code Analysis",
                    "is_correct": true
                  },
                  {
                    "id": "a1590636546665",
                    "text": "Merge code from all sources (branches and or commits)",
                    "is_correct": true
                  },
                  {
                    "id": "a1590636548088",
                    "text": "Perform a roll back if necessary",
                    "is_correct": false
                  },
                  {
                    "id": "a1590636559988",
                    "text": "Create Infrastructure",
                    "is_correct": false
                  },
                  {
                    "id": "a1590636590420",
                    "text": "Deliver packaged code to environments",
                    "is_correct": false
                  },
                  {
                    "id": "a1590636601273",
                    "text": "Promote Versions to Production",
                    "is_correct": false
                  },
                  {
                    "id": "a1590636613361",
                    "text": "Check libraries and dependencies versions",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1023050,
          "key": "7e3b968b-acb7-43da-a1ea-d544837d4c1b",
          "title": "Intuition",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e3b968b-acb7-43da-a1ea-d544837d4c1b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029082,
              "key": "5057149a-1382-445f-8e25-c41837a6d50f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Intuition",
              "instructor_notes": ""
            },
            {
              "id": 1028946,
              "key": "5a74cc6e-667e-47db-81a4-f00d88441ed0",
              "title": "ND9991 C03 L02 Intuition",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gC_3oKKh8KI",
                "china_cdn_id": "gC_3oKKh8KI.mp4"
              }
            },
            {
              "id": 1028943,
              "key": "2360e8d8-0221-4533-af49-9bae31601d42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Characteristics of Healthy CI Pipelines\nWe want to create healthy, consistent pipelines in order to create a better build process!\n\n- Highest Priority When the Build is Broken\n- Trusted Members of the Team\n- Have the Same Abilities as any Member of the Team\n- Enforce Team Quality Rules\n- Communicate Useful Information\n- Shorten Feedback Loops\n- Don't Require Stacks of Documentation\n- Automated to the End!",
              "instructor_notes": ""
            },
            {
              "id": 1026363,
              "key": "06977373-0e84-4a96-a7ba-317588b62aa7",
              "title": "Intuition Quiz 1",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "06977373-0e84-4a96-a7ba-317588b62aa7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Mark all the characteristics of a healthy CI system.",
                "answers": [
                  {
                    "id": "a1589921194371",
                    "text": "Build passes and fails equally on CI and locally",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921231885",
                    "text": "Always sends zip files of code to manager on failure",
                    "is_correct": false
                  },
                  {
                    "id": "a1589921233253",
                    "text": "It does not require human intervention in its majority",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921234376",
                    "text": "Includes jobs to ensure the quality of the code",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921262767",
                    "text": "Notifies every relevant stakeholder of every unit test failure",
                    "is_correct": false
                  },
                  {
                    "id": "a1589921272339",
                    "text": "Runs quickly",
                    "is_correct": true
                  },
                  {
                    "id": "a1590642629974",
                    "text": "Easy to maintain without much documentation",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1026364,
              "key": "e1c2c2c0-8626-4721-8b9e-034732fb3f4a",
              "title": "Reflect",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e1c2c2c0-8626-4721-8b9e-034732fb3f4a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": null,
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "Select one of the above characteristics of a healthy CI pipeline and explain how that might help you in your current work. If you don't currently work in a technical role, get creative!"
              },
              "answer": {
                "text": "No matter which benefit you chose to write about, it was a good choice. All of these benefits are  characteristics we would want for any team!",
                "video": null
              }
            }
          ]
        },
        {
          "id": 1023053,
          "key": "26ba9c4f-f924-4470-9f56-328be0ea6954",
          "title": "Creating Pipelines",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "26ba9c4f-f924-4470-9f56-328be0ea6954",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029083,
              "key": "cb162138-916b-46d6-aa35-49e8f800aa1b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating Pipelines",
              "instructor_notes": ""
            },
            {
              "id": 1029042,
              "key": "2421046c-d23c-40ed-9191-258c58619801",
              "title": "ND9991 C03 L02 Creating Pipelines",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "CnKUe647g20",
                "china_cdn_id": "CnKUe647g20.mp4"
              }
            },
            {
              "id": 1029455,
              "key": "50d93e8c-7c37-4642-93f9-25694c21f80e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Single Responsibility Principle\n\n> The single-responsibility principle (SRP) is a computer-programming principle that states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class, module or function.\n\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Single-responsibility_principle)\n\nWhen we limit the responsibilities of our jobs, we get some nice side-effects:\n\n- Jobs tend to be smaller and quicker\n- We get better and more focused feedback when there's a job failure\n- The pipeline is more visually expressive, so non-technical people can better understand the pipeline",
              "instructor_notes": ""
            },
            {
              "id": 1044821,
              "key": "a0c032bc-7717-4d14-9cdf-271cfd7875f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Anatomy of a `config.yml` File",
              "instructor_notes": ""
            },
            {
              "id": 1029454,
              "key": "5f2c9e29-a3e5-4c36-9745-8443d337e3f4",
              "title": "ND9991 C03 L02 Creating Pipelines - Anatomy Of Config.Yml Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MPsm3AVjbn8",
                "china_cdn_id": "MPsm3AVjbn8.mp4"
              }
            },
            {
              "id": 1029468,
              "key": "aba2becf-3b33-4d27-beae-9aa12c6113a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Remember:\n",
              "instructor_notes": ""
            },
            {
              "id": 1029471,
              "key": "66887a2e-2fe1-4f5f-ac9b-7a917e0a4129",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/May/5ed263a3_pipeline-structure/pipeline-structure.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/66887a2e-2fe1-4f5f-ac9b-7a917e0a4129",
              "caption": "",
              "alt": "A graphics that says \"Pipelines have workflows that have jobs that have steps.\"",
              "width": 620,
              "height": 66,
              "instructor_notes": null
            },
            {
              "id": 1029469,
              "key": "31cf9237-d1a4-4d36-8814-7680203707f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Circle CI uses a yaml file to handle the configuration of pipelines and jobs. \n\n| **Section**     | **Description**                                                                                                                                                    |\n| :---------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `version`   | Specifies the version of CircleCI's runner you want to use. Most of the time, use the latest.                                                                  |\n| `jobs`      | List of jobs.                                                                                                                                                  |\n| `commands`  | List of reusable commands that can be used as steps in jobs.                                                                                                                              |\n| `orbs`      | Makes available some pre-written functionality that you can include in your jobs. Orbs become step types which we will see later when we talk more about jobs. |\n| `workflows` | Puts the jobs in execution order, sets up dependencies.                                                                                                        |\n\n#### Workflows\n\nIn Circle CI, a pipeline is made up of one or more workflows. Workflows contain jobs.\n\n| **Workflow Option**   | **Description**                                                                                                                                                               |\n| :---------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `<workflow_name>` | The name of the workflow that appears in the Circle CI web app. You can have multiple workflows for different scenarios, so it's helpful to give them future-proof names. |\n| `jobs`            | A list of jobs, already defined elsewhere in the config file, and some instructions on when to run them.                                                                  |\n\n#### Workflow Job Options\n\nA workflow defines the order in which we will run jobs.\n\n| **Workflow Job Option** | **Description**                                                                                                                                      |\n| :------------------ | :----------------------------------------------------------------------------------------------------------------------------------------------- |\n| `<job_name>`        | The name of the corresponding job.                                                                                                               |\n| `requires`          | Jobs are run in parallel by default, so if your job doesn't require any other jobs, they will all just run at the same time, or in random order. |\n| `filters`           | Excludes jobs based on current branch or tag.                                                              ",
              "instructor_notes": ""
            },
            {
              "id": 1026366,
              "key": "808e39d5-2133-4870-aa83-aad39d4331a4",
              "title": "Pipeline Scenario 1",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "808e39d5-2133-4870-aa83-aad39d4331a4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the following scenario follow the Single Responsibility Principle?\n\n> To take advantage of a compile step, we also run unit and integration tests in the same job. If we break this into smaller jobs, we will be wasting resources when compiling again and again.",
                "answers": [
                  {
                    "id": "a1589921614043",
                    "text": "Yes, it does.",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921666400",
                    "text": "No, it doesn't.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1026367,
              "key": "6d359fd2-67f0-4fc6-a43e-d0ef2996e0ac",
              "title": "Pipeline Scenario 2",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6d359fd2-67f0-4fc6-a43e-d0ef2996e0ac",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Does the following scenario follow the Single Responsibility Principle?\n\n> Our pipeline has a job that deploys the production files to our production server. Then, there's a job that runs some simple smoke tests. The separation helps us zero in on the problem if one of these jobs fails.",
                "answers": [
                  {
                    "id": "a1589921858721",
                    "text": "Yes, it does.",
                    "is_correct": true
                  },
                  {
                    "id": "a1589921887783",
                    "text": "No, it does not.",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1023054,
          "key": "d7e4db06-f686-4884-8d78-8986a5776c4f",
          "title": "Creating Jobs",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d7e4db06-f686-4884-8d78-8986a5776c4f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029084,
              "key": "fbe78d85-873a-4e57-8e34-d10508e95280",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Creating Jobs",
              "instructor_notes": ""
            },
            {
              "id": 1029043,
              "key": "89187948-cb70-45c5-90f7-558a9ea28750",
              "title": "ND9991 C03 L02 Creating Jobs Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sp8Nd1glog0",
                "china_cdn_id": "sp8Nd1glog0.mp4"
              }
            },
            {
              "id": 1029473,
              "key": "eac586bd-b87b-4c33-ac0d-45a40e8d32d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Anatomy of a Job\n\nRemember that a job is where we define the work that needs to get done.\n\n| **Job Option**    | **Description**                                                             |\n| :------------ | :---------------------------------------------------------------------- |\n| `<job_name>`  | The name of the job which shows up in the Circle CI web app.            |\n| `environment` | Map of environment variables.                                            |\n| `docker`      | Docker image in which to run the job.                                    |\n| `branches`    | Rules to decide when to run this job by branch exclusions or inclusions. |\n| `steps`       | Instructions to execute in the job.                                      |\n\n#### Docker Images\n\nWhen you are designing your jobs, you'll need to think about what docker image you want to use each time. If you're like me, you will have a handful of favorites. Each docker image comes pre-loaded with utilities and packages you need for different situations. \n\n| **Image**               | **Use**                                                   |\n| ------------------- | ----------------------------------------------------- |\n| `circleci/node`     | For Node.JS server-side and networking applications.  |\n| `circleci/postgres` | For tasks that require PostgreSQL database functions. |\n| `circleci/python`   | For job that need to run Python or pip.               |\n| `alpine:latest`     | A lightweight container for simple tasks.             |\n| `amazon/aws-cli`    | For tasks that require the AWS CLI and related tools. |\n\n#### Types of Steps\n\nThink of the steps in a job as a task list. Each step will perform some instructions and then we move on to the next step until they've all been executed. Each step has a type that defines how it will be run or represents an alias that points to another set of steps. \n\n| **Step Type**                                     | **Description**                                                                                                        |\n| :-------------------------------------------- | :----------------------------------------------------------------------------------------------------------------- |\n| `checkout`                                    | Checks out the source code. Common to have this in all jobs in CI.                                                |\n| `run`                                         | Runs a shell command. Can name the step or simply execute a script.                                                 |\n| `when`                                        | A conditional step that has its own steps that are run if the condition is true.                                  |\n| `save_cache` and `restore_cache`              | Save and restore files or folders. Cleaned up after pipeline finishes.                                             |\n| `persist_to_workspace` and `attach_workspace` | Like a cache, but files are available for 15 days after pipeline.                                                    |\n| `add_ssh_keys`                                | Adding some additional ssh keys to the job for a tool that needs them (i.e. Ansible).                                 |\n| `store_artifacts`                             | Makes an artifact, or file, available for download via CircleCI web app or API.                                     |\n| `store_test_results`                          | Stores test results from test runner so that results are visible in Circle CI web app in the Test Summary section. |\n| \"Orbs\"                                        | Orbs, which we talked about already, are used like step types.                                                      |\n",
              "instructor_notes": ""
            },
            {
              "id": 1026368,
              "key": "caf535f6-ed61-4d34-8476-7ad6314c91d4",
              "title": "Job Image Matching",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "caf535f6-ed61-4d34-8476-7ad6314c91d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match each use to its corresponding job image."
                },
                "concepts_label": "Use",
                "answers_label": "Image",
                "concepts": [
                  {
                    "text": "For Node.JS server-side and networking applications.",
                    "correct_answer": {
                      "id": "a1589921987720",
                      "text": "circleci/node"
                    }
                  },
                  {
                    "text": "For tasks that require PostgreSQL database functions.",
                    "correct_answer": {
                      "id": "a1589922041786",
                      "text": "circleci/postgres"
                    }
                  },
                  {
                    "text": "For job that need to run Python or pip.",
                    "correct_answer": {
                      "id": "a1589922042548",
                      "text": "circleci/python"
                    }
                  },
                  {
                    "text": "A lightweight container for simple tasks.",
                    "correct_answer": {
                      "id": "a1589922043281",
                      "text": "alpine:latest"
                    }
                  },
                  {
                    "text": "For tasks that require the AWS CLI and related tools.",
                    "correct_answer": {
                      "id": "a1589922044136",
                      "text": "amazon/aws-cli"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1589922043281",
                    "text": "alpine:latest"
                  },
                  {
                    "id": "a1589922044136",
                    "text": "amazon/aws-cli"
                  },
                  {
                    "id": "a1589922041786",
                    "text": "circleci/postgres"
                  },
                  {
                    "id": "a1589922042548",
                    "text": "circleci/python"
                  },
                  {
                    "id": "a1589921987720",
                    "text": "circleci/node"
                  }
                ]
              }
            },
            {
              "id": 1026369,
              "key": "387ad2ce-e457-46be-b952-052d4c0fbef6",
              "title": "Job Elements",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "387ad2ce-e457-46be-b952-052d4c0fbef6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Mark the terms that appear as yaml nodes in a Circle CI job definition.",
                "answers": [
                  {
                    "id": "a1589922219412",
                    "text": "vars",
                    "is_correct": false
                  },
                  {
                    "id": "a1589922245241",
                    "text": "steps",
                    "is_correct": true
                  },
                  {
                    "id": "a1589922245849",
                    "text": "config",
                    "is_correct": false
                  },
                  {
                    "id": "a1589922246906",
                    "text": "docker",
                    "is_correct": true
                  },
                  {
                    "id": "a1589922313216",
                    "text": "trigger",
                    "is_correct": false
                  },
                  {
                    "id": "a1589922313862",
                    "text": "environment",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1020593,
          "key": "50a8a3a4-abce-4034-b9fa-0d467f96a78e",
          "title": "Exercise: Creating a Simple Workflow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "50a8a3a4-abce-4034-b9fa-0d467f96a78e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020596,
              "key": "a9bf8835-497e-4244-a5d8-6b60ec6d0087",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Creating a Simple Workflow\n\nCreate a workflow that combines a few simple jobs and executes without failure.\n\n### Instructions:\n\n1. Follow [the instructions in the CircleCI 2.0 documentation](https://circleci.com/docs/2.0/getting-started/) to set up your first pipeline. Create a new repository in Github or select an existing repository. Don't go too far in the tutorial! We suggest you stop just before getting to the \"Breaking Your Build\" section.\n1. Clone the repository to your local computer. Change to the branch Circle CI created.\n1. Open the `.circleci/config.yaml` file with the code editor of your choice.\n1. You'll notice a config that looks like this:\n\n   ```\n   # Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference\n   version: 2.1\n   # Use a package of configuration called an orb.\n   orbs:\n     # Declare a dependency on the welcome-orb\n     welcome: circleci/welcome-orb@0.4.1\n   # Orchestrate or schedule a set of jobs\n   workflows:\n     # Name the workflow \"welcome\"\n     welcome:\n       # Run the welcome/run job in its own container\n       jobs:\n         - welcome/run\n   ```\n\n1. Add a `jobs` section between the `orbs` and `workflows` sections.\n1. Add two jobs named something like `print_hello` and `print_world`.\n\n   - Both jobs should use the [Docker executor](https://circleci.com/docs/2.0/executor-types/#using-docker) and a lightweight image like `circleci/node:13.8.0`.\n   - Both jobs should have a `steps` section that runs a simple bash command.\n   - To run a bash command, add a `run` line followed by your bash instructions. We'd like to print (`echo`) \"hello\" in one job and \"world\" in the other.\n\n1. Add your job names to the `workflows` section so that they run in sequence.\n1. Use the [\"requires\" key](https://circleci.com/docs/2.0/configuration-reference/#requires) to make your `print_world` job wait for the `print_hello` job to finish.",
              "instructor_notes": ""
            },
            {
              "id": 1020597,
              "key": "26adddf2-da19-48ff-970b-a27ca3df925c",
              "title": "Create a Simple Workflow",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "26adddf2-da19-48ff-970b-a27ca3df925c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create/Select Repository.",
                "Add Initial Configuration.",
                "Define Two Jobs.",
                "Add Jobs to the Workflow.",
                "Make `print_world` Depend on `print_hello`.",
                "Verify Pipeline Runs on Commit and that \"world\" Comes After \"hello\"."
              ],
              "positive_feedback": "Outstanding!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020594,
          "key": "403f0d12-1d35-426b-8cea-f8c6078dfd23",
          "title": "Solution: Creating a Simple Workflow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "403f0d12-1d35-426b-8cea-f8c6078dfd23",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1044351,
              "key": "39c15d85-23ec-4021-a731-69dbbacc7d03",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Creating a Simple Workflow",
              "instructor_notes": ""
            },
            {
              "id": 1020599,
              "key": "91afc6bc-31b8-4082-9a60-fdfa3d871cfb",
              "title": "ND9991 C03 L02 Solution - Create A Workflow",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Oi2iLwWKJY4",
                "china_cdn_id": "Oi2iLwWKJY4.mp4"
              }
            },
            {
              "id": 1020598,
              "key": "bc348b2e-ebc3-4014-bba5-98c5af0562ec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Your final product should be something like this:\n\n```\n# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference\nversion: 2.1\n# Use a package of configuration called an orb.\norbs:\n  # Declare a dependency on the welcome-orb\n  welcome: circleci/welcome-orb@0.4.1\n# Orchestrate or schedule a set of jobs\njobs:\n  print_hello:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - run: echo hello\n  print_world:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - run: echo world\nworkflows:\n  # Name the workflow \"welcome\"\n  welcome:\n    # Run the welcome/run job in its own container\n    jobs:\n      - welcome/run\n      - print_hello\n      - print_world:\n          requires:\n            - print_hello\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1029508,
          "key": "2696f877-f009-4c66-aef8-61f7721c3fca",
          "title": "Environment Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2696f877-f009-4c66-aef8-61f7721c3fca",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029510,
              "key": "e2c6b1a8-cb36-42c5-abe5-0fc9cd89ae0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Environment Variables\n",
              "instructor_notes": ""
            },
            {
              "id": 1029509,
              "key": "48070934-0db6-441f-8705-92607c97abe0",
              "title": "ND9991 C03 L02 Global Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Nm0LI-TBMV8",
                "china_cdn_id": "Nm0LI-TBMV8.mp4"
              }
            },
            {
              "id": 1044830,
              "key": "92bfc8d7-5e39-4d86-89b2-1af3c1e57a7b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Pipeline Values\n\nCircle CI has a handful of values that might come in handy.\n\n| **Value**                    | **Description**                                                  |\n| :----------------------- | :----------------------------------------------------------- |\n| `pipeline.id`              | The ID of the currently running pipeline                     |\n| `pipeline.number`          | An alternative numeric ID for the currently running pipeline |\n| `pipeline.project.git_url` | The URL of the triggering git event (ex: pull request URL)   |\n| `pipeline.project.type`    | Example: “github”                                                  |\n| `pipeline.git.branch`      | The branch triggering the pipeline                           |\n\nYou can use them almost anywhere in your jobs with a simple syntax:\n\n```\nMy pipeline id is << pipeline.id >> and my git branch is << pipeline.git.branch >>.\n```\n\nNote: Pipeline values cannot be used outside the job context. For example, you cannot use these in a shell script.\n\n#### Further Reading: \n* [Pipeline Values Documentation](https://circleci.com/docs/2.0/pipeline-variables/#pipeline-values)\n",
              "instructor_notes": ""
            },
            {
              "id": 1044829,
              "key": "a8d639d4-0efb-40d4-b49f-4ecf6b738557",
              "title": "ND9991 C03 L02 Environment Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "8TwctheVuZQ",
                "china_cdn_id": "8TwctheVuZQ.mp4"
              }
            },
            {
              "id": 1029519,
              "key": "edd46005-a1b7-4df5-9860-94a1cd6a0885",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Environment Variables\n\nAnd, of course, we can use environment variables throughout the system as well. Some env vars are defined by us, others are built-in to the circle ci environment. All env vars are bound to a scope.\n\n#### Environment Variable Scopes\n\n| **Scope**        | **Description**                                                                                                                                                                          |\n| :----------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Organization | Organizations contain projects, so env vars set at this level will be available to all child projects. Great for organization-wide keys, for example.                                |\n| Project      | Projects contain pipeline jobs, so env vars set the project level are available to all jobs in the project but are not to jobs that belong to other projects.                       |\n| Job          | Environment variables that are set inside the job are only available to that job. You can either set env vars using the `environment` map or by exporting them using shell commands. |\n\n#### Built-In Environment Variables\n\nCircle CI comes loaded with many built-in environment variables that can be almost anywhere. Some built-in env vars are equal to or very similar to the pipeline above. But there are many more that go beyond just pipeline values. \n\n| **Environment Variable**            | **Description**                                                      |\n| :----------------- | :--------------------------------------------------------------- |\n| `CIRCLE_BRANCH`      | The name of the Git branch currently being built                 |\n| `CIRCLE_WORKFLOW_ID` | A unique identifier for the workflow instance of the current job |\n| `CIRCLE_BUILD_NUM`   | The number of the CircleCI build                                 |\n| `CIRCLE_PR_NUMBER`   | The number of the associated GitHub or Bitbucket pull request    |\n| `CIRCLE_SHA1`        | The SHA1 hash of the last commit of the current build            |\n\n#### Further Reading:\n* Read through the env variables that are available in [Circle CI docs](https://circleci.com/docs/2.0/env-vars/).",
              "instructor_notes": ""
            },
            {
              "id": 1029550,
              "key": "b27eee2a-7696-428e-924b-c380f2def04d",
              "title": "Built-In Environment Variables",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b27eee2a-7696-428e-924b-c380f2def04d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the built-in environment variables with their definitions."
                },
                "concepts_label": "Definition",
                "answers_label": "Environment Variable",
                "concepts": [
                  {
                    "text": "A unique identifier for the workflow instance of the current job.",
                    "correct_answer": {
                      "id": "a1590884274767",
                      "text": "`CIRCLE_WORKFLOW_ID`"
                    }
                  },
                  {
                    "text": "The SHA1 hash of the last commit of the current build.",
                    "correct_answer": {
                      "id": "a1590884312863",
                      "text": "`CIRCLE_SHA1`"
                    }
                  },
                  {
                    "text": "The number of the associated GitHub or Bitbucket pull request.",
                    "correct_answer": {
                      "id": "a1590884328775",
                      "text": "`CIRCLE_PR_NUMBER`"
                    }
                  },
                  {
                    "text": "The number of the CircleCI build.",
                    "correct_answer": {
                      "id": "a1590884337689",
                      "text": "`CIRCLE_BUILD_NUM`"
                    }
                  },
                  {
                    "text": "The name of the Git branch current.",
                    "correct_answer": {
                      "id": "a1590884346824",
                      "text": "`CIRCLE_BRANCH`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1590884328775",
                    "text": "`CIRCLE_PR_NUMBER`"
                  },
                  {
                    "id": "a1590884312863",
                    "text": "`CIRCLE_SHA1`"
                  },
                  {
                    "id": "a1590884274767",
                    "text": "`CIRCLE_WORKFLOW_ID`"
                  },
                  {
                    "id": "a1590884337689",
                    "text": "`CIRCLE_BUILD_NUM`"
                  },
                  {
                    "id": "a1590884346824",
                    "text": "`CIRCLE_BRANCH`"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 1029511,
          "key": "1ec7a010-b0cb-48bd-8d9a-177c7ca909cd",
          "title": "Exercise: Environment Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1ec7a010-b0cb-48bd-8d9a-177c7ca909cd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029513,
              "key": "6875e38d-a8b3-4816-b553-7d50f8a95d9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Environment Variables\n\nConfigure project-level environment variables.\n\n### Instructions:\n\n1. Create a new project in Circle CI or use an existing project\n2. Go to your project's settings and navigate to \"Environment Variables\". For a hint about where to find this, check out the [docs](https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project).\n3. Add an environment variable with your name as the value.\n4. Add a job to the project's pipeline that prints your name to the console using the environment variable. If you'd like, you can even use the example `.circleci/config.yml` in the [docs](https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project) as your template.\n",
              "instructor_notes": ""
            },
            {
              "id": 1029514,
              "key": "c83b3660-9738-4e83-9287-0e43c43dd55e",
              "title": "Environment Variables",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c83b3660-9738-4e83-9287-0e43c43dd55e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create/Select a Project.",
                "Add an Environment Variable With Your Name as the Value.",
                "Add a Job that Prints the Env Variable to the Console.",
                "Run the Job and See It Work!"
              ],
              "positive_feedback": "Excellent work!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1029512,
          "key": "6c8f4961-6b44-43c9-a37c-7711e2ed65c6",
          "title": "Solution: Environment Variables",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6c8f4961-6b44-43c9-a37c-7711e2ed65c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029515,
              "key": "b5c95b8d-5607-4c4c-a8cb-333155a4cb4d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Environment Variables",
              "instructor_notes": ""
            },
            {
              "id": 1029516,
              "key": "3e005bf9-88e3-48ab-8658-37b3ae3210db",
              "title": "ND9991 C03 L02 Solution - Global Variables",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "X6gl0JPFSyQ",
                "china_cdn_id": "X6gl0JPFSyQ.mp4"
              }
            },
            {
              "id": 1029518,
              "key": "055e56fe-cbd9-428e-9ac7-b577baaf9790",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution\n\nYour code should look similar to this:\n\n```\nversion: 2.1\n\nworkflows:\n  test-env-vars:\n    jobs:\n      - build\n\njobs:\n  build:\n    docker:\n      - image: cimg/base:2020.01\n    steps:\n      - checkout\n      - run:\n          name: \"echo an env var that is part of our project\"\n          command: |\n            echo $MY_ENV_VAR\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023052,
          "key": "74f096fe-414c-4911-a85a-19ece3dc35a3",
          "title": "Triggering",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "74f096fe-414c-4911-a85a-19ece3dc35a3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029040,
              "key": "5afbcd60-1344-4e6a-8e09-01bed98976c5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Triggering",
              "instructor_notes": ""
            },
            {
              "id": 1029041,
              "key": "19ef198a-1c12-4e9c-b3de-2e074f17f300",
              "title": "ND9991 C03 L02 Triggering",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "93agEY2lvWY",
                "china_cdn_id": "93agEY2lvWY.mp4"
              }
            },
            {
              "id": 1029090,
              "key": "6543f526-4c7b-4b05-ac8a-28f8622a3569",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Builds in continuous integration can't start on their own. They need something to trigger them to start running pipelines. Here are a few common ways to trigger a CI pipeline:\n\n| **Trigger**                | **Description**                                                                                                          |\n| :--------------------- | :------------------------------------------------------------------------------------------------------------------- |\n| Git Branch Commit      | Commit or merge to a branch-like `master` and push changes to the branch in central repository to start a new build. |\n| New Pull/Merge Request | Make changes in a branch or fork and create a pull/merge request to trigger a build.                                 |\n| API                    | Make a `POST` or `GET` request to an API endpoint to kick off a new build.                                               |\n| Schedule               | Run a pipeline at a certain time each day or week based on a schedule.                                               |\n| Other Pipelines        | Another pipeline might finish a job and then trigger another pipeline.                                               |\n| Chat Message           | Using a chat tool, post a message containing special text in order to trigger a build.                               |\n| Command-Line Tool      | Use a command-line tool to configure and start a new build.                                                          |\n\nOf all the triggers listed, the first two are the most common since the most logical time to run a new build is when new changes have been introduced.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1020586,
          "key": "2ff4f235-7f4c-45fb-89f8-1fb9f8cf277d",
          "title": "Exercise: Trigger Existing Workflow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2ff4f235-7f4c-45fb-89f8-1fb9f8cf277d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020588,
              "key": "42561789-169b-4a83-9994-aac4238a97c8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Trigger an existing workflow\n\nRun a pre-existing workflow.\n\n### Instructions:\n\n1. Fork [this demo repository](https://github.com/CircleCI-Public/circleci-demo-javascript-express) to your Github account. This will make the repository available to you in Circle CI.\n2. Log in to your Circle CI account, make sure you're in the \"Projects\" page, and find the repository you just forked. If you have more than one repository, you can use the search bar.\n3. Click \"Set Up Project\" next to the repository name.\n4. Circle CI will now request an initial setup for the project. Click the \"Start Building\" button and choose \"Add Manually\". Then, click \"Start Building\".\n5. Verify the pipeline is running.\n6. Go to the repository in Github, select the branch Circle CI created, and modify any file (ex: `readme.md`). Commit the change.\n7. Back in Circle CI, verify that the commit triggered another build.\n",
              "instructor_notes": ""
            },
            {
              "id": 1020589,
              "key": "f21091b6-3872-4f23-9a13-5fd6a979abc6",
              "title": "Trigger an Existing Workflow",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f21091b6-3872-4f23-9a13-5fd6a979abc6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Fork the Repository.",
                "Add a Project for the Repository in Circle CI.",
                "Run the Pipeline for the Project.",
                "Modify a File in the Repository.",
                "Verify the Pipeline Ran Again."
              ],
              "positive_feedback": "Great job!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020587,
          "key": "2589c554-0112-4f3c-a73f-a7fff45fd04c",
          "title": "Solution: Trigger Existing Workflow",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2589c554-0112-4f3c-a73f-a7fff45fd04c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020590,
              "key": "a2f1a48f-d17e-401b-803c-95d9397b1d43",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Trigger an Existing Workflow\n\n",
              "instructor_notes": ""
            },
            {
              "id": 1044832,
              "key": "31919f98-793e-49d6-b757-95c75e9bcf60",
              "title": "ND9991 C03 L02 Solution - Triggering",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Ckv0WNKcXMU",
                "china_cdn_id": "Ckv0WNKcXMU.mp4"
              }
            },
            {
              "id": 1020592,
              "key": "d5e2ba37-7ed5-4a1d-b2d2-60193dab60b5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### You Did It!\n\n- You have just taken the first step into CI. Nothing would be possible without that simple git commit.\n- Thanks to that seemingly insignificant act of committing new code, your CI server is NOW aware of new changes.\n- New changes mean new possibilities to break! Now, we are ready to build, test, analyze, and anything else we want to do to the code to see if these changes are friend or foe.\n- By triggering CI so close to the introduction of these changes, we are shortening the feedback loop and reducing the time between introduction and repair, which translates to reduced costs for the business's bottom-line. See what I did there? Git triggers reduce costs!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023056,
          "key": "45f2d81d-5b9f-45f5-9575-267937c630e8",
          "title": "Sharing Information",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "45f2d81d-5b9f-45f5-9575-267937c630e8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029085,
              "key": "3a81d0b3-d324-4183-b242-e3d96511b004",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Sharing Information\n",
              "instructor_notes": ""
            },
            {
              "id": 1044833,
              "key": "0aea3a42-997b-410e-b9eb-4b6311695885",
              "title": "ND9991 C03 L02 Sharing Information",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ziTURxIPvX4",
                "china_cdn_id": "ziTURxIPvX4.mp4"
              }
            },
            {
              "id": 1044834,
              "key": "519bfe87-67e8-46fe-a9b4-13026130cedf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Job Isolation\n\nWhen it's each job's turn to execute, a fresh instance is booted up using the docker image that is defined in the job. This means, by default, that files and memory that are used during the job are gone after the job completes. In this way, each job is isolated from the other jobs and their parent workflows.\n\n### Ways to Share Information\n\n#### Cache\n\nWhen forming the key name, you can use a few template variables such as:\n\n| **Variable**                          | **Description**                                                                                                  |\n| :-------------------------------- | :----------------------------------------------------------------------------------------------------------- |\n| `{{ .Branch }}`                   | The git branch currently being built.                                                                        |\n| `{{ .BuildNum }}`                 | The CircleCI build number for this build.                                                                    |\n| `{{ .Environment.variableName }}` | Adds in the value of an environment variable from any scope.                                                 |\n| `{{ checksum \"filename\" }}`       | Generates a base64 checksum for the file.                                                                    |\n| `{{ epoch }}`                     | The current time in seconds since the unix epoch. Great to make a unique string to avoid re-using key names. |\n\nIn one job:\n\n```\n...\n      - save_cache:\n          key: v1-my-project-{{ checksum \"project.clj\" }}\n          paths:\n            - ~/.m2\n...\n```\n\nIn another job:\n\n```\n...\n      - restore_cache:\n          keys:\n            - v1-my-project-{{ checksum \"project.clj\" }}\n            - v1-my-project-\n...\n```\n\n#### Workspace\n\nLike a cache, but with [some differences](https://circleci.com/docs/2.0/configuration-reference/#persist_to_workspace).\n\nIn one job:\n\n```\n...\n      - persist_to_workspace:\n          root: /tmp/workspace\n          paths:\n            - target/application.jar\n            - build/*\n...\n```\n\nIn another job:\n\n```\n...\n      - attach_workspace:\n          at: /tmp/workspace\n...\n```",
              "instructor_notes": ""
            },
            {
              "id": 1029044,
              "key": "5e512457-2eb3-4c0a-ac07-96b8fb33c82f",
              "title": "ND9991 C03 L02 Sharing Information Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "jNgwZTdG-k4",
                "china_cdn_id": "jNgwZTdG-k4.mp4"
              }
            },
            {
              "id": 1029481,
              "key": "4211e83d-5d34-4ea0-91ce-c528ab913bba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n#### 3rd Party Secret Keepers\n\n| **Option**   | **Description**                                                                                                                                                                                                                                                                                                            | **Website** |\n| :------- | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---- |\n| Vault    | Vault is a tool created by Hashicorp. It is a web service and a command line tool that work together to give you the ability to save bits of information securely and then retrieve it later. Since the service is not dependent on the job or pipeline, your jobs can reliably save and retrieve information at will. | [vaultproject.io](https://www.vaultproject.io/) |\n| MemStash | A simple web service that takes your key-value pairs and stores securely them for a short period of time. It's a great, low-ceremony way to store quick values and get them back out, no matter which job you're running. Just use `curl` to save and retrieve your information. MemStash is free to use.                                      | [memstash.io](https://www.memstash.io/) |",
              "instructor_notes": ""
            },
            {
              "id": 1044835,
              "key": "db61b8f5-6b31-4c15-a39c-688f217211c2",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/July/5f0cd6cc_screen-shot-2020-07-13-at-2.48.35-pm/screen-shot-2020-07-13-at-2.48.35-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/db61b8f5-6b31-4c15-a39c-688f217211c2",
              "caption": "**Caches, Workspaces, and Secret Keepers Can Share Information \nBetween Jobs**",
              "alt": "An image showing caches, workspaces, and secret keepers sharing files and communicating between two different jobs.",
              "width": 1667,
              "height": 639,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 1020622,
          "key": "59bc52b9-ff7c-4545-8f8e-bec2cc185e5d",
          "title": "Exercise: Sharing Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59bc52b9-ff7c-4545-8f8e-bec2cc185e5d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020624,
              "key": "1be11267-4c48-4687-aff3-ea2695cbccd3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Sharing Files\n\nCreate and share files between jobs in a workflow.\n\n### Instructions:\n\n1. Use the repository and Circle CI config file from previous exercises or create a new one.\n2. If you're reusing your repository, you can remove the `hello world` jobs we added from previous exercises.\n3. Add a job named `save_hello_world_output`. It should look very close to the `print_hello` job from the previous exercise with one small exception. We want to output \"hello world\" to a file called `output.txt`. _If you're not sure how to do this, the bash statement would be something like `echo \"text to output here\" > output.txt`._\n4. Add a persist_to_workspace block ([documentation](https://circleci.com/docs/2.0/configuration-reference/#persist_to_workspace)) to that job and reference `output.txt` so that it gets saved to the \"workspace\" (making it available to other jobs).\n5. Add another job named `print_output_file`.\n6. In this job, add a attach_workspace block ([documentation](https://circleci.com/docs/2.0/configuration-reference/#attach_workspace)) (much like attaching a hard drive).\n7. In this job, also run a bash command that prints the contents of `output.txt`. _For example: `cat output.txt`._",
              "instructor_notes": ""
            },
            {
              "id": 1020625,
              "key": "bc16d46f-37cf-4428-a31a-0a114e401291",
              "title": "Sharing Files",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bc16d46f-37cf-4428-a31a-0a114e401291",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a Job that Saves the Output of a Command in a File.",
                "Define a Job that Prints the Contents of a File that has Persisted in the Workspace.",
                "Define a Workflow Ordering the Execution of the Jobs Sequentially."
              ],
              "positive_feedback": "Excellent! Now you can share files between jobs!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020623,
          "key": "9e70a076-a7ed-40dc-a3ac-7463891334f8",
          "title": "Solution: Sharing Files",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9e70a076-a7ed-40dc-a3ac-7463891334f8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1044209,
              "key": "44003049-5484-4cb0-8c76-fbdd183d9b6e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Sharing Files",
              "instructor_notes": ""
            },
            {
              "id": 1020627,
              "key": "5b77e862-8988-4f80-bf66-927d7bff603e",
              "title": "ND9991 C03 L02 Solution - Sharing Files",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Kiv34-jtA4c",
                "china_cdn_id": "Kiv34-jtA4c.mp4"
              }
            },
            {
              "id": 1020626,
              "key": "72559793-3f85-4e5c-8f04-6d97cd2e00dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\nYour config.yml should look something like this:\n\n```\nversion: 2.1\n\njobs:\n  save_hello_world_output:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - run: echo \"hello world\" > ~/output.txt\n      - persist_to_workspace:\n          root: ~/\n          paths:\n            - output.txt\n\n  print_output_file:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - attach_workspace:\n          at: ~/\n      - run: cat ~/output.txt\n\nworkflows:\n  my_workflow:\n    jobs:\n      - save_hello_world_output\n      - print_output_file:\n          requires:\n            - save_hello_world_output\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023057,
          "key": "e6d872a4-e912-4bc4-806f-6d6aeb63890c",
          "title": "Reusable Job Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e6d872a4-e912-4bc4-806f-6d6aeb63890c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029086,
              "key": "6ebb9b57-8ba6-42d6-a097-196af5462940",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Reusable Job Code",
              "instructor_notes": ""
            },
            {
              "id": 1044837,
              "key": "c60c54df-6997-4642-8f31-61fa2ef0e8e5",
              "title": "ND9991 C03 L02 Reusable Job Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "riKwTP3ufag",
                "china_cdn_id": "riKwTP3ufag.mp4"
              }
            },
            {
              "id": 1044839,
              "key": "eaaa2a96-b406-46bd-bc80-8d44d5d2adff",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Common Reuse Scenarios:\n\n- Common Defaults\n- Rollback\n- Compile Code\n- Deploy",
              "instructor_notes": ""
            },
            {
              "id": 1044838,
              "key": "5aed25cf-dd08-41b2-a174-fa59da21558c",
              "title": "ND9991 C03 L02 Reusable Job Code Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "kGpU7iWXwyI",
                "china_cdn_id": "kGpU7iWXwyI.mp4"
              }
            },
            {
              "id": 1029491,
              "key": "bd9253b0-1bfa-44cd-b58f-c446ee7cd41b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n\n### Ways to Reuse Code in Circle CI\n\n- Anchors and Aliases\n- Commands\n\n### Key Terms\n\n| **Key Term**    | **Description**                                                                                                      |\n| :---------- | :--------------------------------------------------------------------------------------------------------------- |\n| **Anchor**  | Defines a section of yaml to be reused. Uses a `&` symbol to signal that an anchor is being defined.             |\n| **Alias**   | Refers to a section of yaml previously defined by an anchor. Uses the `*` to signal that an alias is being used. |\n| **Command** | A predefined parameterized sequence of steps to be executed in a job.                                            |\n| **DRY**     | Stands for \"Don't Repeat Yourself\".                                                                              |\n\n### Further Reading:\n\n- Learn about commands in [CircleCI docs](https://circleci.com/docs/2.0/writing-yaml/#anchors-and-aliases).\n- [Anchors and Aliases by Circle CI](https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1020629,
          "key": "04699c6e-ad03-40ec-964c-f082e6b15ae6",
          "title": "Exercise: Reusable Job Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "04699c6e-ad03-40ec-964c-f082e6b15ae6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020632,
              "key": "d80bdf1f-58d1-4205-acd5-16150d366108",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Reusable Commands\n\nCreate a job that uses a \"command\" that prints the pipelineId to the console.\n\n### Instructions:\n\n1. Use the repository and Circle CI config file from previous exercises or create a new one.\n2. If you'd like, you can remove the jobs we added from previous exercises.\n3. Add a [command](https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21) section below the version number.\n4. Create a command named `print_pipeline_id` with a step that prints the Circle CI Workflow ID from its environment variable named `$CIRCLE_WORKFLOW_ID` to the console.\n5. Use the command in a job.\n6. Add the job to a workflow.\n7. Run the pipeline and verify the workflow ID is being printed to the console.",
              "instructor_notes": ""
            },
            {
              "id": 1020633,
              "key": "68177c13-5475-42f7-bd54-5a5209d639ec",
              "title": "Create a Reusable Command",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "68177c13-5475-42f7-bd54-5a5209d639ec",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create a Command.",
                "Call the Command From a Job.",
                "Define a Workflow.",
                "Verify It Works!"
              ],
              "positive_feedback": "Wow, now you can keep your pipeline configuration DRY and maintainable!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020630,
          "key": "cb8b5f60-8838-46d8-ba6d-3788cbf45b28",
          "title": "Solution: Reusable Job Code",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cb8b5f60-8838-46d8-ba6d-3788cbf45b28",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1044210,
              "key": "96b4d818-4ae8-4ff8-a38b-a74254dc17fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Re-usable Job Code",
              "instructor_notes": ""
            },
            {
              "id": 1020634,
              "key": "1c15d15b-ec35-49ab-bfbc-d197eb1afbe8",
              "title": "ND9991 C03 L02 Solution - Reusable Job Code",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EgPdTwbZ7AU",
                "china_cdn_id": "EgPdTwbZ7AU.mp4"
              }
            },
            {
              "id": 1020635,
              "key": "46066446-ed17-45c5-bfdb-cf5a6c21dedc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution: Reusable Commands\n\nYour `config.yml` should look something like this:\n\n```\nversion: 2.1\n\ncommands:\n  print_pipeline_id:\n    steps:\n      - run: echo ${CIRCLE_WORKFLOW_ID}\n\njobs:\n  my_job:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - print_pipeline_id\n\nworkflows:\n  my_workflow:\n    jobs:\n      - my_job\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023058,
          "key": "c7c327cd-b8b6-4663-86b9-466e2f4d6941",
          "title": "Job Failures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c7c327cd-b8b6-4663-86b9-466e2f4d6941",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029087,
              "key": "9995221d-e244-4245-9853-7c0357283646",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Job Failures",
              "instructor_notes": ""
            },
            {
              "id": 1029046,
              "key": "ac1e722f-c462-4ca1-9640-e3cf0309429f",
              "title": "ND9991 C03 L02 Job Failures Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "mObmotTpEC8",
                "china_cdn_id": "mObmotTpEC8.mp4"
              }
            },
            {
              "id": 1044840,
              "key": "b7979371-2a89-4a0a-b98c-319b2ddb2a75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Non-Zero Exit Codes\n\nIf anything in your job throws a non-zero exit code, it will cause the job to fail and stop. But, if you want to respond with more than just a big red \"X\" on your build, you can use Circle CI's `when: on_fail` directive! Some things you could do in response might include:\n\n* Run a cleanup command/job\n* Send a special message\n* Alert another service\n* Make a red fire engine light go off in your office _(not even kidding... seen it happen)_",
              "instructor_notes": ""
            },
            {
              "id": 1044841,
              "key": "cfa403d4-81f2-4ec3-aea3-6f31b295e63e",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/July/5f0cdeee_screen-shot-2020-07-13-at-3.22.19-pm/screen-shot-2020-07-13-at-3.22.19-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/cfa403d4-81f2-4ec3-aea3-6f31b295e63e",
              "caption": "**A Failure Might Trigger a Rollback or An Alert!**",
              "alt": "An image showing a failure leading to either a rollback or an alert.",
              "width": 736,
              "height": 334,
              "instructor_notes": null
            },
            {
              "id": 1029493,
              "key": "c9f1fdfa-07b1-4afd-a7c6-d25fb41c2fa9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Example from [Circle CI docs](https://circleci.com/docs/2.0/configuration-reference/#example):\n\n```\nsteps:\n  - run:\n      name: Testing application\n      command: make test\n      shell: /bin/bash\n      working_directory: ~/my-app\n      no_output_timeout: 30m\n      environment:\n        FOO: bar\n\n  - run: echo 127.0.0.1 devhost | sudo tee -a /etc/hosts\n\n  - run: |\n      sudo -u root createuser -h localhost --superuser ubuntu &&\n      sudo createdb -h localhost test_db\n\n  - run:\n      name: Upload Failed Tests\n      command: curl --data fail_tests.log http://example.com/error_logs\n      when: on_fail\n```\n\n### Further reading:\n\n- Read more about `when: on_fail` in the [Circle CI docs](https://circleci.com/docs/2.0/configuration-reference/#example).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1020636,
          "key": "ddf6790c-371d-42e1-8654-82e74b6c5d3c",
          "title": "Exercise: Job Failures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ddf6790c-371d-42e1-8654-82e74b6c5d3c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020638,
              "key": "7e500868-7a08-4666-b6f4-360dd24ee474",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Job Failures\n\nCreate a job that has an intentional failure in it with a step that runs on fail that prints \"Hello Error!\" to the console.\n\n### Instructions:\n\n1. Use the repository and Circle CI config file from previous exercises or create a new one.\n2. If you'd like, you can remove the jobs we added from previous exercises.\n3. Add a job using our favorite lightweight image, `circleci/node:13.8.0`.\n4. Add a step that fails (on purpose). To do this, all you need is to exit with a non-zero code. That's easy with bash: `return 1`.\n5. Define a second step that should only run if a previous step has failed. To do this, use the filter `when: on_fail`.\n6. Define a workflow that uses the job.\n7. Watch as your job fails, but runs your error handling step.",
              "instructor_notes": ""
            },
            {
              "id": 1020639,
              "key": "41801f9d-ffd6-4313-9ce8-6e2f569eaefd",
              "title": "Handle a Job Failure",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "41801f9d-ffd6-4313-9ce8-6e2f569eaefd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a Job that Intentionally has an Error.",
                "Define a Step that Runs When the Previous Step Fails.",
                "Define a Workflow that Uses the Job.",
                "Verify the Error Handler Runs."
              ],
              "positive_feedback": "Great! Now you can handle job failures with style and grace!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020637,
          "key": "576baa28-3100-4b24-8ef3-a79095862667",
          "title": "Solution: Job Failures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "576baa28-3100-4b24-8ef3-a79095862667",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1044211,
              "key": "91752f80-1aaf-4ddf-83a6-f1952448c430",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Job Failures",
              "instructor_notes": ""
            },
            {
              "id": 1020640,
              "key": "b11cdf4c-5ecc-41fb-9976-f3cd9a56a064",
              "title": "ND9991 C03 L02 Solution - Job Failures",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "UYSrrf-jwhg",
                "china_cdn_id": "UYSrrf-jwhg.mp4"
              }
            },
            {
              "id": 1020641,
              "key": "4c6a181e-2495-4cde-ab9b-76c5f2d9222e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution: Job Failures\n\nYour config.yml should look something like this:\n\n```\nversion: 2.1\n\njobs:\n  my_job:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - run: return 1\n      - run:\n          name: on error\n          command: echo \"Hello Error!\"\n          when: on_fail\n\nworkflows:\n  my_workflow:\n    jobs:\n      - my_job\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023059,
          "key": "477be06c-6cd9-4db7-a246-15ea40b3d7e6",
          "title": "Create a CI Pipeline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "477be06c-6cd9-4db7-a246-15ea40b3d7e6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029088,
              "key": "f6aed4e6-c9c1-4b4a-beeb-01a039ec9a6a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Create a CI Pipeline",
              "instructor_notes": ""
            },
            {
              "id": 1029047,
              "key": "c23ccd0a-5d23-4f8b-a442-3593567b071f",
              "title": "ND9991 C03 L02 Create A CI Pipeline Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "un1Vxxiw8b4",
                "china_cdn_id": "un1Vxxiw8b4.mp4"
              }
            },
            {
              "id": 1029495,
              "key": "fcae0516-6332-4b10-8bee-cc785a7b301d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "CI stands for Continuous Integration. We use the word \"integration\" because we are merging code from multiple developers and sources and verifying that it all integrates correctly. We can verify this using various tests and checks. \n\nLet's create a CI pipeline with three of the most common CI stages: \n\n| **Stage** | **Description** | \n| :-- | :-- |\n| Compile | Convert programmer code from text format to zero's and one's, or whatever is needed by the final runtime.  |\n| Test | Run unit or integration tests against the code to make sure it is up to specifications. |\n| Analyze | Perform some deeper tests on the code such as static analysis or a package security audit. |",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1020667,
          "key": "7aa1a0e9-f912-4541-a60d-580c15dab438",
          "title": "Exercise: Create a CI Pipeline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7aa1a0e9-f912-4541-a60d-580c15dab438",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1020669,
              "key": "7a4fd5d5-53d2-4f29-833f-40c23758fa96",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Create a CI Pipeline\n\nCombine knowledge from previous exercises to build a simple Continuous Integration pipeline. We have a project that needs to be compiled, tested, and audited for security vulnerabilities. Let's get started!\n\n### Instructions:\n\n1. We will use an existing application for convenience. If you'd like to use your own application, that's fine, but be aware there may be some differences. To use the suggested application, please fork and clone [this repository](https://github.com/coryhouse/react-slingshot).\n1. Create the Circle CI config file.\n1. Create three jobs with the following names: `build`, `test`, and `analyze`. Each job should have some common elements. For example, before doing anything that works with code, you will need to `checkout`. You may also have to install any dependencies needed to run the code or complete some task. Here are the commands we suggest running:\n\n- For the build job, `npm run lint`\n- For the test job, `npm run test`\n- For the analyze job, `npm audit`\n\n4. Define a workflow that invokes each job in sequential order, where `test` depends on `build` and `analyze` depends on `test`.\n5. Commit your new changes and watch the pipeline run.\n6. You should see that the `analyze` job fails since some packages have security vulnerabilities.",
              "instructor_notes": ""
            },
            {
              "id": 1020670,
              "key": "33a6cf99-2d70-4b55-8ff7-fee8220fde56",
              "title": "Create a CI Pipeline",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "33a6cf99-2d70-4b55-8ff7-fee8220fde56",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Fork and clone the Repository.",
                "Define a `build` Job.",
                "Define a `test` Job.",
                "Define an `analyze` Job.",
                "Define a Workflow Ordering the Execution of the Jobs Sequentially.",
                "Your `analyze` Job Should Fail!"
              ],
              "positive_feedback": "Amazing! You've got it!",
              "video_feedback": null,
              "description": ""
            }
          ]
        },
        {
          "id": 1020668,
          "key": "7f309700-7b56-4550-b10a-e4f6f8b74c72",
          "title": "Solution: Create a CI Pipeline",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7f309700-7b56-4550-b10a-e4f6f8b74c72",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1044212,
              "key": "ada87828-b6d4-467a-b894-6c06c06048ae",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Create a CI Pipeline",
              "instructor_notes": ""
            },
            {
              "id": 1020673,
              "key": "bb43aee3-78b3-4f9c-af2d-81c20d09a771",
              "title": "ND9991 C03 L02 Solution - Create A CI Pipeline",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "xb9onoIUQkQ",
                "china_cdn_id": "xb9onoIUQkQ.mp4"
              }
            },
            {
              "id": 1020672,
              "key": "f15c97a1-a3ae-4074-987a-49003a3347d2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Solution: Create a CI Pipeline\n\nYour config.yml should look something like this:\n\n```\nversion: 2.1\n\njobs:\n  build:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - checkout\n      - run: npm i\n      - run: npm run lint\n  test:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - checkout\n      - run: npm i\n      - run: npm run test\n  analyze:\n    docker:\n      - image: circleci/node:13.8.0\n    steps:\n      - checkout\n      - run: npm audit\n\nworkflows:\n  my_workflow:\n    jobs:\n      - build\n      - test:\n          requires:\n            - build\n      - analyze:\n          requires:\n            - test\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 1023060,
          "key": "fbdc87b7-4599-4d2f-be36-511f14140126",
          "title": "Lesson Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fbdc87b7-4599-4d2f-be36-511f14140126",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1029089,
              "key": "f73308c5-42e0-4405-9044-aaf0b8976344",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lesson Conclusion",
              "instructor_notes": ""
            },
            {
              "id": 1029048,
              "key": "e8d5b058-f90d-443d-8f03-985a4f01ecc4",
              "title": "ND9991 C03 L02 Lesson Conclusion",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "POTlE_ZbFII",
                "china_cdn_id": "POTlE_ZbFII.mp4"
              }
            },
            {
              "id": 1029496,
              "key": "ddaa63d5-3989-47ca-81c6-19672501af0d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### In This Lesson, We...\n- Learned about CI and How It Fits in the Bigger Picture\n- Discussed Some Behaviors of CI Veterans\n- Went Over Some of the Common Building Blocks of Most CI Tools, Like:\n  - Environment Variables\n  - Triggers\n  - Pipelines\n  - Jobs\n  - File Sharing Between Jobs\n  - Re-Usable Job Code\n  - Job Failures\n- Designed a Complete CI Pipeline\n\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}