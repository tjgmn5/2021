WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.750
All right. Let's think about auto-scaling with CPU or memory.

00:00:03.750 --> 00:00:07.950
So one of the really powerful things about the container system is that,

00:00:07.950 --> 00:00:12.750
you have the ability to particularly cluster

00:00:12.750 --> 00:00:20.199
a pod or particularly allocate CPU or memory to a specific portion of your application.

00:00:20.199 --> 00:00:23.669
The horizontal pod autoscaler automatically

00:00:23.670 --> 00:00:27.030
scales the number of pods in a replication controller.

00:00:27.030 --> 00:00:29.159
So you can see in this scenario,

00:00:29.158 --> 00:00:32.789
there's a several pods that have deployment and there's

00:00:32.789 --> 00:00:35.640
this horizontal pod autoscaler that automatically

00:00:35.640 --> 00:00:39.000
decides how many containers should launch back and forth.

00:00:39.000 --> 00:00:42.075
If you look at the horizontal pod auto scaling,

00:00:42.075 --> 00:00:46.160
it doesn't necessarily have to apply to objects that can't be scaled.

00:00:46.159 --> 00:00:49.534
It can scale many different aspects of your application.

00:00:49.534 --> 00:00:54.364
So the horizontal pod autoscaler is implemented as a Kubernetes API.

00:00:54.365 --> 00:00:55.745
What this means is that,

00:00:55.744 --> 00:00:59.809
it can tie into other commercial resources or it can tie into

00:00:59.810 --> 00:01:04.820
some other home-grown monitoring and scaling system that you've generated yourself.

00:01:04.819 --> 00:01:06.109
The main takeaway though,

00:01:06.109 --> 00:01:08.780
is that you do have the ability to customize

00:01:08.780 --> 00:01:13.230
auto scales and whether scales In CPU or memory or both.

