WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.930
Already folks, welcome back to Lesson 4, Ansible.

00:00:03.930 --> 00:00:08.115
Ansible is a configuration management language

00:00:08.115 --> 00:00:13.425
which falls under the category of DSL, Domain Specific Language.

00:00:13.425 --> 00:00:19.755
This bears some resemblance to Jenkins, but not entirely.

00:00:19.754 --> 00:00:27.329
Ansible is more fully formed in the DSL nomenclature because with Jenkins,

00:00:27.329 --> 00:00:30.689
you're more adding code elements two blocks.

00:00:30.690 --> 00:00:33.210
But we're not going go too far down that rabbit hole.

00:00:33.210 --> 00:00:37.965
So let's look at what we have planned for today.

00:00:37.965 --> 00:00:43.865
First of, we need to discuss what does it mean to do Configuration Management?

00:00:43.865 --> 00:00:46.789
We're talking about philosophy level here.

00:00:46.789 --> 00:00:49.640
Next, we got to install an update,

00:00:49.640 --> 00:00:52.730
a software package program with Ansible,

00:00:52.729 --> 00:00:56.899
determine how to configure that program and then start

00:00:56.899 --> 00:01:01.759
and/or stop that program with system d and control when or

00:01:01.759 --> 00:01:06.378
if that action is going to happen based on our variables

00:01:06.379 --> 00:01:11.814
which we set in control or the framework of the system itself.

00:01:11.814 --> 00:01:19.920
So let's go ahead and look at philosophy of Ansible.

00:01:19.920 --> 00:01:27.680
Ansible is primarily written with YAML for configuration files,

00:01:27.680 --> 00:01:33.890
but we also see JSON as well which is rendered on the nodes,

00:01:33.890 --> 00:01:38.540
and it's an agentless technology as opposed

00:01:38.540 --> 00:01:45.665
to CFEngine and a number of other ones that use agents.

00:01:45.665 --> 00:01:50.870
What an agent is, it's a lightweight software program that lives on a server or

00:01:50.870 --> 00:01:53.060
a container whatnot and it's

00:01:53.060 --> 00:01:56.795
constantly reporting back to your configuration management server.

00:01:56.795 --> 00:02:03.049
With Ansible, we're doing things in a different way because we're primarily using SSH and

00:02:03.049 --> 00:02:09.514
we're connecting to those servers and opening a session and then closing a session.

00:02:09.514 --> 00:02:13.984
So you never have to have an agent on that server,

00:02:13.985 --> 00:02:16.235
and it's just a different approach.

00:02:16.235 --> 00:02:19.610
The con of that is it's heavier weight for

00:02:19.610 --> 00:02:24.525
the duration of the activity that you're performing,

00:02:24.525 --> 00:02:26.210
but yet it doesn't require an agent,

00:02:26.210 --> 00:02:30.400
and so you don't have to setup the agent on that host.

00:02:30.400 --> 00:02:35.960
We also should take in mind that Ansible is primarily written in Python,

00:02:35.960 --> 00:02:41.840
but it also has some Ruby and PowerShell depending on what environment you're using,

00:02:41.840 --> 00:02:44.810
this in a Linux environment or Windows environment.

00:02:44.810 --> 00:02:49.090
So moving onto the philosophy,

00:02:49.090 --> 00:02:51.950
configuration management desired state.

00:02:51.949 --> 00:03:01.954
This is a very important concept for approaching how you write your item potency.

00:03:01.955 --> 00:03:04.550
You're looking for when you run this,

00:03:04.550 --> 00:03:08.030
it's going to bring your systems into a desired state,

00:03:08.030 --> 00:03:10.340
and there won't be the capability of when you rerun,

00:03:10.340 --> 00:03:11.960
it would break things.

00:03:11.960 --> 00:03:15.129
That's basically what item potency means.

00:03:15.129 --> 00:03:18.844
Ansible history, the bad old days.

00:03:18.844 --> 00:03:27.655
So we come from a world where configurations were set on servers by hand.

00:03:27.655 --> 00:03:32.479
When you're talking about a dozen servers, this is doable.

00:03:32.479 --> 00:03:38.014
But when you're talking about 100 servers, 1,000 servers,

00:03:38.014 --> 00:03:41.834
you start to run into economies of scale issues,

00:03:41.835 --> 00:03:47.700
and that's really the source for why we have configuration management languages at all.
最新课程跟课件还有一对一辅导请加wx：udacity6
