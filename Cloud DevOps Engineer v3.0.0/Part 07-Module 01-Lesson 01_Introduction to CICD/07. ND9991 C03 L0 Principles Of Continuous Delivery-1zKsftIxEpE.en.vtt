WEBVTT
Kind: captions
Language: en

00:00:01.170 --> 00:00:04.120
I love principles because they hold

00:00:04.120 --> 00:00:08.140
my true north up higher and tell me how I'm going to get there.

00:00:08.140 --> 00:00:10.240
Let's take a look at eight principles from

00:00:10.240 --> 00:00:14.015
the book Continuous Delivery by Jess Humble and David Farley.

00:00:14.015 --> 00:00:16.575
Repeatable reliable process.

00:00:16.575 --> 00:00:20.860
Here we're talking about the process of releasing or deploying our software.

00:00:20.860 --> 00:00:24.800
That process should be reliable or worthy of our trust.

00:00:24.800 --> 00:00:26.560
It should also be repeatable,

00:00:26.560 --> 00:00:28.990
meaning we should be able to release, release,

00:00:28.990 --> 00:00:33.425
release and we should be able to get the same results every single time.

00:00:33.425 --> 00:00:35.610
Automate everything.

00:00:35.610 --> 00:00:38.870
This principle definitely supports the first principle.

00:00:38.870 --> 00:00:40.255
I don't know about you,

00:00:40.255 --> 00:00:44.320
but I can't do anything two times manually and get the same result.

00:00:44.320 --> 00:00:46.295
But if I automate those things,

00:00:46.295 --> 00:00:49.600
I can do it thousands of times with exactly the same result.

00:00:49.600 --> 00:00:53.525
Therefore, if I want to have repeatable, reliable processes,

00:00:53.525 --> 00:00:55.495
I need to automate them.

00:00:55.495 --> 00:00:58.470
Version control everything.

00:00:58.470 --> 00:01:01.100
Everything to do with your software project,

00:01:01.100 --> 00:01:04.610
not just the code should be in version control.

00:01:04.610 --> 00:01:08.570
Infrastructure configuration, CICD config,

00:01:08.570 --> 00:01:10.445
those are the easy ones.

00:01:10.445 --> 00:01:12.229
How about test cases,

00:01:12.229 --> 00:01:14.765
acceptance tests, and automated end-to-end tests?

00:01:14.765 --> 00:01:16.975
Yes, even those.

00:01:16.975 --> 00:01:19.635
Bring the pain forward.

00:01:19.635 --> 00:01:22.010
If something is painful or difficult,

00:01:22.010 --> 00:01:26.600
do that thing more often so that we force ourselves to improve it?

00:01:26.600 --> 00:01:28.990
Build in quality.

00:01:28.990 --> 00:01:32.620
Our processes need to be designed to expect quality,

00:01:32.620 --> 00:01:36.610
verify the expectation is met through various checks and keep

00:01:36.610 --> 00:01:41.485
metrics to alert the team when that expectation starts to drop.

00:01:41.485 --> 00:01:44.380
We should be watching metrics that tell the story of

00:01:44.380 --> 00:01:47.020
code health, like coverage, complexity,

00:01:47.020 --> 00:01:49.165
code smells, code style,

00:01:49.165 --> 00:01:53.945
the process should nudge the team to improve those metrics over time.

00:01:53.945 --> 00:01:57.015
"Done" means released.

00:01:57.015 --> 00:02:00.490
One of the first things I do when I get a new developer is

00:02:00.490 --> 00:02:03.655
I train them to stop saying done, so hastily.

00:02:03.655 --> 00:02:07.060
In my world and in the world of continuous delivery,

00:02:07.060 --> 00:02:12.005
done means released, nothing more to do to get it into production.

00:02:12.005 --> 00:02:17.195
This principle drives development teams to share the responsibility to complete features

00:02:17.195 --> 00:02:19.790
all the way to production instead of

00:02:19.790 --> 00:02:23.500
washing their hands of a feature when it passes their stage.

00:02:23.500 --> 00:02:25.985
Everyone is responsible.

00:02:25.985 --> 00:02:30.170
Everyone shares the responsibility to keep the product moving to release.

00:02:30.170 --> 00:02:33.410
No silos or one man deployment shows,

00:02:33.410 --> 00:02:36.650
no more tossing a feature over the wall to QA when

00:02:36.650 --> 00:02:40.310
we know full well it's not good enough for real users.

00:02:40.310 --> 00:02:43.550
Certainly no more staying silent during

00:02:43.550 --> 00:02:45.890
backlog refinement meetings when we know

00:02:45.890 --> 00:02:48.845
we haven't fully comprehended what the client wants.

00:02:48.845 --> 00:02:51.920
Everything we do needs to contribute to the goal

00:02:51.920 --> 00:02:55.135
of releasing and everyone is responsible.

00:02:55.135 --> 00:02:57.615
Continuous improvement.

00:02:57.615 --> 00:03:00.050
Consider everything in an experiment with

00:03:00.050 --> 00:03:03.170
the potential to make the team or process better.

00:03:03.170 --> 00:03:07.220
Focus the team's efforts on a true north or common goal.

00:03:07.220 --> 00:03:10.565
That way, you can call every step a positive improvement,

00:03:10.565 --> 00:03:14.015
just a tiny step in the direction of perfection.

00:03:14.015 --> 00:03:17.750
Don't sit around and wait for an improvement to happen by accident,

00:03:17.750 --> 00:03:22.170
be intentional with small daily improvements.

