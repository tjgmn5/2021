WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.550
Let's also talk about continuous integration and continuous delivery pipeline.

00:00:05.550 --> 00:00:09.510
So there's a new term called GitOps

00:00:09.510 --> 00:00:13.660
and containers actually fit really well with this term GitOps.

00:00:13.660 --> 00:00:16.050
A lot of people have heard about DevOps.

00:00:16.050 --> 00:00:17.190
This course is about DevOps,

00:00:17.190 --> 00:00:20.850
but GitOps is interesting because it is Git

00:00:20.850 --> 00:00:24.885
as a single source of truth in a systems desired state.

00:00:24.885 --> 00:00:30.560
Also you can have a GitOps diff that compares the desired state with the observed state.

00:00:30.560 --> 00:00:32.915
So a really good example of that would be

00:00:32.915 --> 00:00:36.680
a terraform based configuration management system,

00:00:36.680 --> 00:00:39.120
where you're able to look at what's happening in production

00:00:39.120 --> 00:00:41.589
and you're able to look at what's happening to development,

00:00:41.589 --> 00:00:43.745
and you're able to see if there is a delta there

00:00:43.745 --> 00:00:46.850
where some changes actually been mutated.

00:00:46.850 --> 00:00:48.530
Another thing is that,

00:00:48.530 --> 00:00:51.185
when you're thinking about GitOps is that

00:00:51.185 --> 00:00:55.505
all the intended operations are committed inside of a pool request.

00:00:55.505 --> 00:00:58.040
So you can see every single thing that's supposed to

00:00:58.040 --> 00:01:00.710
happen all within this one piece of source code where

00:01:00.710 --> 00:01:03.580
previously you didn't 100 percent

00:01:03.580 --> 00:01:06.670
know what was happening when you deployed software somewhere.

00:01:06.670 --> 00:01:08.400
It probably would work,

00:01:08.400 --> 00:01:11.870
but what if someone underneath the hood actually changed

00:01:11.870 --> 00:01:15.820
the way the operating system works or installing another package or something like that.

00:01:15.820 --> 00:01:20.540
So GitOps really handle this idea of every single bit of

00:01:20.540 --> 00:01:22.490
the state of your application and

00:01:22.490 --> 00:01:26.515
your operating system are all packaged all within this pool request.

00:01:26.515 --> 00:01:29.895
Another thing is that, all changes are observable,

00:01:29.895 --> 00:01:32.255
they are verifiable, and they're

00:01:32.255 --> 00:01:35.700
audited because you have the ability to look at them in source control.

00:01:35.700 --> 00:01:40.310
So really it's a powerful new pattern that's a cloud native pattern that did not

00:01:40.310 --> 00:01:45.815
exist before containers were able to be mixed together with your source code.

00:01:45.815 --> 00:01:49.580
So a few takeaways from GitOps are that,

00:01:49.580 --> 00:01:52.460
you have this concept of separation of concerns.

00:01:52.460 --> 00:01:54.575
So you don't have to really worry that

00:01:54.575 --> 00:01:58.520
one pipeline is going to be for your infrastructure and other ones for source code.

00:01:58.520 --> 00:02:00.185
They're all embedded together.

00:02:00.185 --> 00:02:05.655
Another one is that, you can use any continuous integration or Git server with GitOps.

00:02:05.655 --> 00:02:08.900
So you don't have to have some specialized Microsoft server

00:02:08.900 --> 00:02:11.390
or specialized third party server.

00:02:11.390 --> 00:02:13.060
It actually works with anything.

00:02:13.060 --> 00:02:19.530
Finally, you can think of a GitOps takeaway as events or really an integration step.

00:02:19.530 --> 00:02:22.640
So as soon as you check in code to master,

00:02:22.640 --> 00:02:26.000
or you check in code emerged master to production,

00:02:26.000 --> 00:02:30.020
an event occurs and then that event triggers a bunch of operations.

00:02:30.020 --> 00:02:31.880
So if we look at this slide here,

00:02:31.880 --> 00:02:35.585
you can see a developer could do a commit to a project repo,

00:02:35.585 --> 00:02:38.180
automatically this event triggers and then

00:02:38.180 --> 00:02:41.120
the Jenkins build server or whatever build server,

00:02:41.120 --> 00:02:43.025
it will push an image to Docker,

00:02:43.025 --> 00:02:48.200
but it also push updates to a server-less architecture like let's say AWS Lambda.

00:02:48.200 --> 00:02:51.380
Then it goes through and there's Docker registry will then go

00:02:51.380 --> 00:02:54.580
and update a cluster with a new image.

00:02:54.580 --> 00:02:56.210
Then at the same time,

00:02:56.210 --> 00:03:00.060
both the image itself is updated and also the software that runs on the image.

00:03:00.060 --> 00:03:04.025
So it's basically completely deployed at the same time.

00:03:04.025 --> 00:03:05.960
You don't have to separately do

00:03:05.960 --> 00:03:09.380
an infrastructure build and separately do a software development build.

00:03:09.380 --> 00:03:12.620
So it's an incredibly powerful workflow that is

00:03:12.620 --> 00:03:17.220
really only available by using containers and using things like Kubernetes

