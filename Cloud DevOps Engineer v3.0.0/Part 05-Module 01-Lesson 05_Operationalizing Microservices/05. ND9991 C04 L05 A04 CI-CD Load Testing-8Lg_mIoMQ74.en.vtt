WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
Finally, one other step that's really

00:00:02.850 --> 00:00:05.939
important is to think about load testing when you're doing containers.

00:00:05.940 --> 00:00:09.269
So if you think about load testing, what it does is,

00:00:09.269 --> 00:00:13.814
it allows you to simulate what's going to happen in a production environment.

00:00:13.814 --> 00:00:18.494
One load test tool that's a really powerful load test tool is locust.

00:00:18.495 --> 00:00:21.539
What locust does, it allows you to write tests in

00:00:21.539 --> 00:00:26.248
Python and also inherently it's distributed and it's scalable,

00:00:26.248 --> 00:00:27.750
and it can test any system.

00:00:27.750 --> 00:00:30.870
So that's another powerful feature about containers,

00:00:30.870 --> 00:00:34.560
is because it's really easy to replicate the production environment.

00:00:34.560 --> 00:00:39.650
You can do load testing very easily with an exact same scenario that you'll be using in

00:00:39.649 --> 00:00:42.019
production and you can verify that

00:00:42.020 --> 00:00:46.355
your application's performance will be at the performance level that you expect.

00:00:46.354 --> 00:00:48.709
There's many situations where,

00:00:48.710 --> 00:00:51.710
let's say games in particular have launched and they

00:00:51.710 --> 00:00:54.939
weren't able to fully test it before containers were available,

00:00:54.939 --> 00:00:56.839
and then there was too much of a spike and

00:00:56.840 --> 00:00:58.790
then the game was unavailable for several days.

00:00:58.789 --> 00:01:02.299
So those kind of scenarios don't have to happen with containers,

00:01:02.299 --> 00:01:05.859
as long as the best practices that we've discussed are followed,

00:01:05.859 --> 00:01:11.000
you use getopts, you have actually completely validated your application

00:01:11.000 --> 00:01:13.730
by doing architectural best practices and then you go

00:01:13.730 --> 00:01:17.490
through and you do a final load test with something like locust.

