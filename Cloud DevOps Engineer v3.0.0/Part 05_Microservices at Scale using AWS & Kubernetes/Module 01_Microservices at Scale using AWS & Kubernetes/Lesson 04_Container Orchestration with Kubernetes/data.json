{
  "data": {
    "lesson": {
      "id": 848084,
      "key": "967843df-8f9a-48ca-b5d8-31daeee3e7e8",
      "title": "Container Orchestration with Kubernetes",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Deploy an application on a Kubernetes cluster. Learn how the components of a cluster can be used to automatically scale resources. ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/967843df-8f9a-48ca-b5d8-31daeee3e7e8/848084/1582840039670/Container+Orchestration+with+Kubernetes+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/967843df-8f9a-48ca-b5d8-31daeee3e7e8/848084/1582840036182/Container+Orchestration+with+Kubernetes+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 859154,
          "key": "51fd98d2-b43e-4eea-8adf-ce958b87a18f",
          "title": "Install Kubernetes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51fd98d2-b43e-4eea-8adf-ce958b87a18f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900421,
              "key": "f6592b27-0711-4d91-b611-e469c47c95ce",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Install Kubernetes\n\nThe simplest way to install Kubernetes is to use [Docker Desktop for Windows](https://docs.docker.com/docker-for-windows/#kubernetes) or [Docker Desktop for Mac](https://docs.docker.com/docker-for-mac/kubernetes/). This comes with the `kubectl` kubernetes command line tool.\n\nThe next recommended way is to use a cloud shell environment like [AWS Cloud9](https://aws.amazon.com/cloud9/) or [Google Cloud Shell](https://cloud.google.com/shell/).  These cloud environments dramatically simplify issues that crop up on a laptop or workstation.  You can follow the [native packagement guide from the official documentation here](https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux).\n\nA more advanced method for experts could be to directly download the latest binary. *HINT:  You probably don't want to use this method shown in the video unless you are an expert and should use an easier method above.  The expert commands are shown below.*  \n\nOS X install latest `kubectl` release:\n\n```bash\ncurl -LO \"https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl\"\n```\n\nLinux install latest `kubectl` release:\n\n```bash\ncurl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl\n```\n",
              "instructor_notes": ""
            },
            {
              "id": 980790,
              "key": "87bed8aa-b14e-4d35-ab6c-6225267438df",
              "title": "Install Kubernetes Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Installing Kubernetes Demo",
              "instructor_notes": ""
            },
            {
              "id": 859581,
              "key": "f2c9c582-8fc9-419c-93b2-02088f09bdbe",
              "title": "ND#9991 C04 L04 A01 Install Kubernetes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "51TqKXsqM7Q",
                "china_cdn_id": "51TqKXsqM7Q.mp4"
              }
            },
            {
              "id": 859609,
              "key": "3b66af5f-d878-4dbf-b773-d4a7de9fa44a",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Curl command\nThe `curl` command Noah uses in the video for Mac is as follows:\n\n`curl -LO https://storage.googleapis.com/kubernetes-release/release/$\\(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt\\)/bin/darwin/amd64/kubectl`\n\nNote that the escape characters (`\\`) in the above may need to be removed for the command to work on your system depending on your settings.\n\nIf the above command doesn't work on your machine, look at the links above for the most up-to-date documentation.\n\n#### Checking for virtualization\nThe other command used is:\n\n`sysctl -a | grep machdep.cpu.features`",
              "instructor_notes": ""
            },
            {
              "id": 900422,
              "key": "ef8065fa-8897-486c-872e-ec86c8c5168e",
              "title": "Install Kubernetes",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ef8065fa-8897-486c-872e-ec86c8c5168e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is an easy method of installing Kubernetes?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Using `pip install`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Compiling from source code",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "It is part of the Linux kernel",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "It is part of Windows",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "Using the Docker application",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 900785,
              "key": "619ad5fa-1065-45e5-a038-cddff65c0135",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### References\n- [Kubernetes Homepage](https://kubernetes.io/)\n- [Install Kubernetes with Docker](https://docs.docker.com/ee/ucp/user-access/kubectl/)\n- [Minikube](https://kubernetes.io/docs/tutorials/hello-minikube/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859582,
          "key": "f2c718dc-7fe5-455d-9dd2-30f5dc1403be",
          "title": "Overview of Kubernetes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f2c718dc-7fe5-455d-9dd2-30f5dc1403be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900420,
              "key": "ca713cec-14bf-43f2-905a-3ab567989725",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Overview of Kubernetes\n\nWhat is [Kubernetes](https://github.com/kubernetes/kubernetes)?  It is an open source orchestration system for containers developed by Google and open sourced in 2014.  Kubernetes is a useful tool for working with containerized applications. Given our previous work with Docker containers and containerizing an app, working with Kubernetes is the next logical step. Kubernetes was born out of the lessons learned in [scaling containerized apps at Google](https://queue.acm.org/detail.cfm?id=2898444), and is used for automating deployment, scaling and managing such containerized applications.\n\n### What are the Benefits of using Kubernetes?\n\nKubernetes is the standard for container orchestration.  All major cloud providers support Kubernetes. Amazon through [Amazon EKS](https://aws.amazon.com/eks/), Google through [Google Kubernetes Engine GKE](https://cloud.google.com/kubernetes-engine) and Microsoft through [Azure Kubernetes Service (AKS)](https://azure.microsoft.com/en-us/services/kubernetes-service/).\n\nKubernetes is also a framework for running distributed systems at [\"planet scale\"](https://kubernetes.io/).  Google uses it to run billions of containers a week. \n\nA few of the Capabilities of Kubernetes include: \n- High availability architecture\n- Auto-scaling\n- Rich Ecosystem\n- Service discovery\n- Container health management\n- Secrets and configuration management\n\nThe downside of these features is the high complexity and learning curve of Kubernetes.  You can read more about the features of Kubernetes through the [official documentation](https://kubernetes.io/docs/home/).\n\n### What are the Basics of Kubernetes?\n\nThe core operations involved in Kubernetes include creating a Kubernetes Cluster, deploying an application into the cluster, exposing an application ports, scaling an application and updating an application.",
              "instructor_notes": ""
            },
            {
              "id": 980791,
              "key": "7ff02350-007b-4bdf-9389-44f0c20a4031",
              "title": "Kubernetes Workflow Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/February/5e56b39e_kubernetes-basic-workflow/kubernetes-basic-workflow.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/7ff02350-007b-4bdf-9389-44f0c20a4031",
              "caption": "**Kubernetes Basics Workflow**",
              "alt": "Kubernetes Basics Workflow",
              "width": 1389,
              "height": 947,
              "instructor_notes": null
            },
            {
              "id": 980788,
              "key": "aa2466bf-5204-49ad-a055-425339796f6f",
              "title": "Kubernetes Overview 1",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### What is the Kubernetes (Cluster) Architecture?\n\nThe core of Kubernetes is the cluster.  Containers run in the cluster.  The core components of the cluster include a cluster master and nodes.  Inside nodes there is another hierarchy.  This is shown in the diagram. A Kubernetes node can contain multiple pods, which in turn can contain multiple containers and/or volumes.",
              "instructor_notes": ""
            },
            {
              "id": 980794,
              "key": "3f51c831-4818-42e8-ae3e-a176cf528e2e",
              "title": "Cluster Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/February/5e56b3ba_kubernetes-hierarchy/kubernetes-hierarchy.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/3f51c831-4818-42e8-ae3e-a176cf528e2e",
              "caption": "**Kubernetes Hierarchy**",
              "alt": "Kubernetes Hierarchy ",
              "width": 1662,
              "height": 1101,
              "instructor_notes": null
            },
            {
              "id": 980802,
              "key": "97b38060-8c40-4e1a-b818-a4999ba9ef4d",
              "title": "Overview of Kubernetes 2",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### How do you Set Up a Kubernetes Cluster?\n\nThere are two main methods:  \n1. Set up a local cluster (preferably with Docker Desktop)\n2. Provision a cloud cluster: \n - Amazon through [Amazon EKS](https://aws.amazon.com/eks/) \n - Google through [Google Kubernetes Engine GKE](https://cloud.google.com/kubernetes-engine) \n - Microsoft through [Azure Kubernetes Service (AKS)](https://azure.microsoft.com/en-us/services/kubernetes-service/).\n\nIf you are using Docker and have [enabled kubernetes](https://docs.docker.com/docker-for-mac/#kubernetes) then you already have a standalone Kubernetes server running.  This would be the recommended way to get started with Kubernetes clusters.\n\n### How do you Launch Containers in a Kubernetes Cluster?\n\nNow that you have Kubernetes running via Docker desktop how do you launch a container?  One of the [easiest ways is via](https://docs.docker.com/docker-for-mac/kubernetes/) the `docker stack deploy --compose-file` command.\n\nThe `yaml` example file looks like the following:\n\n```yaml\nversion: '3.3'\n\nservices:\n  web:\n    image: dockersamples/k8s-wordsmith-web\n    ports:\n     - \"80:80\"\n\n  words:\n    image: dockersamples/k8s-wordsmith-api\n    deploy:\n      replicas: 5\n      endpoint_mode: dnsrr\n      resources:\n        limits:\n          memory: 50M\n        reservations:\n          memory: 50M\n\n  db:\n    image: dockersamples/k8s-wordsmith-db\n```\n\nThis could be deployed with the following command:\n\n```bash\ndocker stack deploy --namespace my-app --compose-file /path/to/docker-compose.yml mystack\n```",
              "instructor_notes": ""
            },
            {
              "id": 980789,
              "key": "37f1abc7-5c2f-4721-900f-5d0597ceba9d",
              "title": "Autoscaling Kubernetes",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Demo",
              "instructor_notes": ""
            },
            {
              "id": 859583,
              "key": "59830ba3-75e9-44fa-b512-6366e33aabee",
              "title": "ND#9991 C04 L04 A02 Overview Of Kubernetes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wLYFNMVDNtc",
                "china_cdn_id": "wLYFNMVDNtc.mp4"
              }
            },
            {
              "id": 859610,
              "key": "e565a017-f331-4c6e-9973-694d1507b11a",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can follow the demo yourself, or read through a [quick primer](https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-intro/) beforehand:\n- [Create a cluster](https://kubernetes.io/docs/tutorials/kubernetes-basics/create-cluster/cluster-interactive/)\n\n### More on Kubernetes\nTo go more in-depth with Kubernetes, we also suggest going through the remaining starter tutorials on the [Kubernetes website](https://kubernetes.io/docs/tutorials/kubernetes-basics/):\n- [Deploy An App](https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/)\n- [Explore Your App](https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/)\n- [Expose Your App Publicly](https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)\n- [Scale Your App](https://kubernetes.io/docs/tutorials/kubernetes-basics/scale/scale-intro/)\n- [Update Your App](https://kubernetes.io/docs/tutorials/kubernetes-basics/scale/scale-intro/)",
              "instructor_notes": ""
            },
            {
              "id": 900423,
              "key": "7d598ec9-ca93-4a41-93e3-7e26068ab34f",
              "title": "Kubernetes Solves What",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7d598ec9-ca93-4a41-93e3-7e26068ab34f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What problem does Kubernetes solve?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Managing and running container clusters",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Installing packages",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Reusing source code",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "None of the above",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 900698,
              "key": "7578371a-0687-439d-8eb2-cbc7215a7eef",
              "title": "Kubernetes deployments",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7578371a-0687-439d-8eb2-cbc7215a7eef",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "How can you get a list of deployed apps running on Kubernetes?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "kubectl ls",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "kubectl get running",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "kubectl get deployments",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "kubectl --show-all",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 900784,
              "key": "6b94c7fd-79ff-44f8-aeb7-c4c5b7783537",
              "title": "Scaling Kubernetes",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6b94c7fd-79ff-44f8-aeb7-c4c5b7783537",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If you had one Kubernetes app `test-app` running, which of the following would manually scale your app up to 6 application instances?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "kubernetes scale --up=6",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "kubectl scale deployments/test-app --replicas=6",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "kubectl scale --man --replicas=6",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "kubectl get deployments --replicas=6",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 900699,
              "key": "47605f72-db3f-4abb-bafc-8338f9812750",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional References\nHere is a list of links to concepts in Kubernetes:\n- [`kubectl`](https://kubernetes.io/docs/tasks/tools/install-kubectl/)\n- [Pods](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/)\n- [Containers](https://kubernetes.io/docs/concepts/containers/)\n- [Clusters](https://kubernetes.io/docs/tutorials/clusters/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859584,
          "key": "08e15610-47c6-450b-9ca4-f6746fbf9f76",
          "title": "Monitoring, Logging and Debugging with Kubernetes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08e15610-47c6-450b-9ca4-f6746fbf9f76",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900424,
              "key": "04fc2f33-f761-4069-869d-8048f3d8ccad",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Monitoring, Logging and Debugging with Kubernetes",
              "instructor_notes": ""
            },
            {
              "id": 859585,
              "key": "8b87eadd-4e40-4c17-933e-8e93f6ccac95",
              "title": "ND#9991 C04 L04 A03 Monitoring Logging And Debugging With Kubernetes",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "li1XFcv0W80",
                "china_cdn_id": "li1XFcv0W80.mp4"
              }
            },
            {
              "id": 900788,
              "key": "c35bf3ae-1bf7-40d7-8a46-05cde79e081d",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "We covered Prometheus more in-depth in the previous course, so we'll focus more on how it integrates with Kubernetes here.\n\nThe [Prometheus Operator](https://github.com/coreos/prometheus-operator) helps to integrate Prometheus monitoring directly with Kubernetes. There is also the [`kube-prometheus`](https://github.com/coreos/kube-prometheus) package which includes additional helpful components (including the Prometheus Operator) for monitoring, as well as the [Prometheus Adapter](https://github.com/directxman12/k8s-prometheus-adapter).\n\nPrometheus is not the only monitoring tool available for Kubernetes though - if you are interested in other options as well, check out this [link](https://kubernetes.io/docs/tasks/debug-application-cluster/resource-usage-monitoring/).\n\nOn the next page, you'll get to perform an exercise to get monitoring set up with Prometheus, as well as think through designing a monitoring system of your own.",
              "instructor_notes": ""
            },
            {
              "id": 859611,
              "key": "16c6179d-c1f3-4d88-915f-e7d8317a0975",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Reference\n- [Prometheus](https://prometheus.io/)\n- [Application Introspection and Debugging](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-application-introspection/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900648,
          "key": "17cb2f88-0f9b-4449-a05d-2cb4ef0f260f",
          "title": "Exercise: Prometheus Monitoring",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17cb2f88-0f9b-4449-a05d-2cb4ef0f260f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980793,
              "key": "b442f919-e77f-472d-a79e-83d071eec196",
              "title": "Alerting Theory",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Prometheus Monitoring\nMonitoring is an essential component of DevOps best practices. In this exercise, you will set up Prometheus Monitoring.\n\n\n### Alerting Theory\nFor this exercise you will:\n- Set up Prometheus monitoring.\n- Consider a [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution), \"[six sigma](https://en.wikipedia.org/wiki/Six_Sigma_)\" and the [68-95-99.7 rule](https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule). Computer systems events are often normally distributed, meaning that all events within three standard deviations from the mean occur with 99.7 of the occurrences.\n- Design a process that alerts senior engineers when events are greater than three standard deviations from the mean and write up how the alerts should work, i.e.\n  - Who should get a page when an event is more significant than three standard deviants from the mean?\n  - Should there be a backup person who gets alerted if the first person doesn’t respond within five minutes?\n  - Should an alert wake up a team member at one standard deviation? What about two?\n\n## Getting Started with Prometheus",
              "instructor_notes": ""
            },
            {
              "id": 980792,
              "key": "42a562de-6c2e-45a9-8d05-b83fbe7bd9b8",
              "title": "Prometheus",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "PStcuwCJtq0",
                "china_cdn_id": "PStcuwCJtq0.mp4"
              }
            },
            {
              "id": 900649,
              "key": "263683f2-35b4-4a88-91a9-df4a0262b9a3",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "[Prometheus](https://prometheus.io/) is a popular metrics and alerting solution that is often used with containers and Kubernetes.  To run this tutorial please do the following.\n\n* Use a local environment or preferably AWS Cloud9.  If you use AWS Cloud9, you will need to expose port 9090 via EC2 Security Group.\n* [Download, install](https://prometheus.io/download/) and run Prometheus.  On AWS Cloud9 you would install the latest release that has `*.linux-amd64.tar.gz` in the name.  This would like something like `wget <some release>.linux-amd64.tar.gz`. \n\n```bash\ntar xvfz prometheus-*.tar.gz\ncd prometheus-*\n```\n\n\n* Configure Prometheus by creating a `prometheus.yml` file\n\n```yaml\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n\nscrape_configs:\n  - job_name: prometheus\n    static_configs:\n      - targets: ['localhost:9090']\n```\n\n* Start Prometheus\n\nWait about 30 seconds for Prometheus to collect data.\n\n```bash\n./prometheus --config.file=prometheus.yml\n```\n\n* View data through the expression browser\n\nGo to [http://localhost:9090/graph](http://localhost:9090/graph).  Choose the \"console\" within the graph. One metric that Prometheus collects is how many times [http://localhost:9090/metrics](http://localhost:9090/metrics) has been called.  If you refresh a few times then type the following in the expression console you can see a time series result. \n```bash\npromhttp_metric_handler_requests_total\n```\n\n* View data through the graphing interface\n\nAnother way to view data is via the graphing interface.  Go to [http://localhost:9090/graph](http://localhost:9090/graph).  Use the \"Graph\" tab.\n```bash\nrate(promhttp_metric_handler_requests_total{code=\"200\"}[1m])\n```\n\n* *(OPTIONAL)* Going further, feel free to experiment with how that would work by following the example below and changing to suite your needs.\n\nA more sophisticated example would [involve also collecting](https://prometheus.io/docs/prometheus/latest/getting_started/#downloading-and-running-prometheus) data from clients.  Next download these `go` clients using the code below and run them.\n\n```bash\n# Fetch the client library code and compile example.\ngit clone https://github.com/prometheus/client_golang.git\ncd client_golang/examples/random\ngo get -d\ngo build\n\n# Start 3 example targets in separate terminals:\n./random -listen-address=:8080\n./random -listen-address=:8081\n./random -listen-address=:8082\n```\n\nNext, add these clients in the `prometheus.yml`\n\n```yaml\nscrape_configs:\n  - job_name:       'example-random'\n\n    # Override the global default and scrape targets from this job every 5 seconds.\n    scrape_interval: 5s\n\n    static_configs:\n      - targets: ['localhost:8080', 'localhost:8081']\n        labels:\n          group: 'production'\n\n      - targets: ['localhost:8082']\n        labels:\n          group: 'canary'\n```\n\nRestart prometheus and view this metric in the expression browser.\n\n`rpc_durations_seconds`.\n\n\n*Based on [guide from official Prometheus documentation](https://github.com/prometheus/docs/blob/432af848c749a7efa1d731f22f73c27ff927f779/content/docs/introduction/first_steps.md) and [guide here](https://prometheus.io/docs/prometheus/latest/getting_started/#downloading-and-running-prometheus)*\n\n\n\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900425,
          "key": "47e0bdb4-535f-4a4e-9277-7b3b96111f07",
          "title": "Exercise: Logging",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "47e0bdb4-535f-4a4e-9277-7b3b96111f07",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900426,
              "key": "dbf695cb-86b5-49ff-8d6e-5af16eaa440c",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Logging\n\nLogging is an important concept to master for professional software development.  Test your skills in this exercise by getting the logs from a running pod.\n\n### Instructions\n\n- Start your kubernetes application\n- Grab your application logs for your pod (given a pod named `my-pod`) by running this command:  `kubectl logs my-pod`\n\nIt's that easy to gather your logs with Kubernetes!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 906288,
          "key": "671ccbec-d156-473e-821f-6af5e41d1fa9",
          "title": "Exercise: Debugging",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "671ccbec-d156-473e-821f-6af5e41d1fa9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980796,
              "key": "868f49de-6a69-414e-a079-fd3a0922321c",
              "title": "Debugging Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Debugging",
              "instructor_notes": ""
            },
            {
              "id": 980795,
              "key": "19b0643a-aa66-4b62-90be-9447a2ee0b7f",
              "title": "Kubernetes-Demo",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "9FqlLWAbjKs",
                "china_cdn_id": "9FqlLWAbjKs.mp4"
              }
            },
            {
              "id": 906289,
              "key": "43fc0ec8-4743-40bd-a175-8bfd8217f859",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As with coding itself, once you have launched your app with Kubernetes, it's likely you will need to do some debugging to get everything working properly. Here, you'll do some debugging with an example app to build your skills with Kubernetes.\n\nTake a look at this sample bash script that shows how the `kubectl` commands would be run in the project root directory.  You will want to change the `dockerpath` to your container name and DockerHub username.\n\n```bash\n#!/usr/bin/env bash\n\ndockerpath=\"noahgift/flasksklearn\"\n\n# Run in Docker Hub container with kubernetes\nkubectl run flaskskearlndemo\\\n    --generator=run-pod/v1\\\n    --image=$dockerpath\\\n    --port=80 --labels app=flaskskearlndemo\n\n# List kubernetes pods\nkubectl get pods\n\n# Forward the container port to host\nkubectl port-forward flaskskearlndemo 8000:80\n```\n\n### Instructions - Pod Issues\n\nLet's say you have deployed a Kubernetes app, but have the pod does not seem to be running.\n\n1. First, use `kubectl get pods` to check the names of your running pods. You may notice the pod with an issue is shown as in a `Pending` status instead of `Running`.\n2. Using the `NAME` of the specific pod from step 1, use `kubectl describe pod {POD NAME}` to get more information about that pod. \n3. From the output of the above command, search until you find the `Events` header. This should give you a `Reason` and `Message` related to the failure, such as `FailedScheduling`. An issue like this could be due to the necessary resources not being available for the pod, such as CPU limits. \n4. From what we have seen before, `kubectl scale` could be used in such a situation to correctly scale up and provide the necessary resources for our `Pending` pod. On the next page, you'll get to see an automated way to scale up your apps which improves on the manual functionality of `kubectl scale`.",
              "instructor_notes": ""
            },
            {
              "id": 906290,
              "key": "cd976ec5-8c62-49c1-af9b-7e149d11fe89",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Instructions - Node Issues\n\nIn this case, consider a Kubernetes app where the pod is working, but behaving strangely. Alternatively, you may have noticed an issue where no pod will schedule onto a particular node. In this case, there is likely an issue with the specific node that needs to be debugged. While the overall process is fairly similar to debugging issues, the syntax of commands is slightly different, so let's walk through these.\n\n1. First, use `kubectl get nodes` to check the names of the available nodes. You may notice the node with an issue is shown as in a `NotReady` status instead of `Ready`.\n2. Using the `NAME` of the specific node from step 1, use `kubectl describe node {NODE NAME}` to get more information about that node.\n3. The outputs here can vary quite a bit, but the issue could be caused by a disconnection from the network, some other negative `Event`, too high of resource usage, etc.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859586,
          "key": "797b91ad-3db2-4014-a63f-dcd1c1cd0e2b",
          "title": "Auto Scaling with CPU or Memory",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "797b91ad-3db2-4014-a63f-dcd1c1cd0e2b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900700,
              "key": "a9468694-f42b-4c6b-8c96-cc24458f92d0",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Autoscaling with CPU or Memory\n\nIf you did the [Scaling Demo](https://kubernetes.io/docs/tutorials/kubernetes-basics/scale/scale-intro/) earlier, you already saw one way to scale your apps:\n\n`kubectl scale {deployment name} --replicas={desired number of replicas}`\n\nThe Horizontal Pod Autoscaler does this work for you.\n\nOne of the \"killer\" features of Kubernetes is the ability to set up auto-scaling via the [Horizontal Pod Autoscaler](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/). How does this work? The Kubernetes HPA (Horizontal Pod Autoscaler) will automatically scale the number of pods (*remember they can contain multiple containers*) in a replication controller, deployment or replica set.  The scaling is based on CPU utilization, memory or custom metrics defined in the Kubernetes Metrics Server.\n",
              "instructor_notes": ""
            },
            {
              "id": 980797,
              "key": "f862cbb7-cfda-473e-9473-1d68d4638fe7",
              "title": "Scaling Image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/February/5e56bc69_kubernetes-hpa/kubernetes-hpa.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f862cbb7-cfda-473e-9473-1d68d4638fe7",
              "caption": "**Kubernetes HPA (Horizontal Pod Autoscaler)**",
              "alt": "Kubernetes HPA (Horizontal Pod Autoscaler)",
              "width": 1148,
              "height": 1017,
              "instructor_notes": null
            },
            {
              "id": 980798,
              "key": "fe2e818e-aba1-42aa-b261-4671da925010",
              "title": "Docker Article",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There is a Docker article [Kubernetes autoscaling in UCP](https://success.docker.com/article/kubernetes-autoscaling-in-ucp) that is a good guide to go deeper on this topic and experiment with it yourself.",
              "instructor_notes": ""
            },
            {
              "id": 859587,
              "key": "6e1ad3b9-1649-493f-b0a2-0746238ad1bf",
              "title": "ND#9991 C04 L04 A04 Autoscaling With CPU Or Memory",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "MFQ9lOUIit0",
                "china_cdn_id": "MFQ9lOUIit0.mp4"
              }
            },
            {
              "id": 900701,
              "key": "f8d79b00-29a5-48ca-a6f3-a9648ced2746",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The Horizontal Pod Autoscaler built into Kubernetes is incredibly useful for expanding the number of Pods available based on processing or memory needs. The underlying algorithm itself, somewhat simplified, is as follows:\n\n`newNumPods = ceil(currentNumPods * (currentMetric / desiredMetric))`\n\nThis means, if by some metric, we are currently at 2.5X our desired metric level, we will scale up our number of pods by 2.5X, rounded up to the nearest one pod.\n",
              "instructor_notes": ""
            },
            {
              "id": 900702,
              "key": "73c37aac-5c86-4446-abfa-4f9592363c17",
              "title": "Autoscaling Quiz",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "73c37aac-5c86-4446-abfa-4f9592363c17",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "If we currently have 27 pods, and a desired metric value of 137, how many pods will scale to we have if the metric currently has a value of 1,337?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "27 pods",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "270 pods",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "263.5 pods",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "264 pods",
                    "is_correct": true
                  },
                  {
                    "id": "rbk5",
                    "text": "263 pods",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 859612,
              "key": "6ff67848-8823-409d-aa1e-3faa0f4c040f",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Reference\n- [Autoscale Pod](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/)\n- [Additional HPA Walkthrough](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859588,
          "key": "1f06cab8-d535-4d14-aa71-795aa829006b",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1f06cab8-d535-4d14-aa71-795aa829006b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980801,
              "key": "1e0370d3-a480-4b52-87a0-78e75cde25c9",
              "title": "Summary Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Kubernetes Summary",
              "instructor_notes": ""
            },
            {
              "id": 859589,
              "key": "f8bb6177-8837-4a9c-9fd4-13d18eed8a07",
              "title": "ND#9991 C04 L04 A05 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Sb6tt5l7SMU",
                "china_cdn_id": "Sb6tt5l7SMU.mp4"
              }
            },
            {
              "id": 980799,
              "key": "4759d1b7-5cd7-4fb6-9e23-9fe79948bc09",
              "title": "Kubernetes Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Why Kubernetes?\n\nThere are many compelling reasons to use Kubernetes.  Let's summarize them:\n\n* Created, Used and Open Sourced by Google\n* High Availability Architecture\n* Auto-Scaling is Built In\n* Rich Ecosystem\n* Service Discovery\n* Container Health Management\n* Secrets and Configuration Management\n\nAnother advantage is that Kubernetes is cloud agnostic and it could be a solution for companies that are willing to take on the additional complexity to protect against \"vendor lockin\".\n",
              "instructor_notes": ""
            },
            {
              "id": 980800,
              "key": "4d3ea4cc-6da8-4340-8a22-3f69e4b69388",
              "title": "Key Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms:\n\n#### Kubernetes\n\nKubernetes is an open-source system for automating the operations of containerized applications.  Google created it and opened-sourced it in 2014.\n\n#### Amazon EKS\n\nAmazon EKS is a managed Kubernetes service created by Amazon.\n\n#### Google GKE\n\nGoogle GKE is a managed Kubernetes service created by Google.\n\n#### Azure Kubernetes Service AKS\n\nAzure Kubernetes Service is a managed Kubernetes service created by Google.\n\n#### YAML\n\nYAML is a human-readable serialization format often used in configuration systems.  It is easily portable to JSON format.\n\n#### Kubernetes Pods\n\nA Kubernetes pod is a group of one or more containers.\n\n#### Kubernetes Containers\n\nA Kubernetes container is a Docker image that deploys into a Kubernetes cluster.\n\n#### Kubernetes Clusters\n\nA Kubernetes cluster is a deployment of Kubernetes that contains the entire ecosystem of Kubernetes components, including nodes, pods, the API, and containers.\n\n#### Prometheus\n\nPrometheus is an open-source monitoring system with an efficient time-series database.\n\n#### Logging\n\nLogging is a process of creating messages about the running state of a software application.\n\n#### Autoscaling\n\nAutoscaling is the process of scaling load up or down automatically based on how many resources the nodes are using.\n\n*Source: https://noahgift.github.io/cloud-data-analysis-at-scale/topics/key-terms*\r\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}