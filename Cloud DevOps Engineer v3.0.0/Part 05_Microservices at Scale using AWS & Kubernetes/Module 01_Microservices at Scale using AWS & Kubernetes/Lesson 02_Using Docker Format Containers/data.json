{
  "data": {
    "lesson": {
      "id": 848081,
      "key": "118dfd62-1afc-4bc1-9a84-31905f19d96f",
      "title": "Using Docker Format Containers",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Setup a local development environment and learn to run [Docker](https://www.docker.com/) containers, locally. Learn how to lint and test some source code and Docker files.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/118dfd62-1afc-4bc1-9a84-31905f19d96f/848081/1582839968262/Using+Docker+Format+Containers+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/118dfd62-1afc-4bc1-9a84-31905f19d96f/848081/1582839963441/Using+Docker+Format+Containers+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 859152,
          "key": "f5f6baf4-a2cf-4514-97d6-4d0ad7203f98",
          "title": "Docker Containers",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f5f6baf4-a2cf-4514-97d6-4d0ad7203f98",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980750,
              "key": "748478ce-bdf8-4795-b3a4-e806e9949e0e",
              "title": "Docker Format Containers",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Docker Containers\n\n### Getting started with Docker\n\nThere are two main components of Docker:  [Docker Desktop](https://www.docker.com/products/docker-desktop) and [Docker Hub](https://www.docker.com/products/docker-hub).\n\n![docker-ecosystem](https://user-images.githubusercontent.com/58792/73697366-5d307f00-46ac-11ea-9f85-529a9e3c4f42.png)\n\n\n#### Docker Desktop Overview\n\nThe desktop application contains the container runtime which allows containers to execute.  The Docker App itself orchestrates the local development workflow including the ability to use [Kubernetes](https://github.com/kubernetes/kubernetes), which is an open-source system for managing containerized applications that came out of Google.\n\n#### Docker Hub Overview\n\nSo what is Docker Hub and what problem does it solve?  Just as the [`git`](https://git-scm.com/) source code ecosystem has local developer tools like [vim](https://www.vim.org/), [emacs](https://www.gnu.org/software/emacs/), [Visual Studio Code](https://code.visualstudio.com/) or [XCode](https://developer.apple.com/xcode/) that work with it, Docker Desktop works with Docker containers and allows for local use and development.\n\nWhen collaborating with `git` outside of the local environment, developers often use platforms like [Github](https://github.com/) or [Gitlab](https://about.gitlab.com/) to communicate with other parties and share code.  [Docker Hub](https://hub.docker.com/) works in a similar way.  Docker Hub allows developers to share docker containers that can serve as a base image for building new solutions.  \n\nThese base images can be built by experts and certified to be high quality:  i.e. the [official Python developers have a base image](https://hub.docker.com/_/python).  This allows a developer to leverage the expertise of the true expert on a particular software component and improve the overall quality of their container.  This is a similar concept to using a library developed by another developer versus writing it yourself.\n",
              "instructor_notes": ""
            },
            {
              "id": 859552,
              "key": "578af3f1-22d8-4380-bc54-02f8cb23ded3",
              "title": "ND9991 C04 L02 A01 Docker Containers",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "gYB82PT4nkM",
                "china_cdn_id": "gYB82PT4nkM.mp4"
              }
            },
            {
              "id": 980742,
              "key": "f8e2b2d5-7b7b-46ae-bec8-3321d94396fd",
              "title": "Real-World Use Cases of Docker Containers",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Real-World Examples of Containers\n\nWhat problem do [Docker format containers](https://docs.docker.com/engine/docker-overview/) solve?  In a nutshell, the operating system runtime can be packaged along with the code, and this solves a particularly complicated problem with a long history.  There is a famous meme that goes \"It works on my machine!\".  While this is often told as a joke to illustrate the complexity of deploying software, it is also true.  Containers solve this exact problem.  If the code works in a container, then the container configuration can be checked in as code.  Another way to describe this concept is that the actual Infrastructure is treated as code.  This is called IaC (Infrastructure as Code).\n\nHere are a few specific examples:\n\n#### Developer Shares Local Project\nA developer can work on a web application that uses `flask` (a popular Python web framework).  The installation and configuration of the underlying operating system is handled by the Docker container file.  Another team member can checkout the code and use `docker run` to run the project.  This eliminates what could be a multi-day problem of configuring a laptop correctly to run a software project.\n\n#### Data Scientist shares Jupyter Notebook with a Researcher at another University\nA data scientist working with [jupyter](https://jupyter.org/) style notebooks wants to share a complex data science project that has multiple dependencies on C, Fortran, R, and Python code.  They package up the runtime as a Docker container and eliminate the back and forth over several weeks that occurs when sharing a project like this.  \n\n#### A Machine Learning Engineer Load Tests a Production Machine Learning Model\nA Machine learning engineer has been tasked with taking a new model and deploying it to production.  Previously, they were concerned about how to accurately test the accuracy of the new model before committing to it.  The model recommends products to paying customers and, if it is inaccurate, it costs the company a lot of money.  Using containers, it is possible to deploy the model to a fraction of the customers, only 10%, and if there are problems, it can be quickly reverted.  If the model performs well, it can quickly replace the existing models.\n",
              "instructor_notes": ""
            },
            {
              "id": 980741,
              "key": "63591375-f20c-4028-bb69-b1e0f5d6406e",
              "title": "Why Docker Containers vs Virtual Machines?",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Why Docker Containers vs Virtual Machines?\n\nWhat is the difference between a container and a virtual machine?  Here is a breakdown:\n\n* Size:  Containers are much smaller than Virtual Machines (VM) and run as isolated processes versus virtualized hardware.  VMs can be GBs while containers can be MBs.\n* Speed:  Virtual Machines can be slow to boot and take minutes to launch.  A container can spawn much more quickly typically in seconds.\n* Composability:  Containers are designed to be programmatically built and are defined as source code in an Infrastructure as Code project (IaC).  Virtual Machines are often replicas of a manually built system.  Containers make IaC workflows possible because they are defined as a file and checked into source control alongside the projectâ€™s source code.\n",
              "instructor_notes": ""
            },
            {
              "id": 980740,
              "key": "375cd093-f31c-408b-88cf-1c5e65b02811",
              "title": "Reflect: Docker Containers",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "375cd093-f31c-408b-88cf-1c5e65b02811",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "- What is Docker/a container? How is it different from a virtual machine?\n- What is the advantage of docker containers?"
              },
              "answer": {
                "text": "Thanks for your response.",
                "video": null
              }
            }
          ]
        },
        {
          "id": 859554,
          "key": "3a0995c1-a52e-4f61-8c75-1df4d8cb554a",
          "title": "Exercise: Setting Up a Local Environment",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3a0995c1-a52e-4f61-8c75-1df4d8cb554a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900413,
              "key": "329477e5-c276-497f-8e94-c2389ffecf8f",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Setting Up a Local Environment\n\nMake sure to follow along with the below video to set up your own local environment!",
              "instructor_notes": ""
            },
            {
              "id": 859555,
              "key": "4c26df76-1c03-4cf8-a9b5-428a672ed6a8",
              "title": "ND9991 C04 L02 A02 Setting Up A Local Environment",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sSuuD2WzAJw",
                "china_cdn_id": "sSuuD2WzAJw.mp4"
              }
            },
            {
              "id": 899091,
              "key": "9b5b5d2d-a182-48b3-a41f-2dfd1ef003e4",
              "title": "Setup Steps Recap",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*Note*: You will need the `virtualenv` package installed to use `venv`. On a Mac, you may need to either `pip install` or `conda install` it depending on `which python3` path you use.\n\nBelow are the steps again to refresh your memory!  In the steps below, `venv` is the name of the environment created, but you can name the environment anything you want.\n\n- Create a Python3 virtual environment:  `python3 -m venv venv`\n- Activate the virtual environment:  `source venv/bin/activate`\n- Upgrade `pip` if you need to (optional):  `pip install --upgrade pip`\n- Install `pylint`:  `pip install pylint`\n- Install the code formatting tool `black`:  `pip install black`\n- Install the testing library `pytest`:  `pip install pytest`\n- Install the interactive interpreter `ipython`:  `pip install ipython`\n- Test it out by typing `ipython` and running some code ",
              "instructor_notes": ""
            },
            {
              "id": 859689,
              "key": "fdae0689-aba5-4c73-b060-fec6c32e27b9",
              "title": "Setting up the environment!",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "fdae0689-aba5-4c73-b060-fec6c32e27b9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Create `venv`",
                "Install `pylint`",
                "Install `black`",
                "Install `pytest`",
                "Install `ipython`"
              ],
              "positive_feedback": "Nice! Let us move on to the next part.",
              "video_feedback": null,
              "description": "Complete the steps below to set up your environment."
            }
          ]
        },
        {
          "id": 859556,
          "key": "5fc2f043-aea7-4afb-a212-398e41d5530b",
          "title": "Makefiles",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5fc2f043-aea7-4afb-a212-398e41d5530b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900406,
              "key": "4d78c26e-0f9d-4787-9a1e-52bb8ec3841c",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Makefiles",
              "instructor_notes": ""
            },
            {
              "id": 859557,
              "key": "93e377d6-472c-437c-a5ad-0603d206207e",
              "title": "ND9991 C04 L02 A03 Makefiles",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Zy3noyI7Q-I",
                "china_cdn_id": "Zy3noyI7Q-I.mp4"
              }
            },
            {
              "id": 1094287,
              "key": "b8f70030-2933-453b-bb3e-22608bca43aa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can follow along with Noah's code [here](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-2-Docker-format-containers/myrepo).",
              "instructor_notes": ""
            },
            {
              "id": 980743,
              "key": "43f93c84-a426-4523-a5a4-c088aab2553a",
              "title": "Setup Makefile",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Setup Makefile\n\nJust like `vim`, mastering `Makefiles` can take years, but a minimalistic approach provides immediate benefits.  A main benefit to a `Makefile` is the ability to enforce a convention. If everytime you work a project you follow a few simple steps, it reduces the possibility of errors in building and testing a project.\n\nA typical Python project can be improved by adding a `Makefile` with the following steps:  `make setup`, `make install`, `make test`, `make lint` and `make all`.  \n\n```Makefile\nsetup:\n\tpython3 -m venv ~/.myrepo\n\ninstall:\n\tpip install --upgrade pip &&\\\n\t\tpip install -r requirements.txt\n\ntest:\n\tpython -m pytest -vv --cov=myrepolib tests/*.py\n\tpython -m pytest --nbval notebook.ipynb\n\n\nlint:\n\tpylint --disable=R,C myrepolib cli web\n\nall: install lint test\n```\n\nThis example is from a tutorial repository called [`myrepo`](https://github.com/noahgift/myrepo).  There is also an article about how to use it from [CircleCI](https://circleci.com/blog/increase-reliability-in-data-science-and-machine-learning-projects-with-circleci/).\n\nThe general idea is that a convention eliminates the need to think about what to do.  For every project, there is a common way to install software, a common way to test software and a common way to test and lint software.  Just like `vim`, a `Makefile` build system is often already on a Unix or Linux system.  Even Microsoft uses the [Linux operating system in Azure](https://azure.microsoft.com/en-us/overview/linux-on-azure/), and the result is that Linux is the preferred deployment target for most software.\n",
              "instructor_notes": ""
            },
            {
              "id": 900656,
              "key": "05868c95-6937-44eb-8c94-8b658c260840",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Noah's Makefile\n\nHere is what is contained in Noah's Makefile:\n\n```Makefile\nsetup:\n    python3 -m venv ~/.myrepo\n\ninstall:\n    pip install -r requirements.txt\n\ntest:\n    python -m pytest -vv --cov=myrepolib tests/*.py\n    python -m pytest --nbval notebook.ipynb\n\nlint:\n    pylint --disable=R,C myrepolib cli web\n\nall: install lint test\n```\n\nNote that each line is indented with a tab.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 907178,
              "key": "268bf3f7-6317-4f11-830d-2ca8fd596b27",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Noah's `requirements.txt`\n\nBelow are the libraries included in Noah's `requirements.txt` file:\n\n```pseudo\npytest\npylint\njupyter\npytest-cov\npandas\nnbval\nclick\nflask\nrequests\n```",
              "instructor_notes": ""
            },
            {
              "id": 900669,
              "key": "2debc4cd-e3d8-4a7a-bbf4-27d53f1770a1",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### `Makefile` Creation Recap\n\nLetâ€™s recap the key concepts of *creating* a `Makefile`.\n\n- `setup`: You have seen most of this line before, which is dealing with our Python 3 virtual environment.\n- `install`: This installs the requirements for our environment. In our case, it also install the `pytest` and `pylint` libraries used later on in the Makefile.\n- `test`: This is broken into two parts for testing.\n  - First, it will use `.py` files in the `tests` directory. The `-vv` flag ensures short test durations are still shown (see [documentation](https://docs.pytest.org/en/latest/usage.html#profiling-test-execution-duration)), while the `-cov` flag helps to calculate what the test coverage of the code is (see [documentation](https://pypi.org/project/pytest-cov/)) in a given directory.\n  - The second line is used to test Jupyter Notebook cells. The `--nbval` flag makes pytest pay attention to jupyter notebooks (see [documentation](https://nbval.readthedocs.io/en/latest/)).\n- `lint`: This will lint what is in the `myrepolib` directory, as well as the `cli.py` and `web.py` files in our current directory (see video). The `--disable=R,C` is used to disable the \"convention\" (C) and \"refactor\" (R) message classes (see related [Stack Overflow post](https://stackoverflow.com/questions/31907762/pylint-to-show-only-warnings-and-errors)).\n- `all`: You may notice this line looks a little different than the above lines, with the commands on the same line. This will execute our `install`, `lint` and `test` commands.",
              "instructor_notes": ""
            },
            {
              "id": 899092,
              "key": "bb325e3f-5ccb-481c-b4af-6bca63ee0b79",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### `Makefile` Usage Recap \n\nLetâ€™s recap the key concepts of a *using* a `Makefile`.\n\nOnce the Makefile is created, you can use:\n- `make install`\n- `make lint`\n\nto install dependencies and test your code.\n",
              "instructor_notes": ""
            },
            {
              "id": 900402,
              "key": "36bd99e1-a9b7-40e1-809d-7d4c1d83a134",
              "title": "Makefiles",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "36bd99e1-a9b7-40e1-809d-7d4c1d83a134",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is Makefile's purpose?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Test software",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Install software",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Build executables or scripts",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "Collect and run tasks",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 900657,
              "key": "68809bad-221c-4e9a-90fc-8ffad8b41cf3",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "#### Additional References\n\n- [More on Makefiles](https://www.gnu.org/software/make/manual/html_node/Standard-Targets.html#Standard-Targets)\n- [Makefile tutorial](http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900403,
          "key": "6a833438-e4b6-47ce-91fc-81dcd2e838ab",
          "title": "Exercise: Create A Basic Makefile",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a833438-e4b6-47ce-91fc-81dcd2e838ab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1094288,
              "key": "eed31ba0-6b7e-4685-9d8d-abc32359bab8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Create A Basic Makefile\n\nMakefiles can be incredibly useful ways to build up a chain of commands that build, test and deploy software.\n\nNow that you've seen an example of a Makefile, you are ready to create one of your own. Makefiles have plenty of different commands and variables that can be used - check out [this page](https://makefiletutorial.com/) for a long list of them.\n\nWhile you will start from scratch in this exercise, if you need to look at another example of a Makefile, you can check out [this Makefile](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-3-Containerization/Makefile) in the course repository. This additional example Makefile will be used in the next lesson on containerization.\n\n### Instructions\n\n- Create an empty `Makefile` using the `touch` command\n- Create two commands:  `cmd1` and `cmd2` and make this `echo` the name of the command. \n  - Note that Makefiles will normally print out each line as it goes, but here we want it to just explicitly `echo` the command names. Check out the link above to figure out how you can stop a line from printing. \n  - Makefiles have an automatic variable that contains the target name for the commands you create. You can also find this in the link above to add to your Makefile.\n- Create an `all` command that runs both `cmd1` and `cmd2` \n- Run `make all` to see the output\n",
              "instructor_notes": ""
            },
            {
              "id": 900405,
              "key": "b7f43229-69a6-4489-975c-a10be2ec9c90",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### One Potential Solution\n\n<div id=\"spoiler_1\" style=\"display:none\">\nHere is an example of a Makefile you could create for this exercise:\n```\ncmd1:\n        @echo \"$@\"\n\ncmd2:\n        @echo \"$@\"\n\nall: cmd1 cmd2\n```\n\nNote that after `cmd1` and `cmd2`, and before `@echo`, should be a tab. The `@` at the start of these lines prevents `make` from automatically printing the lines, while `\"$@\"` is the variable for a string containing the target name, in this case either `cmd1` or `cmd2`. To double-check that `make` is actually showing the command name from within the command itself, try to `echo` something else from within one of them, such as `Hello World!`, and check the results.\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859558,
          "key": "f94e23a4-2ca5-4129-9809-0418d5c9f795",
          "title": "Install Docker",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f94e23a4-2ca5-4129-9809-0418d5c9f795",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980744,
              "key": "ddc205df-0830-4d29-8995-486f56b2feff",
              "title": "Install Docker Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Install Docker",
              "instructor_notes": ""
            },
            {
              "id": 859559,
              "key": "88d4f9b9-48f4-4547-8b99-330338d7d14d",
              "title": "ND9991 C04 L02 A04 Install Docker",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "3htCoFamfjo",
                "china_cdn_id": "3htCoFamfjo.mp4"
              }
            },
            {
              "id": 859603,
              "key": "5a9304df-b79d-4e38-823b-f41a0f7ff301",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*Note*: You will need to open Docker from your Applications for the first time for it to appear in the menu bar. Kubernetes may not yet be running for you, but we will come back to it later.\n\n### A few useful links for your reference:\n\n- [Docker Homepage](https://www.docker.com/)\n\n- [Play with Docker Classroom](https://training.play-with-docker.com/)\n\n- [Docker Orientation and Setup](https://docs.docker.com/get-started/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859560,
          "key": "982df410-49b7-4e24-9cec-368a73ea1159",
          "title": "Linting and CircleCI",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "982df410-49b7-4e24-9cec-368a73ea1159",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900409,
              "key": "174b56c2-d163-4797-bbe3-7b67c6719eaf",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Linting and CircleCI",
              "instructor_notes": ""
            },
            {
              "id": 980746,
              "key": "cee7d8f9-04db-44a4-a7ab-1df9b9f0be55",
              "title": "Extending a Makefile for use with Docker Containers and Build Systems",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Extending a Makefile for use with Docker Containers\n\nBeyond the simple `Makefile`, it is also useful to extend it to do other things.  An example of this is as follows:\n\n#### Example Makefile for Docker and CircleCI\n```bash \nsetup:\n\tpython3 -m venv ~/.container-revolution-devops\n\ninstall:\n\tpip install --upgrade pip &&\\\n\t\tpip install -r requirements.txt\n\ntest:\n\t#python -m pytest -vv --cov=myrepolib tests/*.py\n\t#python -m pytest --nbval notebook.ipynb\n\nvalidate-circleci:\n\t# See https://circleci.com/docs/2.0/local-cli/#processing-a-config\n\tcircleci config process .circleci/config.yml\n\nrun-circleci-local:\n\t# See https://circleci.com/docs/2.0/local-cli/#running-a-job\n\tcircleci local execute\n\nlint:\n\thadolint demos/flask-sklearn/Dockerfile\n\tpylint --disable=R,C,W1203,W1202 demos/**/**.py\n\nall: install lint test\n```\n\nA `Dockerfile` linter is called [`hadolint`](https://github.com/hadolint/hadolint) checks for bugs in a `Dockerfile`.  A [local version of the CircleCI build system](https://circleci.com/docs/2.0/local-cli/) allows for testing in the same environment as the SaaS offering.  The minimalist approach is still present.  A user only needs to remember to use the same commands:  `make install`, `make lint` and `make test`, but the `lint` step is more complete and powerful with the inclusion of `Dockerfile` as well as `Python` linting.\n\n*Notes about installing `hadolint` and `circleci`:* \nIf you are on OS X you can `brew install hadolint`. If you are on another platform follow the instructions from [the `hadolint` GitHub repo](https://github.com/hadolint/hadolint/).  To install the local version of `circleci` on OS X or Linux you can run `curl -fLSs https://circle.ci/cli | bash` or follow the official instructions for [local version of the CircleCI build system](https://circleci.com/docs/2.0/local-cli/).\n\n",
              "instructor_notes": ""
            },
            {
              "id": 980745,
              "key": "add05261-6a48-412f-b9dc-bd5aecb5761a",
              "title": "Linting and Circle CI",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### CircleCI lint workflow",
              "instructor_notes": ""
            },
            {
              "id": 859561,
              "key": "ec30febb-53fc-42c5-85cc-02f30fac40c0",
              "title": "ND9991 C04 L02 A05 Linting And Circle CI",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "IyBwcaVl1f4",
                "china_cdn_id": "IyBwcaVl1f4.mp4"
              }
            },
            {
              "id": 1094289,
              "key": "d18a5897-a9d8-4af0-8766-c8435965b9de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can find Noah's code [here](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-2-Docker-format-containers/class-demos). Note that the `Makefile` used in the video is the one in the `class-demos` directory, while he changes into the subdirectory within `demos` after that.",
              "instructor_notes": ""
            },
            {
              "id": 859604,
              "key": "c7a16e39-068a-409c-8bcd-331e17b30fd0",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using CircleCI\nHere are the steps Noah took in the above video:\n- Added to the Makefile:\n  ```Makefile\n  validate-circleci:\n      circleci config process .circleci/config.yml\n\n  run-circleci-local:\n      circleci local execute\n\n  lint: # This line should already be there with regular pylint\n      hadolint path/to/Dockerfile\n  ```\n- Runs `hadolint Dockerfile`\n- Uses the `config.yml` file within a `.circleci` directory\n- In the parent directory, runs `make run-circleci-local` to simulate what will happen in the remote CircleCI environment\n- Uses the CircleCI website (a related blog post is linked below) to test remotely\n\n### Notes about how to run this example\n\nThese instructions work the best on a Linux or OS X system or inside a Docker container itself.  One way to dramatically simplify installation and configuration in the Cloud is to use a Cloud based development environment like AWS Cloud9.  This was shown in the AWS Lambda examples in Lesson 1.  This allows you to eliminate a huge portion of the problems you can run into when installing software.  If you are expert at installing software on Linux, Windows or OS X, then this may not matter.  If you want the easiest path to running these commands, use AWS Cloud9.\n\n### Reference\n- [Increase reliability in data science and machine learning projects with CircleCI](https://circleci.com/blog/increase-reliability-in-data-science-and-machine-learning-projects-with-circleci/)\n- [AWS Cloud9](https://aws.amazon.com/cloud9/)",
              "instructor_notes": ""
            },
            {
              "id": 981043,
              "key": "95fca444-6978-41d4-bc45-78a75f65de5b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Setup AWS Docker Project",
              "instructor_notes": ""
            },
            {
              "id": 981042,
              "key": "10ae6fa0-0760-45bd-b8fe-28aeb952ff90",
              "title": "Setup-Dockerproject",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "v61ZF-UcvGo",
                "china_cdn_id": "v61ZF-UcvGo.mp4"
              }
            },
            {
              "id": 900410,
              "key": "d626d3d5-8283-4abb-aeda-bf5e116bb1e7",
              "title": "Hadolint",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d626d3d5-8283-4abb-aeda-bf5e116bb1e7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What does `hadolint` do? ",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Ports project to Kubernetes",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "It is an IDE for Docker",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "Lints a Dockerfile syntax",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Lints an entire project in Github",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 859562,
          "key": "febf1d51-d4e7-4601-b384-407287bec4bc",
          "title": "Running Dockerfiles",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "febf1d51-d4e7-4601-b384-407287bec4bc",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900407,
              "key": "aade7a3b-5f3c-4fc2-955b-df740c873312",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Running Dockerfiles",
              "instructor_notes": ""
            },
            {
              "id": 980747,
              "key": "8b051456-269e-4e92-86df-8e6fa860c86d",
              "title": "Using \"base\" images",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Using \"base\" images\n\nOne of the advantages of the Docker workflow for developers is the ability to use certified containers from the \"official\" development teams.  In this diagram a developer uses the official Python base image which is developed by the core Python developers.  This is accomplished by the `FROM` statement which loads in a previously created container image.\n",
              "instructor_notes": ""
            },
            {
              "id": 980751,
              "key": "232c50b3-1cca-4891-b763-0e275ce70610",
              "title": "base image",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2020/February/5e576022_base-image/base-image.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/232c50b3-1cca-4891-b763-0e275ce70610",
              "caption": "**Docker \"Base\" Image Workflow**",
              "alt": "Docker \"Base\" Image Workflow",
              "width": 1215,
              "height": 788,
              "instructor_notes": null
            },
            {
              "id": 980752,
              "key": "45b692a3-0172-47eb-a0c2-0fe385add031",
              "title": "base image description",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As the developer makes changes to the `Dockerfile`, they test locally, then push the changes to a private Docker Hub repo.  After this, the changes can be used by a deployment process to a Cloud or by another developer.",
              "instructor_notes": ""
            },
            {
              "id": 859563,
              "key": "fab315f9-ae29-4ce9-9dd8-21cbb387bf9a",
              "title": "ND9991 C04 L02 A06 Running Dockerfiles",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "OyML94gbcDc",
                "china_cdn_id": "OyML94gbcDc.mp4"
              }
            },
            {
              "id": 1094290,
              "key": "9c8b9a19-629c-4691-a8a4-0e48aec730cd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can find Noah's code [here](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-2-Docker-format-containers/class-demos), within the `demos` subdirectory. Note that he has begun filling out the `Dockerfile` and `run_docker.sh` files in the video.",
              "instructor_notes": ""
            },
            {
              "id": 859693,
              "key": "26fa882b-327b-4440-b20d-87ce3b619701",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Docker Cheat Sheet\n- Use `docker image ls` to see all of your created Docker images\n- `docker run -it {image name} bash` ran Noah's Docker image\n\nHere is a quick [Docker cheat sheet for your reference](https://www.docker.com/sites/default/files/Docker_CheatSheet_08.09.2016_0.pdf).",
              "instructor_notes": ""
            },
            {
              "id": 900675,
              "key": "c327980e-f8ea-4aad-8637-c4231e03bf6f",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Noah's Dockerfile\n\nBelow is Noah's Dockerfile for your reference:\n\n```\nFROM python:3.7.3-stretch\n\n# Working Directory\nWORKDIR /app\n\n# Copy source code to working directory\nCOPY . app.py /app/\n\n# Install packages from requirements.txt\n# hadolint ignore=DL3013\nRUN pip install --upgrade pip &&\\\n    pip install --trusted-host pypi.python.org -r requirements.txt\n```",
              "instructor_notes": ""
            },
            {
              "id": 900408,
              "key": "2a7f63a6-9c17-4acf-b918-0da129a8038f",
              "title": "Dockerfiles",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2a7f63a6-9c17-4acf-b918-0da129a8038f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is `FROM` in a Dockerfile?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "A compile step",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "A directive to load code",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "A python library",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "A way to use C extensions",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 859564,
          "key": "20251e91-48ed-4eb0-aed9-f7b70d0e387a",
          "title": "Exercise: Deploying to Amazon ECR",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "20251e91-48ed-4eb0-aed9-f7b70d0e387a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900646,
              "key": "2d689859-4714-4890-827b-79acacad1cfa",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Deploying to Amazon ECR\n\nWith a build server, local Docker file and lint files, we have everything built for our Python environment. The final step is to get this environment & microservice we've created deployed into an Amazon environment. We'll use Amazon's Elastic Container Registry (ECR) to do so. This allows us to put the whole bundled container and application onto Amazon.\n\nIn the below video, Noah walks through the steps necessary to deploy to Amazon ECR. You can follow along with the video, or additionally follow the exercise steps at the bottom of the page.",
              "instructor_notes": ""
            },
            {
              "id": 859565,
              "key": "39e9aba8-f05b-47f6-86c9-3ca2efbd7227",
              "title": "ND9991 C04 L02 A07 Deploying To Amazon ECR",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "q5YVELPpbaQ",
                "china_cdn_id": "q5YVELPpbaQ.mp4"
              }
            },
            {
              "id": 900647,
              "key": "8a74900c-df1b-4fa1-bc89-6f4cf925695e",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "All cloud providers also have their own container registries.  These are important because they allow you to keep private containers that will be sourced for cloud-based deployments.\n\n### Instructions\n\n- Create an empty `Dockerfile` using the `touch` command, or use a previously existing `Dockerfile`\n  - Use the `FROM` directive to source Python as a base image:  https://hub.docker.com/_/python\n  - Build your container locally\n- Create a new ECR repository following the instructions [here](https://docs.aws.amazon.com/AmazonECR/latest/userguide/ECR_GetStarted.html).\n- Push your container to the ECR repository you created\n",
              "instructor_notes": ""
            },
            {
              "id": 859605,
              "key": "b97520ad-ad97-4249-b4a9-8587a8ead20c",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Additional Reference\n- [ECR Registry Upload](https://aws.amazon.com/blogs/compute/authenticating-amazon-ecr-repositories-for-docker-cli-with-credential-helper/)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859566,
          "key": "e93df025-1060-407a-9a12-00138bcb2afd",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e93df025-1060-407a-9a12-00138bcb2afd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980748,
              "key": "469314c8-cbec-43b4-899b-abbedbfa53d2",
              "title": "Summary Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 859567,
              "key": "4c111d3f-03f7-4267-ae26-4a6d8e49bf3a",
              "title": "ND9991 C04 L02 A08 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "t1qvK-Yg58g",
                "china_cdn_id": "t1qvK-Yg58g.mp4"
              }
            },
            {
              "id": 980749,
              "key": "5fde6706-c598-4972-bcfd-cf70bae64d2a",
              "title": "Key Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms:\n\n####  Container\n\nA container is a set of processes that are isolated from the rest of the operating system.  They are often megabytes in size.\n\n#### Virtual Machine\n\nA virtual machine is the emulation of a physical operating system.  They can be Gigabytes in size.\n\n#### Docker Format Container\n\nThere are several formats for containers.  An emerging form is Docker, which involves the definition of a `Dockerfile.`\n\n#### pip\n\nThe `pip` tool installs Python packages.\n\n#### pylint\n\nThe `pylint` tool checks the Python source code for syntax errors.\n\n#### black\n\nThe `black` tool formats the text of Python source code automatically.\n\n#### pytest\n\nThe `pytest` tool is a framework for running tests on Python source code.\n\n#### IPython\n\nThe `ipython` interpreter is an interactive terminal for Python.  It is the core of the Jupyter notebook.\n\n#### Makefile\n\nA `Makefile` is a file that contains a set of directives used to build software.  Most Unix and Linux operating systems have built-in support for this file format.\n\n#### CircleCI\n\nA popular SaaS (Software as a Service) build systems used in DevOps workflows.\n\n#### Docker\n\nDocker is a company that creates container technology, including an execution engine, collaboration platform via DockerHub and a container format called `Dockerfile.`\n\n#### Amazon ECR\n\nAmazon ECR is a container registry that stores Docker format containers.  \n\n*Source: https://noahgift.github.io/cloud-data-analysis-at-scale/topics/key-terms*",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}