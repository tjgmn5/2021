{
  "data": {
    "lesson": {
      "id": 848079,
      "key": "32b4af71-e6d5-4252-b639-4cad1e47bd86",
      "title": "Containerization of an Existing Application",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build and run a containerized application, specifying the source code, app dependencies, and writing a complete Dockerfile.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/32b4af71-e6d5-4252-b639-4cad1e47bd86/848079/1582839949972/Containerization+of+an+Existing+Application+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/32b4af71-e6d5-4252-b639-4cad1e47bd86/848079/1582839945950/Containerization+of+an+Existing+Application+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 859153,
          "key": "17783b82-bbfc-4a7a-ad6a-bd7a100c14bd",
          "title": "Exercise: Docker Based Apps",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17783b82-bbfc-4a7a-ad6a-bd7a100c14bd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 1094280,
              "key": "035ac088-ff73-4e12-8a70-3a44b9bab6dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Docker-based Apps\n\nIf you haven't already, clone the course repository - [DevOps_Microservices](https://github.com/udacity/DevOps_Microservices), and navigate to the **Lesson-3-Containerization** directory. You'll use the code there to containerize a pre-built application with Docker.\n",
              "instructor_notes": ""
            },
            {
              "id": 859568,
              "key": "c7b6d6dc-3b19-46dc-a679-a7e2c6ade761",
              "title": "ND9991 C04 L03 A01 Docker Based Apps",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "wUrb9v-diVk",
                "china_cdn_id": "wUrb9v-diVk.mp4"
              }
            },
            {
              "id": 1094281,
              "key": "3cc84274-607d-4b2a-80c4-05b7ababd2d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Instructions\n\n- Navigate to the **Lesson-3-Containerization** directory in the [Github repo](https://github.com/udacity/DevOps_Microservices).\n\n\n- Check out the pre-built [Flask app](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-3-Containerization/flask_app) that will be containerized. If you haven't used Flask before, you can check out [this free Udacity course](https://www.udacity.com/course/full-stack-foundations--ud088), or check out [Flask's documentation](https://palletsprojects.com/p/flask/).\n\n\n- Look through the `Dockerfile` for the container (also included below).\n\n\n- Look through the [`Makefile`](https://github.com/udacity/DevOps_Microservices/blob/master/Lesson-3-Containerization/Makefile) to be run within the container.\n\n\nThe only real new thing so far is the inclusion of the Flask app - you got familiar with Dockerfiles and Makefiles in the *Using Docker Format Containers* Lesson, as well as how to create them. There are some additional steps we still want to go through to get the App up and running, but the important thing to notice here is that it doesn't necessarily matter what the application itself is, you can still easily containerize it.\n",
              "instructor_notes": ""
            },
            {
              "id": 900686,
              "key": "5adf070b-3474-4776-bc64-75ed315d26ae",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Noah's Dockerfile\n\nThe `Dockerfile` in Noah's video is provided below:\n\n```\nFROM python:3.7.3-stretch\n\n# Working Directory\nWORKDIR /app\n\n# Copy source code to working directory\nCOPY . flask_app/web.py /app/\n\n# Install packages from requirements.txt\n# hadolint ignore=DL3013\nRUN pip install --upgrade pip &&\\\n    pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Expose port 80\nEXPOSE 80\n\n# Run app.py at container launch\nCMD [\"python\", \"web.py\"]\n```",
              "instructor_notes": ""
            },
            {
              "id": 900411,
              "key": "56b38bf1-d73a-417d-9897-0b1390c585b6",
              "title": "Building from a Dockerfile",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "56b38bf1-d73a-417d-9897-0b1390c585b6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is the advantage in building Dockerfiles from other Dockerfiles?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "It runs faster",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Re-use high-quality work",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "It uses Python code",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "This uses the latest Linux kernel",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 1094285,
              "key": "eaf37c41-5ffd-4786-b74f-ae87433bfe38",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Reference\n- Build an Image [Docker Documentation](https://docs.docker.com/get-started/part2/).\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859569,
          "key": "98fca0e9-d6ed-46ca-902e-1685e0e67cbe",
          "title": "Install Packages",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "98fca0e9-d6ed-46ca-902e-1685e0e67cbe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980758,
              "key": "5d0a4a2e-22ba-4a2f-bd76-5c4bfb9c443c",
              "title": "Install Packages Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Install Packages",
              "instructor_notes": ""
            },
            {
              "id": 859570,
              "key": "dd2ae6df-2614-481b-a2f0-51ce525f417c",
              "title": "ND9991 C04 L03 A02 Install Packages",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "fYuiwzx0uzI",
                "china_cdn_id": "fYuiwzx0uzI.mp4"
              }
            },
            {
              "id": 980753,
              "key": "cd9d4065-3c81-487d-adbb-0d1e5a156657",
              "title": "Install Hint",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Hint\n\nTo run this code you will need [Docker](https://docs.docker.com/install/) installed.  Remember the suggestion about using AWS Cloud9?  It has Docker already installed for you.  This may be a time to try this out and see if this workflow simplifies the way you work.\n\n### Setting Up Cloud9",
              "instructor_notes": ""
            },
            {
              "id": 980754,
              "key": "1f678044-93dd-43b9-9173-fb5f632ac2c7",
              "title": "Setup-Cloud9",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "GpS_lnB6DVY",
                "china_cdn_id": "GpS_lnB6DVY.mp4"
              }
            }
          ]
        },
        {
          "id": 859571,
          "key": "ab38eb41-1e55-4cbf-b8f0-1e3d13fbc903",
          "title": "Copying an Application",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ab38eb41-1e55-4cbf-b8f0-1e3d13fbc903",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900414,
              "key": "33b8f1e4-e507-4f13-8d3b-ad4fcebd2978",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Copying An Application",
              "instructor_notes": ""
            },
            {
              "id": 859572,
              "key": "34d2ae75-3a7f-446d-a0cb-92752d357456",
              "title": "ND9991 C04 L03 A03 Copying An Application",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "tRel4dvNS4M",
                "china_cdn_id": "tRel4dvNS4M.mp4"
              }
            },
            {
              "id": 900689,
              "key": "0bc52919-99a6-410a-a002-da74e5ff6a3c",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Make sure to add the additional line to your Dockerfile before moving on!\n\n```\nCOPY . nlib /app/\n```\n\nThe updated Dockerfile should look like this:\n\n```\nFROM python:3.7.3-stretch\n\n# Working Directory\nWORKDIR /app\n\n# Copy source code to working directory\nCOPY . flask_app/web.py /app/\nCOPY . nlib /app/\n\n# Install packages from requirements.txt\n# hadolint ignore=DL3013\nRUN pip install --upgrade pip &&\\\n    pip install --trusted-host pypi.python.org -r requirements.txt\n\n# Expose port 80\nEXPOSE 80\n\n# Run app.py at container launch\nCMD [\"python\", \"web.py\"]\n```",
              "instructor_notes": ""
            },
            {
              "id": 900415,
              "key": "3d7e4c22-4fa9-4bba-ae5e-7f6442e3de49",
              "title": "Copying An Application",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3d7e4c22-4fa9-4bba-ae5e-7f6442e3de49",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What is an important step to consider when copying an application to Docker?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Libraries may need to be installed",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "It is important to have a way to test the application",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "Understanding which port to expose from the container",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Understanding which port to expose from the host",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 859573,
          "key": "7aa6eb9e-2fa0-48e3-a77e-fecdf2019eb3",
          "title": "App Setup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7aa6eb9e-2fa0-48e3-a77e-fecdf2019eb3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900693,
              "key": "f5c80a71-7ecd-444b-bbab-bac156d01070",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## App Setup",
              "instructor_notes": ""
            },
            {
              "id": 859574,
              "key": "e89af7e0-e57d-4f4d-b9a1-23087697c6b0",
              "title": "ND9991 C04 L03 A04 App Setup",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "16NmiumiraU",
                "china_cdn_id": "16NmiumiraU.mp4"
              }
            },
            {
              "id": 900691,
              "key": "aa0b6ec2-8c8b-4745-994a-e3af32ebbdaf",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### More on Ports\n\nPorts are not usually just randomly assigned numbers. Many ports are used for specific activities in networking. Port 80 is the commonly used port number for HTTP requests, which is why we are exposing that port to the host computer - it's where the Flask app is listening for requests. You may also see other ports, such as port 8080, used with different applications. What this means is that the server is listening on that port, so a request to that server must also append the \"special\" port number to an HTTP request (such as example.website.com:8080), so that the sending client uses port 8080, instead of the normal HTTP port 80.\n\nYou can see some additional common ports [here](https://www.utilizewindows.com/list-of-common-network-port-numbers/).\n\nFor more information specific to Docker ports, see [this post](https://runnable.com/docker/binding-docker-ports).",
              "instructor_notes": ""
            },
            {
              "id": 900692,
              "key": "0dd8c27f-2620-41b6-af0c-894e2fde0fc3",
              "title": "Networking Ports",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0dd8c27f-2620-41b6-af0c-894e2fde0fc3",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match up the below network services to the correct port numbers. Not all options are used."
                },
                "concepts_label": "Service",
                "answers_label": "Port number",
                "concepts": [
                  {
                    "text": "SSH",
                    "correct_answer": {
                      "id": "a1563490589682",
                      "text": "22"
                    }
                  },
                  {
                    "text": "DNS",
                    "correct_answer": {
                      "id": "a1563490636465",
                      "text": "53"
                    }
                  },
                  {
                    "text": "HTTP",
                    "correct_answer": {
                      "id": "a1563490638249",
                      "text": "80"
                    }
                  },
                  {
                    "text": "POP3",
                    "correct_answer": {
                      "id": "a1563490640973",
                      "text": "110"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1563490640973",
                    "text": "110"
                  },
                  {
                    "id": "a1563490638249",
                    "text": "80"
                  },
                  {
                    "id": "a1563490656244",
                    "text": "69"
                  },
                  {
                    "id": "a1563490636465",
                    "text": "53"
                  },
                  {
                    "id": "a1563490691501",
                    "text": "443"
                  },
                  {
                    "id": "a1563490654908",
                    "text": "23"
                  },
                  {
                    "id": "a1563490589682",
                    "text": "22"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 859575,
          "key": "79ae14a4-e133-4e05-9f85-3eef84465d60",
          "title": "App Start",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "79ae14a4-e133-4e05-9f85-3eef84465d60",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900416,
              "key": "8ab70a74-af2c-4e84-a21c-b7c233b38176",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## App Start",
              "instructor_notes": ""
            },
            {
              "id": 859576,
              "key": "3c8f8c8a-1e1f-47af-bbcf-171afca0d0e8",
              "title": "ND9991 C04 L03 A05 App Start",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "4s6sk7WVSok",
                "china_cdn_id": "4s6sk7WVSok.mp4"
              }
            },
            {
              "id": 980755,
              "key": "e5c1b221-a653-44e3-af26-61688616d623",
              "title": "Common Issues Running a Docker Container",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Common Issues Running a Container\n\nThere are a few common issues that crop up when starting a container or building one for the first time.  Let's walk through each problem and then present a solution for them.\n\n#### What Goes in a `Dockerfile` if You Need to [Write to the Host Filesystem](https://docs.docker.com/storage/volumes/)?  \nIn the following example the `docker volume` command is used to create a volume and then later it is mounted to the container.\n\n```bash\n>  /tmp docker volume create docker-data\ndocker-data\n>  /tmp docker volume ls\nDRIVER              VOLUME NAME\nlocal               docker-data\n>  /tmp docker run -d \\\n  --name devtest \\\n  --mount source=docker-data,target=/app \\\n  ubuntu:latest\n6cef681d9d3b06788d0f461665919b3bf2d32e6c6cc62e2dbab02b05e77769f4\n```\n\n#### How Do You [Configure Logging](https://docs.docker.com/config/containers/logging/configure/) for a Docker Container?\n\nYou can configure logging for a Docker container by selecting the type of log driver, in this example `json-file`, and whether it is blocking or non-blocking.  This example shows a configuration that uses `json-file` and `mode=non-blocking` for an Ubuntu container.  The `non-blocking` mode ensures that the application won't fail in a non-deterministic manner.  Make sure to read the [Docker logging guide](https://docs.docker.com/config/containers/logging/configure/) on different logging options.\n\n```bash\n>  /tmp docker run -it --log-driver json-file --log-opt mode=non-blocking ubuntu \nroot@551f89012f30:/#\n``` \n\n#### How do You Map Ports to the External Host?\n\nThe Docker container has an internal set of ports that [must be exposed to the host and mapped](https://docs.docker.com/engine/reference/commandline/port/).  One of the easiest ways to see what ports are exposed to the host is by running the `docker port <container name>` command.  Here is an example of what that looks like against a `foo` named container.\n\n```bash\n$ docker port foo\n7000/tcp -> 0.0.0.0:2000\n9000/tcp -> 0.0.0.0:3000\n```\n\nWhat about actually mapping the ports?  You can do that using the `-p` flag as shown.  You can read more about [Docker `run` flags here](https://docs.docker.com/engine/reference/commandline/run/).\n\n```bash\ndocker run -p 127.0.0.1:80:9999/tcp ubuntu bash\n```\n\n#### What about Configuring Memory, CPU and GPU?\n\nYou can configure docker `run` to accept flags for setting Memory, CPU and GPU.  You can read [more about it here](https://docs.docker.com/config/containers/resource_constraints/) in the official documentation.  Here is a brief example of setting the CPU.\n\n```bash\ndocker run -it --cpus=\".25\" ubuntu /bin/bash\n```\n\nThis tells this container to use at max only 25% of the CPU every second.",
              "instructor_notes": ""
            },
            {
              "id": 900417,
              "key": "2de81326-cd82-42ec-8785-39f6b7ccbc7d",
              "title": "App Start",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2de81326-cd82-42ec-8785-39f6b7ccbc7d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What can go wrong with an application starting in a container?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "The container may need to write to the filesystem",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Logging may need to be configured",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "A container may need to have CPU, Disk, and Memory requirements configured",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "It may need ports exposed internal, externally and in a cluster",
                    "is_correct": false
                  },
                  {
                    "id": "rbk5",
                    "text": "All of the above",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 859577,
          "key": "1e71b30c-3709-438c-a761-b6b8bd0b0bc9",
          "title": "Exercise: Build and Deploy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1e71b30c-3709-438c-a761-b6b8bd0b0bc9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900694,
              "key": "1d0a78cd-fe6f-499c-82df-7427f629cb58",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Build and Deploy\n\nNow it's finally time to build our container and check out the deployed app!",
              "instructor_notes": ""
            },
            {
              "id": 859578,
              "key": "ac97d4bc-29ad-4ff2-baba-6fe26041179e",
              "title": "ND9991 C04 L03 A06 Code Example",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EmF8l9Ew2i4",
                "china_cdn_id": "EmF8l9Ew2i4.mp4"
              }
            },
            {
              "id": 900695,
              "key": "d51ee073-fd4c-4e38-af93-e17f8e6c9b6b",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Instructions\n\n- Run `docker build --tag=api .` from the directory containing your `Dockerfile`. If you want to use a different tag name, feel free to do so.\n- Wait for awhile as your Docker image is built (*note:* you are welcome to get a jump start on the next exercise, if desired, while this completes).\n- Use `docker image ls` to make sure your new Docker image is shown. You won't see the other containers in Noah's video - those are all of his other Docker images on his computer.\n- Run `docker run -p 8000:5001 api`. If you changed the tag name in the first step, make sure to replace `api` here with your tag name.  Note above that the `-p` notes port 5001 from the Docker container (as specified in `web.py` for our flask app) is exposed on port 8000 on the host computer. \n- The container will tell us the Flask app is running on port 5001, but since we exposed port 8000 on our host to it, we will actually access the running app using port 8000. We haven't looked at Swagger documentation before here, but you can access it at `http://localhost:8000` in your browser when the docker container is running. Note that Swagger is part of the implementation of this specific Flask app - if you make your own Flask app, Swagger won't be included unless you include it in your own code.\n- Test out one of the Swagger commands from the running containerized app.\n- *HINT: * Remember that you can access the underlying container by opening up a web browser on your host machine and typing in `http://localhost:8000`.   The host container maps a port to the internal container and this is how the web service is exposed to your browser.\n",
              "instructor_notes": ""
            },
            {
              "id": 900696,
              "key": "5130dcbf-cd09-4e45-a667-287874b9949e",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### More on Swagger\n\n[Swagger](https://swagger.io/solutions/api-documentation/) helps provide automated documentation for your APIs using the [OpenAPI specifications](https://github.com/OAI/OpenAPI-Specification). \n\nCheck out an example of a Swagger-based API [here](https://petstore.swagger.io/#/). Udacity actually uses Swagger for its internal-facing APIs!",
              "instructor_notes": ""
            },
            {
              "id": 900697,
              "key": "5f55c018-f261-4aea-abe8-ab03cf1e0ae1",
              "title": "Exposing Docker ports",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5f55c018-f261-4aea-abe8-ab03cf1e0ae1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following would allow you to look at a deployed Flask app that uses port 6001 by visiting `http://localhost:8080`?",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "`docker run -p 6001:8080 my_app`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "`docker run 8080:6001 my_app`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk3",
                    "text": "`docker run 6001:8080 my_app`",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "`docker run -p 8080:6001 my_app`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 1094286,
              "key": "7f2518a1-baae-4de1-a79d-ef15936181db",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Code Example\n- Data Engineering API Example by Noah: [LINK](https://github.com/udacity/DevOps_Microservices/tree/master/Lesson-3-Containerization)\n\nThe `run_docker.py` file in the video is included below:\n\n```\n#!/usr/bin/env bash\n\n# Build image\ndocker build --tag=api .\n\n# List docker images\ndocker image ls\n\n# Run flask app\ndocker run -p 8000:5001 api\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900418,
          "key": "4f930500-b3c7-4475-9dbc-817b23f34958",
          "title": "Exercise: Containerize an App",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f930500-b3c7-4475-9dbc-817b23f34958",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900419,
              "key": "69946289-c64e-4cda-ade6-73fb8d93094a",
              "title": "Untitled",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise: Containerize an App\n\nContainers are a powerful mechanism to reuse code from experts.  Test your knowledge of the power of containers in the following exercise by building a container and containerizing an app from scratch!\n\n### Instructions\n\n- Create an empty `Dockerfile` using the `touch` command\n- Use the `FROM` command and reference the latest version of Python [here](https://hub.docker.com/_/python).\n- Include the [\"Hello World\" Flask example](https://palletsprojects.com/p/flask/) as an app within your container\n  - Copy any relevant directories and libraries in the `Dockerfile`\n  - Make sure any relevant requirements are installed in the `Dockerfile`\n  - Expose the port from the Flask example oin the `Dockerfile` - make sure you check which one is used by the example!\n  - Have your `Dockerfile` run the relevant commands for your app\n- Build your container \n- Run the container, opening up a bash shell\n- Verify the correct version of Python is installed: `python --version`\n\n### Tips\n\nBelow are potential options for building and running your container.\n\nTo build your container, if tagging your container as `my-python-app`:\n  - `$ docker build -t my-python-app .`\n\nTo run the container, given `my-python-app` as the image tag and `my-running-app` as the container name:\n  - `$ docker run -it --rm --name my-running-app my-python-app`",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 859579,
          "key": "3f81f8d7-61a8-4909-8d74-ce34d68337e1",
          "title": "Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3f81f8d7-61a8-4909-8d74-ce34d68337e1",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 980757,
              "key": "a542550e-a912-4fbf-bc6c-2c8648de6fdd",
              "title": "Summary Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Lesson Summary",
              "instructor_notes": ""
            },
            {
              "id": 859580,
              "key": "f836a995-c9db-456c-92b8-81867fe5944f",
              "title": "ND9991 C04 L03 A07 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "V4Poy77lzUY",
                "china_cdn_id": "V4Poy77lzUY.mp4"
              }
            },
            {
              "id": 980756,
              "key": "beaf9e7a-aa64-4603-8626-08f3068100f9",
              "title": "Key Terms",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Key Terms:\n\n#### Swagger\n\nA swagger tool is an open-source framework that simplifies the creation of API documentation.\n\n#### Data Engineering\n\nData Engineering is the process of automating the flow of data.\n\n#### Ports\n\nA port is a network communication endpoint.  An example of a port is a web service running on port 80 via the protocol HTTP.\n\n#### JSON\n\nJSON stands for JavaScript Object Notation, and it is a lightweight, human-readable data format used heavily in web services.\n\n*Source: https://noahgift.github.io/cloud-data-analysis-at-scale/topics/key-terms*",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}