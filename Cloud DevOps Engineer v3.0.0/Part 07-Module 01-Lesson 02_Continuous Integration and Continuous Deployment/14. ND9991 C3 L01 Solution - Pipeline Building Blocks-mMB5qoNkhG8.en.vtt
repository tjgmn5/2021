WEBVTT
Kind: captions
Language: en

00:00:01.370 --> 00:00:06.150
It's a very important skill to be able to think abstractly about something

00:00:06.150 --> 00:00:10.380
like a CICD pipeline before you get into the weeds.

00:00:10.380 --> 00:00:13.710
It also helps you come down to earth when it's time to

00:00:13.710 --> 00:00:17.715
talk to non-technical people about what's happening in the pipeline.

00:00:17.715 --> 00:00:20.475
Let's take a look at the diagram that I came up with

00:00:20.475 --> 00:00:23.950
and see what you might have done differently.

00:00:24.140 --> 00:00:27.875
In my diagram, I decided to start with push,

00:00:27.875 --> 00:00:33.460
which to me is a developer pushing code into the repository.

00:00:33.460 --> 00:00:39.740
Then CICD is going to take over by actually pulling that out of git and then building it.

00:00:39.740 --> 00:00:42.700
Remember, building is creating that artifact.

00:00:42.700 --> 00:00:46.010
Then I'm going to Run some unit tests on

00:00:46.010 --> 00:00:47.600
my code to check to make sure that

00:00:47.600 --> 00:00:51.035
my business logic is right and that things are as I expect,

00:00:51.035 --> 00:00:54.245
then I'm going to do some analysis on this code.

00:00:54.245 --> 00:00:55.910
Now each one of these,

00:00:55.910 --> 00:00:58.055
I don't even have a branch on these,

00:00:58.055 --> 00:01:03.185
but each one of these actually does pass through one of these decision blocks,

00:01:03.185 --> 00:01:05.605
because if the build fails,

00:01:05.605 --> 00:01:11.450
it should eventually trigger a failure and an alert in slack for the team.

00:01:11.450 --> 00:01:13.250
If a unit test fails, same thing,

00:01:13.250 --> 00:01:17.255
it should eventually go to slack to let the team know and stop the build from there.

00:01:17.255 --> 00:01:19.355
No more building after a failure.

00:01:19.355 --> 00:01:21.585
Same thing for analysis.

00:01:21.585 --> 00:01:26.435
Just imagine that this decision block is on each one of these things.

00:01:26.435 --> 00:01:29.225
If the analysis passes,

00:01:29.225 --> 00:01:31.870
then we want to know whether it's Master or not.

00:01:31.870 --> 00:01:33.915
If it's not Master,

00:01:33.915 --> 00:01:36.660
then we want to go ahead and stop there.

00:01:36.660 --> 00:01:38.245
The reason why we do that,

00:01:38.245 --> 00:01:42.250
in my team is because we treat Master as the production version,

00:01:42.250 --> 00:01:48.420
and so we don't want to deploy unless the version is actually Master.

00:01:48.420 --> 00:01:50.690
If we're developing a feature branch,

00:01:50.690 --> 00:01:51.980
or we're doing something else,

00:01:51.980 --> 00:01:54.470
we just want to Run the build, the unit test,

00:01:54.470 --> 00:01:57.350
and the analysis, we don't want to deploy anything else.

00:01:57.350 --> 00:01:59.345
But if it is Master,

00:01:59.345 --> 00:02:03.520
then we want to create the infrastructure.

00:02:03.520 --> 00:02:04.985
So we're going to have a job for that.

00:02:04.985 --> 00:02:06.030
Each one of these is a job.

00:02:06.030 --> 00:02:08.060
Again, if it doesn't pass,

00:02:08.060 --> 00:02:09.920
then we are going to roll back to destroy

00:02:09.920 --> 00:02:13.960
the new stack and revert any migrations that had Run.

00:02:13.960 --> 00:02:16.040
Then we're going to, if it did pass,

00:02:16.040 --> 00:02:17.960
we're going to configure the infrastructure.

00:02:17.960 --> 00:02:20.240
Again, it's pretty much every time.

00:02:20.240 --> 00:02:24.215
If it's no, then we're going to stop everything and notify and roll back.

00:02:24.215 --> 00:02:25.430
But if it did pass,

00:02:25.430 --> 00:02:28.325
then we are going to migrate our database,

00:02:28.325 --> 00:02:32.800
and then we're going to do some preparation where we're going to rebuild the front end.

00:02:32.800 --> 00:02:35.150
This is something specific to my application because

00:02:35.150 --> 00:02:37.745
we want to rebuild the front end with

00:02:37.745 --> 00:02:43.565
the new API_URL because since that back end URL is going to change every single time,

00:02:43.565 --> 00:02:47.135
and then we're going to deploy and copy the files.

00:02:47.135 --> 00:02:49.850
If that passes, then great.

00:02:49.850 --> 00:02:53.770
If it didn't, it's going to roll back and it's going to eventually notify us in slack.

00:02:53.770 --> 00:02:55.740
But if it does pass,

00:02:55.740 --> 00:02:57.750
then we do some smoke tests.

00:02:57.750 --> 00:03:00.110
For me, smoke tests can be super simple,

00:03:00.110 --> 00:03:01.790
or they can be pretty complex.

00:03:01.790 --> 00:03:04.405
The simplest form would be just with a curl.

00:03:04.405 --> 00:03:08.510
I'm going to curl and hit a website to see if it's doing what I expect it to do.

00:03:08.510 --> 00:03:15.695
If that passes, then I'm going to switch to my new distro in my CDN,

00:03:15.695 --> 00:03:18.505
or I'm going to make the switch in the load balancer.

00:03:18.505 --> 00:03:20.690
Then when I'm finished with that,

00:03:20.690 --> 00:03:25.970
I'm going to destroy the old stack to save on some infrastructure costs.

00:03:25.970 --> 00:03:29.605
Then I'm going to notify the team of the success.

00:03:29.605 --> 00:03:34.955
That completes the entire circle of this CD diagram.

00:03:34.955 --> 00:03:37.385
I wonder what yours looked like.

00:03:37.385 --> 00:03:39.920
How different was George from mine?

00:03:39.920 --> 00:03:43.110
What would you have done differently than I did?

