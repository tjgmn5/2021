WEBVTT
Kind: captions
Language: en

00:00:02.120 --> 00:00:06.720
Just like design patterns in software engineering prevent us from

00:00:06.720 --> 00:00:11.250
reinventing the wheel when we're faced with a new problem to solve,

00:00:11.250 --> 00:00:16.290
we have some deployment strategies that have been defined,

00:00:16.290 --> 00:00:21.300
tested out, and proven by those who have already blazed this trail.

00:00:21.300 --> 00:00:26.430
So let's take a look at four very popular deployment strategies.

00:00:26.430 --> 00:00:28.860
Let's talk about big bang deployment,

00:00:28.860 --> 00:00:32.310
also known as, we don't really have a deployment strategy.

00:00:32.310 --> 00:00:36.390
In big bang, you simply replace A with B,

00:00:36.390 --> 00:00:39.120
no intermediaries, no fail saves,

00:00:39.120 --> 00:00:41.155
just throwing caution to the wind.

00:00:41.155 --> 00:00:46.280
For example, your current production version is live and serving customers,

00:00:46.280 --> 00:00:50.600
then one day you have a new version you'd like to deploy to production.

00:00:50.600 --> 00:00:54.890
So you remove or disable your production version,

00:00:54.890 --> 00:00:58.330
which means you stop serving customers altogether,

00:00:58.330 --> 00:01:06.575
then you copy over your new version and then bring production backup.

00:01:06.575 --> 00:01:10.355
One of the pros to big bang is that it

00:01:10.355 --> 00:01:14.750
is the simplest deployment strategy of all to perform.

00:01:14.750 --> 00:01:18.740
On the other hand, one of the biggest cons to big bang is

00:01:18.740 --> 00:01:23.330
the downtime while you're replacing the old version with the new version.

00:01:23.330 --> 00:01:27.560
Also, big bang encourages teams to batch

00:01:27.560 --> 00:01:32.150
up their changes until a deployment is large enough to justify the costs.

00:01:32.150 --> 00:01:35.360
Because of the bigger batches of changes,

00:01:35.360 --> 00:01:38.995
it also requires more testing and coordination.

00:01:38.995 --> 00:01:44.010
Because of all that, features go to the market very slowly.

00:01:44.010 --> 00:01:47.150
In blue green deployment strategy,

00:01:47.150 --> 00:01:51.430
there is a router that is directing traffic to our old version.

00:01:51.430 --> 00:01:54.250
In this case, the blue version.

00:01:54.250 --> 00:01:58.850
The dev team has a new version to push to production,

00:01:58.850 --> 00:02:01.415
which will be our green version.

00:02:01.415 --> 00:02:05.620
So we build a new production version infrastructure and all,

00:02:05.620 --> 00:02:08.545
deploy the changes and test,

00:02:08.545 --> 00:02:11.240
if everything checks out from our smoke tests,

00:02:11.240 --> 00:02:17.555
we can promote the green version by telling our router to switch from blue to green.

00:02:17.555 --> 00:02:19.370
If there's any problem at all,

00:02:19.370 --> 00:02:22.700
we can quickly and easily switch back to blue.

00:02:22.700 --> 00:02:25.835
Once we're sure we don't need blue anymore,

00:02:25.835 --> 00:02:30.035
we can actually remove it to cut down on costs.

00:02:30.035 --> 00:02:34.640
One of the good things about blue-green deployment strategy is that it allows you

00:02:34.640 --> 00:02:39.025
to test a new production deployment without disturbing the old one.

00:02:39.025 --> 00:02:41.615
Plus, if it doesn't work for you,

00:02:41.615 --> 00:02:43.675
you can just do a fast roll back,

00:02:43.675 --> 00:02:47.105
and the impact on application users is pretty low.

00:02:47.105 --> 00:02:49.820
One downside is that there are

00:02:49.820 --> 00:02:53.720
higher infrastructure costs when you have two production versions running,

00:02:53.720 --> 00:02:56.855
depending on how long you keep them both running.

00:02:56.855 --> 00:03:00.770
How about canary deployment strategy?

00:03:00.770 --> 00:03:04.085
You may have heard it called rolling update.

00:03:04.085 --> 00:03:06.980
The idea here is, like blue green,

00:03:06.980 --> 00:03:10.955
you'll have two versions of production running side-by-side.

00:03:10.955 --> 00:03:13.195
Also like blue green,

00:03:13.195 --> 00:03:19.985
we will have some router that is able to direct traffic to either old or new version.

00:03:19.985 --> 00:03:24.770
The router will slowly begin to direct a fraction of traffic to

00:03:24.770 --> 00:03:29.435
the new version while the development team watches for problems.

00:03:29.435 --> 00:03:32.915
As the deployment continues over a period of time,

00:03:32.915 --> 00:03:35.660
the router sends more and more traffic to

00:03:35.660 --> 00:03:39.140
the new version until the old version is no longer even used.

00:03:39.140 --> 00:03:43.474
Then once you're sure the old version isn't needed anymore,

00:03:43.474 --> 00:03:45.690
we can just clean it up.

00:03:45.910 --> 00:03:49.730
The canary deployment strategy is

00:03:49.730 --> 00:03:54.335
useful if you want to roll out changes to users little by little.

00:03:54.335 --> 00:03:57.125
If there's a problem, you can just stop the rollback

00:03:57.125 --> 00:04:01.055
and you've affected only a small portion of users.

00:04:01.055 --> 00:04:05.120
However, infrastructure costs are definitely higher than

00:04:05.120 --> 00:04:09.995
big bang because you will have two versions of production running for a period of time.

00:04:09.995 --> 00:04:13.660
It's also quite a bit more difficult to set up.

00:04:13.660 --> 00:04:17.625
A fourth strategy is A/B testing.

00:04:17.625 --> 00:04:19.404
It's similar to canary,

00:04:19.404 --> 00:04:23.000
but instead of routing traffic to just a fraction of users,

00:04:23.000 --> 00:04:27.920
we'll have the option to route traffic for either version based on

00:04:27.920 --> 00:04:33.200
user characteristics like age, favorite color, gender.

00:04:33.200 --> 00:04:34.685
In my example here,

00:04:34.685 --> 00:04:40.430
the company wants to try out a new version on women first to see how they like it.

00:04:40.430 --> 00:04:42.305
If they don't like it,

00:04:42.305 --> 00:04:46.190
they can easily switch those women back to the old version.

00:04:46.190 --> 00:04:50.600
If that group of users likes the new version or it doesn't have any problems,

00:04:50.600 --> 00:04:54.785
we could potentially roll out the new version to the rest of the users.

00:04:54.785 --> 00:04:58.880
We could even clean up the old version to cut out some costs.

00:04:58.880 --> 00:05:04.640
One pro that I'll mention about this A/B testing is that it helps you get

00:05:04.640 --> 00:05:10.895
feedback from segments of users on new versions while leaving other users in peace.

00:05:10.895 --> 00:05:12.800
There are a few downsides, of course.

00:05:12.800 --> 00:05:18.380
For example, this is potentially a very costly method of user acceptance testing.

00:05:18.380 --> 00:05:23.300
There are other ways to do A/B testing that don't require full production deployments,

00:05:23.300 --> 00:05:27.175
but you should look at all of this on a case-by-case basis.

00:05:27.175 --> 00:05:31.355
A/B testing is also quite a bit more difficult to set up than canary,

00:05:31.355 --> 00:05:34.175
which is already quite a challenge to set up.

00:05:34.175 --> 00:05:39.810
Its up to you to decide which type of deployment is right for your company and your team.

