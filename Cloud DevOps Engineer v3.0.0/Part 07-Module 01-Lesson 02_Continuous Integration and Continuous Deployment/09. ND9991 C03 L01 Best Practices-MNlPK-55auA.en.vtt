WEBVTT
Kind: captions
Language: en

00:00:01.140 --> 00:00:04.540
Let's spend a little bit of time talking about how you can

00:00:04.540 --> 00:00:07.355
get the most out of your CI/CD implementation.

00:00:07.355 --> 00:00:09.630
We'll start with fail-fast.

00:00:09.630 --> 00:00:13.810
The phrase fail fast has been picking up steam in the past few years.

00:00:13.810 --> 00:00:16.490
I hear it more and more in business circles.

00:00:16.490 --> 00:00:20.335
It's no longer acceptable to hide or be ashamed of failure.

00:00:20.335 --> 00:00:23.020
In fact, it's much more popular to hold up

00:00:23.020 --> 00:00:27.385
your failures as trophies along the way to success.

00:00:27.385 --> 00:00:30.520
The first time I heard the phrase fail fast,

00:00:30.520 --> 00:00:33.845
I was working as a developer in my first Agile team.

00:00:33.845 --> 00:00:39.520
It seems strange and refreshing to be encouraged to fail quickly so that I could learn.

00:00:39.520 --> 00:00:44.165
In a way, failures had a way of turning into celebrations.

00:00:44.165 --> 00:00:50.555
It's not just Cloud developers and start-up CEOs that can benefit from failing fast.

00:00:50.555 --> 00:00:52.420
Your code can too.

00:00:52.420 --> 00:00:56.480
You probably realize already that the cost of software defects increases

00:00:56.480 --> 00:01:00.575
exponentially with every minute that they're allowed to exist.

00:01:00.575 --> 00:01:03.830
The faster we can bring your code failures to light,

00:01:03.830 --> 00:01:06.065
the faster you can fix them.

00:01:06.065 --> 00:01:11.240
A failure anywhere in your CI/CD pipeline is actually a success.

00:01:11.240 --> 00:01:13.925
But the earlier the build breaks, the better.

00:01:13.925 --> 00:01:17.245
Fail-fast saves your company money.

00:01:17.245 --> 00:01:19.995
Peter Drucker is credited with saying,

00:01:19.995 --> 00:01:21.485
''If you can't measure it,

00:01:21.485 --> 00:01:23.315
you can't improve it."

00:01:23.315 --> 00:01:25.460
Let's remove those negatives.

00:01:25.460 --> 00:01:27.230
If you can measure it,

00:01:27.230 --> 00:01:29.255
you can improve it.

00:01:29.255 --> 00:01:33.970
Most teams would agree that improving code quality is a good thing.

00:01:33.970 --> 00:01:39.110
Therefore, if we want to improve code quality, let's measure it.

00:01:39.110 --> 00:01:41.600
We certainly can measure

00:01:41.600 --> 00:01:45.515
certain aspects of software quality with today's excellent tools.

00:01:45.515 --> 00:01:47.170
Now, watch out.

00:01:47.170 --> 00:01:49.380
You'll find some controversy here.

00:01:49.380 --> 00:01:53.810
It's true that top grades from unit test coverage and

00:01:53.810 --> 00:01:58.820
static code analysis tools will not necessarily mean high-quality.

00:01:58.820 --> 00:02:04.250
But I believe it is appropriate to say that low grades from unit test coverage and

00:02:04.250 --> 00:02:09.650
static code analysis do equal potentially low quality.

00:02:09.650 --> 00:02:13.790
Either way, we should be measuring our code quality so that we can see

00:02:13.790 --> 00:02:15.740
the positive effects of

00:02:15.740 --> 00:02:19.925
our improvement work or the negative effects of our technical debt.

00:02:19.925 --> 00:02:24.740
The next practice is maintaining one road to production,

00:02:24.740 --> 00:02:28.420
and that road is CI/CD, of course.

00:02:28.420 --> 00:02:33.920
Production is probably one of the most important concepts in software development,

00:02:33.920 --> 00:02:38.440
since every commit is focused on reaching production at some point.

00:02:38.440 --> 00:02:42.140
It makes sense that the process to deploy new code to

00:02:42.140 --> 00:02:45.980
production should be one that is free of careless mistakes,

00:02:45.980 --> 00:02:51.755
consistently successful, and backed up by a reliable rollback plan when needed.

00:02:51.755 --> 00:02:57.260
This is a pretty tall order for a team of mere human Cloud developers,

00:02:57.260 --> 00:03:01.110
but this is not some unattainable Holy Grail.

00:03:01.900 --> 00:03:05.885
CI/CD, once configured and scripted properly,

00:03:05.885 --> 00:03:12.445
can handle flawless production deployments like this thousands of times a day.

00:03:12.445 --> 00:03:18.395
However, if your team allows any other person or process to meddle with production,

00:03:18.395 --> 00:03:20.839
once CI/CD is handling deployments,

00:03:20.839 --> 00:03:24.340
the system will eventually fall to conflicts.

00:03:24.340 --> 00:03:27.905
For automated production deployments to work consistently,

00:03:27.905 --> 00:03:32.735
your CI/CD Server needs to be the only road to production.

00:03:32.735 --> 00:03:37.490
Some parts of the software development lifecycle don't make sense to automate,

00:03:37.490 --> 00:03:40.985
like feature grooming, planning meetings,

00:03:40.985 --> 00:03:45.340
writing code or some forms of exploratory testing.

00:03:45.340 --> 00:03:49.400
On the other hand, tasks like running unit tests, compiling,

00:03:49.400 --> 00:03:52.055
and linking are important to the health of

00:03:52.055 --> 00:03:56.584
a software product and perfect candidates for automation.

00:03:56.584 --> 00:03:59.980
How about tasks that not all team members like to run?

00:03:59.980 --> 00:04:03.390
For example, running static analysis and security checks.

00:04:03.390 --> 00:04:07.390
Those are popular items to skip when you're in a hurry.

00:04:07.390 --> 00:04:10.155
How about our deployment checklist?

00:04:10.155 --> 00:04:13.490
Miss a step or miscopy an environment variable,

00:04:13.490 --> 00:04:15.965
and poof, there goes production.

00:04:15.965 --> 00:04:17.585
The point here is,

00:04:17.585 --> 00:04:21.070
if it can be automated, automate it.

00:04:21.070 --> 00:04:25.340
Now, it's definitely not a good practice to use web UI tools

00:04:25.340 --> 00:04:29.315
to manage configuration where it's hidden away from the team,

00:04:29.315 --> 00:04:31.910
far from the code that it affects.

00:04:31.910 --> 00:04:37.655
CI/CD configuration, just like your infrastructure configuration should in code.

00:04:37.655 --> 00:04:40.685
The only exception to this might be your secrets,

00:04:40.685 --> 00:04:44.935
like connection strings, SSH keys or API keys.

00:04:44.935 --> 00:04:47.070
But once in code,

00:04:47.070 --> 00:04:50.915
your CI/CD configuration and infrastructure configuration

00:04:50.915 --> 00:04:55.130
should be stored in the same repository as your application code.

00:04:55.130 --> 00:05:00.155
This way, your configuration code will be versioned just like the rest of your code,

00:05:00.155 --> 00:05:02.990
and it will be accessible to your entire team.

00:05:02.990 --> 00:05:06.645
Configuration in code will never be lost or deleted.

00:05:06.645 --> 00:05:09.320
Every change to your configuration will leave

00:05:09.320 --> 00:05:14.040
breadcrumbs to help you troubleshoot issues more quickly.

