WEBVTT
Kind: captions
Language: en

00:00:01.820 --> 00:00:09.795
So here we're looking at a working pipeline in a tool called GitLab CI/CD.

00:00:09.795 --> 00:00:14.640
This is actually a working pipeline that at the time of this recording

00:00:14.640 --> 00:00:19.200
was run 20 hours ago, so pretty recently.

00:00:19.200 --> 00:00:23.040
Can you spot any stages here?

00:00:23.040 --> 00:00:24.900
It looks like we can already.

00:00:24.900 --> 00:00:31.880
So we've got build and we've got test, we've got analysis.

00:00:31.880 --> 00:00:37.985
This team decided to split deploy into two different stages.

00:00:37.985 --> 00:00:44.275
So they've got a Deploy and they've got Deploy-db and that's totally fine.

00:00:44.275 --> 00:00:48.140
They could have even added more stages and that would have been fine.

00:00:48.140 --> 00:00:50.540
The point is again, not to box you in,

00:00:50.540 --> 00:00:54.705
but to help you to maintain your pipelines and

00:00:54.705 --> 00:00:59.190
in a really understandable way for future developers.

00:00:59.190 --> 00:01:03.110
Now, let's take a look at some of the build jobs.

00:01:03.110 --> 00:01:10.720
Each one of these represents a job, build-backend-dev, build-frontend-dev,

00:01:10.720 --> 00:01:15.950
build_domain, and over in the test area we've got end-to-end tests,

00:01:15.950 --> 00:01:18.920
or e2e_tests, test the backend,

00:01:18.920 --> 00:01:21.420
test the domain, test the frontend.

00:01:21.950 --> 00:01:27.670
Obviously, these are test jobs and they're testing different areas.

00:01:27.670 --> 00:01:31.380
Check_test, it concatenates are right there,

00:01:31.380 --> 00:01:37.180
but you can see down in the tool tip below, check-test-coverage.

00:01:37.180 --> 00:01:41.320
We can see that this is all about migrating a database,

00:01:41.320 --> 00:01:43.390
and we're going to deploy the backend,

00:01:43.390 --> 00:01:44.870
and we're going to deploy the frontend.

00:01:44.870 --> 00:01:49.040
So did I make my point yet about how important these names are?

00:01:49.040 --> 00:01:51.060
I don't need to tell you exactly what's going on,

00:01:51.060 --> 00:01:56.555
I don't need to click into this job to try to figure out what's going on with this.

00:01:56.555 --> 00:01:58.280
I already know, you know it too,

00:01:58.280 --> 00:02:04.475
this is about building the backend and I'm guessing the development environment.

00:02:04.475 --> 00:02:10.200
This is all about running domain level tests, backend level tests.

00:02:10.200 --> 00:02:12.500
So the names are incredibly important because they

00:02:12.500 --> 00:02:14.810
help us go straight to the place that we need to look.

00:02:14.810 --> 00:02:20.100
Now, let's look at the code that is running this.

00:02:21.250 --> 00:02:26.490
We'll just find our CI/CD yml file.

00:02:26.490 --> 00:02:30.930
Now this is the code that is running the entire pipeline.

00:02:31.490 --> 00:02:34.450
You can see here there's an include section.

00:02:34.450 --> 00:02:38.530
This is a way that GitLab provides us to be able to include

00:02:38.530 --> 00:02:44.475
different files so that we can split up the CI/CD configuration into different files.

00:02:44.475 --> 00:02:46.615
You can see here stages,

00:02:46.615 --> 00:02:51.015
these are where it is defining those stages.

00:02:51.015 --> 00:02:53.010
I've got something here,

00:02:53.010 --> 00:02:55.930
I'm guessing this is a reusable piece and we got some variables.

00:02:55.930 --> 00:03:02.110
So really the meet of what we're looking at is actually in these subfiles,

00:03:02.110 --> 00:03:04.050
these included file. So let's take a look.

00:03:04.050 --> 00:03:09.600
There's a ci/deploy/backend and then deploy_backend_dev.

00:03:09.600 --> 00:03:14.810
So let's take a look at that, guessing that's a file where we're going to find some jobs.

00:03:15.930 --> 00:03:21.255
That's the ci folder then builds,

00:03:21.255 --> 00:03:25.020
then we'll go to backend and build_backend_dev.

00:03:25.020 --> 00:03:27.335
Now, this is something else that's interesting,

00:03:27.335 --> 00:03:30.550
like the name here build_backend_dev,

00:03:30.550 --> 00:03:33.290
the developers have chosen to make the names of

00:03:33.290 --> 00:03:36.170
the files consistent with the names of the jobs.

00:03:36.170 --> 00:03:37.490
That's incredibly helpful.

00:03:37.490 --> 00:03:39.800
Like I'm not even a developer on this project,

00:03:39.800 --> 00:03:45.470
I was able to come to it and go straight to the yml file that I'm looking for.

00:03:45.470 --> 00:03:47.360
I can see here there's an image,

00:03:47.360 --> 00:03:51.689
a docker image that I'm able to use some services.

00:03:51.689 --> 00:03:57.625
It's going to run some scripts here before it runs the real script which is here.

00:03:57.625 --> 00:04:01.760
We can see that it's subdividing this into three sections.

00:04:01.760 --> 00:04:05.700
I've got three lines here, docker, docker, docker.

00:04:06.290 --> 00:04:10.130
I guess it's only going to run on

00:04:10.130 --> 00:04:14.150
branches and we don't want it to run on master and staging.

00:04:14.150 --> 00:04:20.050
Basically, you don't have to understand what all is going on in GitLab CI,

00:04:20.050 --> 00:04:22.040
and you don't have to understand this code,

00:04:22.040 --> 00:04:26.750
but I want you to understand this is a general way that a build system

00:04:26.750 --> 00:04:33.340
works and how it separates things into stages, jobs, and steps.

