{
  "data": {
    "lesson": {
      "id": 847129,
      "key": "b2bb0cc5-aa4d-48e2-aa47-8b5946e579b2",
      "title": "Capstone",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In the capstone project, students define the scope of the project and select the right deployment strategy based on different business requirements.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "3e015882-9cd0-481f-9027-a6e70f676111",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "Capstone",
        "description": "In the capstone project, each project is unique to the student. You’ll build a CI/CD pipeline for a microservices application for different deployment strategies. Students define the scope of the project and  select the right deployment strategy based on different business requirements.\n\nCongratulations, you have developed an amazing array of skills in this course, and demonstrated them in completing this project! Make sure to add this project to your professional portfolio!\n\nBefore you submit your project, please make sure you have checked all of your work against the project [rubric](https://review.udacity.com/#!/rubrics/2577/view). If you find that you have not satisfied any area of the rubric, please revise your work before you submit it. This rubric is what your reviewer will be using to assess your work.\n\nTo submit your project: \nYou should have taken the screenshots required in the project directions, and created a text file with a link to your GitHub repo that contains the code for your project. Zip up all of these files together, and submit them as one file for your project submission. \n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2577",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 908162,
          "key": "cc27431a-6dcb-4d48-8a8a-ddf5823bf295",
          "title": "Capstone Project Overview",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cc27431a-6dcb-4d48-8a8a-ddf5823bf295",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 908163,
              "key": "54c50705-ace3-49a3-994f-e29b1aa29c9d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this project you will apply the skills and knowledge which were developed throughout the Cloud DevOps Nanodegree program. These include: \n- Working in AWS\n- Using Jenkins or Circle CI to implement Continuous Integration and Continuous Deployment\n- Building pipelines\n- Working with Ansible and CloudFormation to deploy clusters\n- Building Kubernetes clusters\n- Building Docker containers in pipelines\n\nAs a capstone project, the directions are rather more open-ended than they were in the previous projects in the program. You will also be able to make some of your own choices in this capstone, for the type of deployment you implement, which services you will use, and the nature of the application you develop.\n\nYou will develop a CI/CD pipeline for micro services applications with either blue/green deployment or rolling deployment. You will also develop your Continuous Integration steps as you see fit, but must at least include typographical checking (aka “linting”). To make your project stand out, you may also choose to implement other checks such as security scanning, performance testing, integration testing, etc.!\n\nOnce you have completed your Continuous Integration you will set up Continuous Deployment, which will include:\n- Pushing the built Docker container(s) to the Docker repository (you can use AWS ECR, create your own custom Registry within your cluster, or another 3rd party Docker repository) ; and \n- Deploying these Docker container(s) to a small Kubernetes cluster. For your Kubernetes cluster you can either use AWS Kubernetes as a Service, or build your own Kubernetes cluster. To deploy your Kubernetes cluster, use either Ansible or Cloudformation. Preferably, run these from within Jenkins or Circle CI as an independent pipeline. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 908164,
          "key": "f2957ed1-2b4b-443e-a515-48d9798bf965",
          "title": "Project Directions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f2957ed1-2b4b-443e-a515-48d9798bf965",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 908165,
              "key": "4d20c10b-2583-4162-9386-815ef9381db4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Steps in Completing Your Project\n#### Step 1: Propose and Scope the Project\n- Plan what your pipeline will look like. \n- Decide which options you will include in your Continuous Integration phase. Use either Circle CI or Jenkins.\n- Pick a deployment type - either rolling deployment or blue/green deployment. \n- For the Docker application you can either use an application which you come up with, or use an open-source application pulled from the Internet, or if you have no idea, you can use an Nginx “Hello World, my name is (student name)” application. \n\n#### Step 2: Use Jenkins or Circle CI, and implement blue/green or rolling deployment. \n- If you're using Jenkins, create your Jenkins master box and install the plugins you will need. \n- If you're using Circle CI, set up your circle CI account and connect your git repository.\n- Set up your environment to which you will deploy code.\n\n#### Step 3: Pick AWS Kubernetes as a Service, or build your own Kubernetes cluster.\n- Use Ansible or CloudFormation to build your “infrastructure”; i.e., the Kubernetes Cluster.\n- It should create the EC2 instances (if you are building your own), set the correct networking settings, and deploy software to these instances. \n- As a final step, the Kubernetes cluster will need to be initialized. The Kubernetes cluster initialization can either be done by hand, or with Ansible/Cloudformation at the student’s discretion.\n\n#### Step 4: Build your pipeline\n- Construct your pipeline in your GitHub repository.\n- Set up all the steps that your pipeline will include. \n- Configure a deployment pipeline. \n- Include your Dockerfile/source code in the Git repository. \n- Include with your Linting step both a failed Linting screenshot and a successful Linting screenshot to show the Linter working properly.\n\n#### Step 5: Test your pipeline\n- Perform builds on your pipeline. \n- Verify that your pipeline works as you designed it. \n- Take a screenshot of the Circle CI or Jenkins pipeline showing deployment, and a screenshot of your AWS EC2 page showing the newly created (for blue/green) or modified (for rolling) instances. Make sure you name your instances differently between blue and green deployments.",
              "instructor_notes": ""
            },
            {
              "id": 908166,
              "key": "58c9a5db-ee54-4a5a-b547-82e4a15bfda8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Submitting your Project\nMake sure you have taken all the screenshots you need, as directed above, and create a text file with a link to your GitHub repo.\n\nZip up these screenshots and text file into a single doc, and this will constitute your project submission.\n\nBefore you submit your project, please make sure you have checked all of your work against the project [rubric](https://review.udacity.com/#!/rubrics/2577/view). If you find that you have not satisfied any area of the rubric, please revise your work before you submit it. This rubric is what your reviewer will be using to assess your work.\n\nYou'll then submit your project on the next page.",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  }
}