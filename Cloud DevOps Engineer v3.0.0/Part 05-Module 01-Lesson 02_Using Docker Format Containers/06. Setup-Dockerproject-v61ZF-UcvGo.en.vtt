WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:07.935
Let's build out a containerized workflow here using the Cloud9 environment.

00:00:07.935 --> 00:00:13.020
Cloud9 allows us to bypass a lot of trouble that typically comes up in a project.

00:00:13.020 --> 00:00:18.090
I'm going to go to Cloud9 and I'm going to create a new environment here.

00:00:18.090 --> 00:00:24.645
This one will be for doing a docker build. There we go.

00:00:24.645 --> 00:00:29.235
I'm going to pick a slightly larger one because I'm going to do some building.

00:00:29.235 --> 00:00:32.235
I'm going to use Amazon Linux as the default.

00:00:32.235 --> 00:00:34.875
Great. That looks like it works.

00:00:34.875 --> 00:00:37.895
Then while that's getting created.

00:00:37.895 --> 00:00:42.035
I'm also going to go to GitHub here and I'm going to create a new project.

00:00:42.035 --> 00:00:46.210
What I'm going to do is I'm going to call this dockerproj,

00:00:46.210 --> 00:00:53.490
and we'll say this is for a Docker workflow.

00:00:54.350 --> 00:00:57.540
Then I will initialize with README.

00:00:57.540 --> 00:01:00.330
Also grant a Python file here.

00:01:00.330 --> 00:01:05.070
Perfect. So next up,

00:01:05.070 --> 00:01:07.890
what I'm going to do is I'm going to go back to

00:01:07.890 --> 00:01:15.410
my Cloud9 environment and I'm going to basically get things set up,

00:01:15.410 --> 00:01:18.200
so that I can do things with Docker,

00:01:18.200 --> 00:01:20.780
build an application, things like that.

00:01:20.780 --> 00:01:23.170
So what's the first thing that I'm going to do?

00:01:23.170 --> 00:01:26.570
Well, the first thing I'm going to do is I'm going to go ahead

00:01:26.570 --> 00:01:30.080
and create a SSH key locally here.

00:01:30.080 --> 00:01:32.150
So let's go ahead and do that.

00:01:32.150 --> 00:01:36.035
So we'll do ssh-keygen -t rsa.

00:01:36.035 --> 00:01:44.190
Again, this is only necessary the very first time you're in a new AWS Cloud9 environment.

00:01:44.190 --> 00:01:45.635
Once you've done it,

00:01:45.635 --> 00:01:47.480
you don't have to do it again,

00:01:47.480 --> 00:01:49.400
but I'm going to show you the steps.

00:01:49.400 --> 00:01:51.155
Let's cat this.

00:01:51.155 --> 00:01:59.585
Great. I've got a public SSH key now and I'll go over to my GitHub account,

00:01:59.585 --> 00:02:03.890
go to settings, go to SSH and GPG keys,

00:02:03.890 --> 00:02:05.450
go through here and set this up,

00:02:05.450 --> 00:02:07.640
and we'll call this dockerproject.

00:02:07.640 --> 00:02:11.300
Great. It asked me to authenticate.

00:02:11.300 --> 00:02:14.250
I'm going ahead go ahead and authenticate.

00:02:14.250 --> 00:02:16.720
Now what I can do is,

00:02:16.720 --> 00:02:19.670
I can go back to that project I just set up,

00:02:19.670 --> 00:02:25.245
which is dockerproject, and I'm going to clone it.

00:02:25.245 --> 00:02:28.610
There we go. Notice I clone

00:02:28.610 --> 00:02:32.285
via SSH so that I don't have to keep asking for the password again.

00:02:32.285 --> 00:02:36.600
Perfect. Now we'll say git clone.

00:02:37.900 --> 00:02:41.455
Great. Now I have bidirectional communication.

00:02:41.455 --> 00:02:45.590
The first thing I'm going to do now inside of here is cd

00:02:45.590 --> 00:02:49.640
into that directory and then lay out the scaffolding for my project.

00:02:49.640 --> 00:02:53.765
So I typically always start with a makefile.

00:02:53.765 --> 00:02:58.670
Next up, what I'll do is I'll also make a requirements file.

00:02:58.670 --> 00:03:01.355
Here's a requirements.txt file.

00:03:01.355 --> 00:03:04.415
Also make a Docker file. This is a new one.

00:03:04.415 --> 00:03:12.145
Then I'm going to make a app.py file and this is going to be our application code.

00:03:12.145 --> 00:03:14.000
Now that I've got those setup,

00:03:14.000 --> 00:03:16.505
I can look at this tree here.

00:03:16.505 --> 00:03:19.790
Inside this tree, I can start pasting things in.

00:03:19.790 --> 00:03:22.880
So first, I'm going to build out a Docker file here,

00:03:22.880 --> 00:03:25.480
and I'm going to click on that Docker file,

00:03:25.480 --> 00:03:27.635
and I'm going to paste this code in here.

00:03:27.635 --> 00:03:36.095
So what this does is it uses the official Python3 package, basically Docker container.

00:03:36.095 --> 00:03:37.655
Then I'm going to build off of that.

00:03:37.655 --> 00:03:40.340
So I'm going to say a working directory will be app.

00:03:40.340 --> 00:03:45.925
I'm going to copy a file that I have locally in my repo into this directory.

00:03:45.925 --> 00:03:48.020
Then I'll need to later remember that when

00:03:48.020 --> 00:03:50.330
I shell into the machine and then I'm going to tell it

00:03:50.330 --> 00:03:55.775
to basically install packages inside this machine. That looks good.

00:03:55.775 --> 00:03:57.020
Now let's go to our app.

00:03:57.020 --> 00:03:59.195
Let's make something really simple here.

00:03:59.195 --> 00:04:05.495
I'm going to just paste in a really basic hello world script here.

00:04:05.495 --> 00:04:07.220
Let's go ahead and do that.

00:04:07.220 --> 00:04:11.420
Great. Then I'll also just do chmod plus x app.

00:04:11.420 --> 00:04:13.160
Here we go.

00:04:13.160 --> 00:04:15.500
So this one, if I test it locally here,

00:04:15.500 --> 00:04:22.185
you can see it'll just run Hello World. There we go.

00:04:22.185 --> 00:04:23.780
If I went to help,

00:04:23.780 --> 00:04:26.930
you can see I've even got some help messages.

00:04:26.930 --> 00:04:28.975
There's a lot of nice things you can do with Click.

00:04:28.975 --> 00:04:30.830
Got an app, got a Docker file.

00:04:30.830 --> 00:04:35.965
Let's go and also build out a makefile here.

00:04:35.965 --> 00:04:40.039
So in order to build out the makefile structure,

00:04:40.039 --> 00:04:45.260
what I'm going to do is look at maybe an existing makefile I've got.

00:04:45.260 --> 00:04:47.650
I know I have one in GitHub somewhere.

00:04:47.650 --> 00:04:49.725
Let's go ahead and find one.

00:04:49.725 --> 00:04:52.600
Here, let's go to this.

00:04:54.020 --> 00:04:58.090
What does this one look like?

00:04:59.510 --> 00:05:04.190
Makefile. Let's just copy this as a skeleton

00:05:04.190 --> 00:05:08.630
here and then I'll explain what these things do.

00:05:08.630 --> 00:05:18.900
I'll just call this environment dockerproj.

00:05:18.900 --> 00:05:22.110
There we go. So essentially,

00:05:22.110 --> 00:05:25.100
what this is going to do is it's going to allow

00:05:25.100 --> 00:05:28.670
me to use something called a hadolint as well.

00:05:28.670 --> 00:05:33.140
What hadolint does is it actually lints my Docker file.

00:05:33.140 --> 00:05:37.480
So next, after I've created this makefile here,

00:05:37.480 --> 00:05:42.740
I'm going to want to download that hadolint file.

00:05:42.740 --> 00:05:45.185
So I can do that in one fell swoop.

00:05:45.185 --> 00:05:48.300
I'll just paste this in, like that.

00:05:48.300 --> 00:05:51.780
So wget, grab it from GitHub,

00:05:51.780 --> 00:05:53.670
and then chmod it afterwards.

00:05:53.670 --> 00:05:54.965
Let's see if that works.

00:05:54.965 --> 00:05:57.660
I can just do a up arrow here.

00:05:57.660 --> 00:06:01.010
So it doesn't like it when I try to change permissions.

00:06:01.010 --> 00:06:08.540
So let's say sudo chmod

00:06:08.540 --> 00:06:13.530
plus x bin hadolint.

00:06:13.530 --> 00:06:17.895
There we go. Now if I just say make lints, does that work?

00:06:17.895 --> 00:06:23.955
So it looks like it is actually successfully linting that Dockerfile.

00:06:23.955 --> 00:06:26.610
Great. So now I've got some docker linting setup,

00:06:26.610 --> 00:06:28.410
which is pretty neat.

00:06:28.410 --> 00:06:31.414
In the requirements file, I'm going to need to install

00:06:31.414 --> 00:06:38.490
the Click command-line Library and I'm also going to need to install Pylint.

00:06:39.620 --> 00:06:46.925
Then what I'll do as well is that I will create a virtual environment real quick.

00:06:46.925 --> 00:06:48.200
I always like to do that.

00:06:48.200 --> 00:06:50.640
So I'll use a convention that I typically use.

00:06:50.640 --> 00:06:56.815
So I'll say Python3 -m virtual environment, tilde /.

00:06:56.815 --> 00:07:01.550
dockerproj. So I name it the name of my GitHub repo.

00:07:01.550 --> 00:07:04.490
Great. Then from here,

00:07:04.490 --> 00:07:10.790
what I'll do is I will run that.

00:07:10.790 --> 00:07:14.930
Perfect. Then from here,

00:07:14.930 --> 00:07:18.470
I will also go ahead and source it. So here we go.

00:07:18.470 --> 00:07:24.630
Source docker, project bin activate.

00:07:24.630 --> 00:07:28.790
Great. Then next, I can actually do that and make

00:07:28.790 --> 00:07:34.200
install command and just make sure that everything is going to be installed correctly.

00:07:37.560 --> 00:07:42.565
Perfect. So things are basically set up here so that I have

00:07:42.565 --> 00:07:47.559
the ability to make a container that can run this application.

00:07:47.559 --> 00:07:50.425
So this is the next step here is

00:07:50.425 --> 00:07:54.010
what I'm going to do is I'm going to run a docker build command.

00:07:54.010 --> 00:07:57.835
Fortunately, the AWS environment already has this setup.

00:07:57.835 --> 00:08:04.180
So if I do this, I say, docker build --tag=app.

00:08:04.590 --> 00:08:07.270
What'll happen is it'll pull down

00:08:07.270 --> 00:08:12.040
that base container and then it's going to allow me to make my changes above it.

00:08:12.040 --> 00:08:14.090
So it's going to be this and this.

00:08:14.090 --> 00:08:17.040
This is really the power of Docker is you can use

00:08:17.040 --> 00:08:21.915
an official base container package up your own software on top of it,

00:08:21.915 --> 00:08:25.890
tests out locally, and then you're able to package the runtime as well

00:08:25.890 --> 00:08:30.740
as the business logic that you've made for your application.

00:08:30.780 --> 00:08:33.550
Let's see if this is successful.

00:08:33.550 --> 00:08:39.280
Then really the only thing next will need to do is just do a list command here.

00:08:39.280 --> 00:08:41.499
So for a Docker image ls,

00:08:41.499 --> 00:08:44.830
you can see that I created an image called app.

00:08:44.830 --> 00:08:48.850
So what I'm going to do is I'm going to run Docker and tell it

00:08:48.850 --> 00:08:52.840
that I want to basically shell into that container that I just created.

00:08:52.840 --> 00:08:54.565
Great. Now from here,

00:08:54.565 --> 00:08:58.015
I can do the ls command and look, here's my application.

00:08:58.015 --> 00:08:59.920
If I want to test it out,

00:08:59.920 --> 00:09:04.495
I can actually go through here and run python app.py,

00:09:04.495 --> 00:09:09.610
and there you can see that I've actually been able to successfully deploy my code.

00:09:09.610 --> 00:09:11.395
I also could from here,

00:09:11.395 --> 00:09:18.460
go ahead and take that and let's say push it to Docker Hub or push it to Amazon, ECS.

00:09:18.460 --> 00:09:23.380
Great. So we've been very successful here at creating this project.

00:09:23.380 --> 00:09:28.915
So the next thing that I'm going to do is I'm going to try to set up a CircleCI config.

00:09:28.915 --> 00:09:33.040
I like to do a build system every time I work on a project.

00:09:33.040 --> 00:09:34.915
So I'm going to go ahead and do that next.

00:09:34.915 --> 00:09:39.110
I'm going to make directory.CircleCI.

00:09:41.640 --> 00:09:45.805
Then I'm going to make the config file in here.

00:09:45.805 --> 00:09:49.450
So that's going to be config.yml, I believe,

00:09:49.450 --> 00:09:57.805
and what I can do is I can paste some config file that I've created previously inside.

00:09:57.805 --> 00:10:00.985
So I'm going to go through and do that.

00:10:00.985 --> 00:10:08.720
Let's go to this config file here.

00:10:08.720 --> 00:10:11.730
Great. Let's just walk through

00:10:11.730 --> 00:10:14.040
some of the things that I'm going to do inside of this config file.

00:10:14.040 --> 00:10:16.470
So what I'm going to do is I'm going to again,

00:10:16.470 --> 00:10:18.795
do the same Docker base.

00:10:18.795 --> 00:10:21.300
I'm going to do what I typically do, install dependencies.

00:10:21.300 --> 00:10:25.740
But this time I'm adding a little twist and that I'm actually needing to

00:10:25.740 --> 00:10:30.520
tell this environment to use this hadolint tool,

00:10:30.520 --> 00:10:32.290
which is a tool that lets

00:10:32.290 --> 00:10:34.780
me lint Docker files and

00:10:34.780 --> 00:10:37.870
then everything else basically works the same because I use a make lint,

00:10:37.870 --> 00:10:39.775
and if we look at the Makefile here,

00:10:39.775 --> 00:10:43.420
you can say I just added one extra step inside of here.

00:10:43.420 --> 00:10:45.505
So things are looking pretty good,

00:10:45.505 --> 00:10:47.620
but let's add a little twist here.

00:10:47.620 --> 00:10:52.720
Actually, let's see if we can get CircleCI to run locally.

00:10:52.720 --> 00:10:55.630
So one thing that you can do with CircleCI that's pretty

00:10:55.630 --> 00:10:58.540
neat is that it actually has a local mode.

00:10:58.540 --> 00:11:01.615
So let's go find CircleCI local mode.

00:11:01.615 --> 00:11:06.100
CircleCI local. There we go.

00:11:06.100 --> 00:11:11.680
What I can do is do this quick installation command.

00:11:11.680 --> 00:11:16.975
So I'm going to run this command here and let's go ahead and try that out.

00:11:16.975 --> 00:11:22.570
Great. It says that permission is denied,

00:11:22.570 --> 00:11:26.935
so I'm going to do sudo!! Here we go.

00:11:26.935 --> 00:11:34.150
It says, "Cannot move user to user local permission".

00:11:34.150 --> 00:11:38.815
What we can do, there's a couple of different ways we can solve that problem,

00:11:38.815 --> 00:11:41.620
is that we can,

00:11:41.620 --> 00:11:43.570
just see if it works first.

00:11:43.570 --> 00:11:47.090
Let's see here, usr/local/bin/circle.

00:11:48.300 --> 00:11:52.420
Let's see if this is there.

00:11:52.420 --> 00:11:55.810
CircleCI.

00:11:55.810 --> 00:11:57.730
So it doesn't look like that's working.

00:11:57.730 --> 00:12:01.940
So we could try a slightly different approach to install this.

00:12:02.550 --> 00:12:07.540
What we can do is do a manual download here,

00:12:07.540 --> 00:12:09.520
and we could just release it that way.

00:12:09.520 --> 00:12:12.220
That looks like that might be a better way to do it. Here we go.

00:12:12.220 --> 00:12:14.560
Here's a Linux download.

00:12:14.560 --> 00:12:20.185
I believe I can just copy that link and then go to CircleCI,

00:12:20.185 --> 00:12:23.680
and let's just go into the tmp directory.

00:12:23.680 --> 00:12:34.435
Let's do a wget and grab that locally and then do tar zxvf.

00:12:34.435 --> 00:12:36.100
Then the name of that file.

00:12:36.100 --> 00:12:37.990
This will unpack it.

00:12:37.990 --> 00:12:43.195
Then from here, you can see that I've actually got access to this file.

00:12:43.195 --> 00:12:45.235
So if I wanted to,

00:12:45.235 --> 00:12:51.505
I can actually just move this CircleCI command here.

00:12:51.505 --> 00:12:54.025
Let's go here.

00:12:54.025 --> 00:12:59.470
Let's just go into this directory, cd into here.

00:12:59.470 --> 00:13:05.530
Perfect. I believe you can just run this.

00:13:05.530 --> 00:13:07.405
Let's try that.

00:13:07.405 --> 00:13:13.210
So basically what this CircleCI command locally does is allows me to

00:13:13.210 --> 00:13:19.960
simulate some of the commands that CircleCI would do remotely.

00:13:19.960 --> 00:13:24.355
What's neat about that is that

00:13:24.355 --> 00:13:29.500
this really gives me a lot of capabilities to test things out.

00:13:29.500 --> 00:13:34.730
So let's actually make this a slightly easier to run here.

00:13:34.740 --> 00:13:41.395
Let's actually see if we can move this CircleCI into,

00:13:41.395 --> 00:13:43.345
let's say the home directory.

00:13:43.345 --> 00:13:45.835
Let's just say tilde.

00:13:45.835 --> 00:13:49.795
Let's try that, and then let's just cd into there.

00:13:49.795 --> 00:13:51.250
I see CircleCI now.

00:13:51.250 --> 00:13:55.600
So what I can try is, in fact,

00:13:55.600 --> 00:13:59.020
I'll move it again into this environment because

00:13:59.020 --> 00:14:03.910
Cloud nine has a specific environment that it has access to.

00:14:03.910 --> 00:14:08.965
So now it's basically in the working directory that I'm typically used to.

00:14:08.965 --> 00:14:12.460
What I could do is I could actually test out one of

00:14:12.460 --> 00:14:18.100
these CircleCI configs. How could we do this?

00:14:18.100 --> 00:14:20.815
We'll have a previous project here.

00:14:20.815 --> 00:14:25.660
Then I'm going to look at to see how I've tested this out previously.

00:14:25.660 --> 00:14:28.540
Let's go to this Makefile here,

00:14:28.540 --> 00:14:30.880
and you can see there's some commands here.

00:14:30.880 --> 00:14:32.890
So let's try a couple of these commands.

00:14:32.890 --> 00:14:35.515
Let's paste them into our Makefile environment.

00:14:35.515 --> 00:14:40.240
I'm going to go here and then I'm going to run this command.

00:14:40.240 --> 00:14:43.540
So I'm going to put in this command, validates CircleCI.

00:14:43.540 --> 00:14:46.330
Now, in this case,

00:14:46.330 --> 00:14:47.950
I'm going to need to go to

00:14:47.950 --> 00:14:52.435
dockerproj and I'm going to need to tell it to go one directory app,

00:14:52.435 --> 00:14:55.030
or I'm going to need to give it the full path to

00:14:55.030 --> 00:14:58.120
that project or I need to put it into this directory.

00:14:58.120 --> 00:15:02.680
I guess probably the cleanest way to do this would be maybe what I'll do is I'll just

00:15:02.680 --> 00:15:08.290
move in this CircleCI file into my dockerproj.

00:15:08.290 --> 00:15:12.835
There we go. Then I can just run them exactly the way they were before.

00:15:12.835 --> 00:15:15.490
So let's go ahead and try this out.

00:15:15.490 --> 00:15:19.810
Again, remember that I created that CircleCI file already.

00:15:19.810 --> 00:15:21.100
So let's validate my config.

00:15:21.100 --> 00:15:23.635
Let's test out and see if it even runs.

00:15:23.635 --> 00:15:26.980
So we'll say, "Make Validates".

00:15:26.980 --> 00:15:32.980
Let's see here, "Make Validate".

00:15:32.980 --> 00:15:36.940
Let's just try any kind of Make command first. Let's see here.

00:15:36.940 --> 00:15:40.345
Yeah, so we'll just say, "Make lint".

00:15:40.345 --> 00:15:42.940
Let's just verify that that works.

00:15:42.940 --> 00:15:48.350
Things still work. Now, try make validate-circleci.

00:15:49.200 --> 00:15:53.800
Does that work? No rule or because we didn't save it.

00:15:53.800 --> 00:15:56.950
There we go. Let's go ahead and run that.

00:15:56.950 --> 00:16:02.530
It says no CircleCI file found.

00:16:02.530 --> 00:16:05.435
So that tells us something,

00:16:05.435 --> 00:16:12.410
which is that maybe we didn't name this thing properly.

00:16:12.410 --> 00:16:14.885
That might be one thing that we could check out.

00:16:14.885 --> 00:16:18.215
We also could just try the run local as well.

00:16:18.215 --> 00:16:23.050
So make run CircleCI local.

00:16:23.050 --> 00:16:28.580
Let's try that one, or we even just run the command, that might be easier.

00:16:29.760 --> 00:16:40.625
Here we go. So this command is not found because we need to execute it.

00:16:40.625 --> 00:16:42.740
So let's go ahead and do that.

00:16:42.740 --> 00:16:44.920
We'll just do dot slash,

00:16:44.920 --> 00:16:49.880
and that does appear to be doing the right thing.

00:16:49.880 --> 00:16:53.290
I think we were just missing something here.

00:16:53.290 --> 00:16:56.155
So this says, "Invalid memory address".

00:16:56.155 --> 00:17:00.440
We're seeing that there's a problem running this thing locally,

00:17:00.440 --> 00:17:02.345
which is not that big of a deal.

00:17:02.345 --> 00:17:07.410
It just means that there's a installation error in installing this package.

00:17:07.410 --> 00:17:08.960
But in a nutshell,

00:17:08.960 --> 00:17:13.090
this is potentially one way that you could also test

00:17:13.090 --> 00:17:17.180
out CircleCI is not just run it remotely,

00:17:17.180 --> 00:17:18.430
but run it locally,

00:17:18.430 --> 00:17:20.690
and there's some debugging that we'll need to do to fix that.

00:17:20.690 --> 00:17:23.720
But what I'll do is I'll do it the old-fashioned way.

00:17:23.720 --> 00:17:25.250
I'm going to go ahead and commit this code.

00:17:25.250 --> 00:17:29.425
So I'm going to move this CircleCI directory into the tmp directory.

00:17:29.425 --> 00:17:32.450
I'm going to say git status and just check all of us in.

00:17:32.450 --> 00:17:36.505
So we'll say git add.circleci,

00:17:36.505 --> 00:17:39.145
and then I'll do a git add,

00:17:39.145 --> 00:17:43.350
add in these peripheral files here.

00:17:43.660 --> 00:17:48.935
Now, adding in Docker projects,

00:17:48.935 --> 00:17:55.790
the only thing left would be to go and actually hook this up in CircleCI.

00:17:55.790 --> 00:17:58.275
Let's go back to CircleCI here.

00:17:58.275 --> 00:18:00.490
I think it's right here,

00:18:00.490 --> 00:18:06.710
this tab, and let's select build new projects.

00:18:09.180 --> 00:18:11.800
Add projects.

00:18:11.800 --> 00:18:15.590
We should see this one as a new project,

00:18:15.590 --> 00:18:19.560
which would be, there we go, Docker project.

00:18:20.280 --> 00:18:25.400
Then we'll just say start building because we've already made that config file.

00:18:25.400 --> 00:18:27.635
If everything is correct,

00:18:27.635 --> 00:18:30.930
the linting and everything is correct, this should work.

00:18:30.930 --> 00:18:36.080
Then later we can figure out how to properly install a local version of CircleCI,

00:18:36.080 --> 00:18:37.490
which is very useful as well.

00:18:37.490 --> 00:18:41.100
But first, let's see if this thing actually works.

00:18:48.910 --> 00:18:53.110
It looks to be successful, which is great.

00:18:53.110 --> 00:18:59.570
So we're able to actually completely lint a Docker file Project plus Python code.

00:18:59.570 --> 00:19:01.115
We were able to test it out locally.

00:19:01.115 --> 00:19:02.945
So I would call this a success.

00:19:02.945 --> 00:19:06.140
Then in another video I can dive into how to

00:19:06.140 --> 00:19:10.350
configure local CircleCI and test out as well.

