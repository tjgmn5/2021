WEBVTT
Kind: captions
Language: en

00:00:01.580 --> 00:00:08.040
CircleCI uses YAML files to handle the configuration of pipelines and jobs.

00:00:08.040 --> 00:00:14.355
Right here on my screen I've got a configuration file from one of my projects,

00:00:14.355 --> 00:00:17.220
and I'm just showing you that at first the top level,

00:00:17.220 --> 00:00:20.850
the highest level of the hierarchy with everything else is collapsed,

00:00:20.850 --> 00:00:22.995
just so that it all fits on my screen.

00:00:22.995 --> 00:00:25.800
You can see at the top there's a version.

00:00:25.800 --> 00:00:30.480
This is what tells the CircleCI system that

00:00:30.480 --> 00:00:35.780
this YAML file should be hitting the 2.1 version of a CircleCI API.

00:00:35.780 --> 00:00:38.550
So if you want certain features that are only

00:00:38.550 --> 00:00:43.020
available in a certain version then you'd want to represent that version here.

00:00:43.020 --> 00:00:45.120
We also have commands.

00:00:45.120 --> 00:00:47.280
Commands are reusable blocks of code,

00:00:47.280 --> 00:00:50.055
like jobs, but are just reusable.

00:00:50.055 --> 00:00:56.900
We can reference them in other places and run the code that is inside of these commands.

00:00:58.220 --> 00:01:01.050
The next section is jobs.

00:01:01.050 --> 00:01:06.670
This is where all the work actually gets done in the CI server.

00:01:06.670 --> 00:01:14.470
Each job is represented by a name and has a configuration for that job.

00:01:14.470 --> 00:01:16.290
We've got environment, docker,

00:01:16.290 --> 00:01:18.520
steps as the next level down and these are

00:01:18.520 --> 00:01:22.730
just instructions about what to do when we want to lint to the frontend.

00:01:22.730 --> 00:01:24.930
Same thing with build-backend,

00:01:24.930 --> 00:01:27.605
this is another job and it takes

00:01:27.605 --> 00:01:31.950
these instructions to be able to actually build the backend.

00:01:32.050 --> 00:01:36.750
So let's take a look in the next section, which is workflows.

00:01:37.010 --> 00:01:42.815
The workflow section contains a list of workflows, as you guessed it.

00:01:42.815 --> 00:01:48.590
Each workflow lays out the order in which job should be run for that workflow.

00:01:48.590 --> 00:01:50.090
I have only one workflow,

00:01:50.090 --> 00:01:51.785
which is often the case.

00:01:51.785 --> 00:01:55.969
It's called default, and inside of the default workflow,

00:01:55.969 --> 00:01:57.710
I've got a list of jobs.

00:01:57.710 --> 00:02:00.100
These are the same jobs as what are

00:02:00.100 --> 00:02:03.080
referenced or what are defined up here in the job section.

00:02:03.080 --> 00:02:06.335
You'll notice that I have a job called lint-frontend.

00:02:06.335 --> 00:02:08.825
If I go back to my workflow,

00:02:08.825 --> 00:02:13.490
you'll see that I have a lint-frontend referenced here in my job list.

00:02:13.490 --> 00:02:15.890
That just means that it's going to run

00:02:15.890 --> 00:02:19.525
the lint-frontend job at the very beginning of the workflow.

00:02:19.525 --> 00:02:24.095
Since it actually has no requirements and neither does build-backend,

00:02:24.095 --> 00:02:28.950
both of those are actually going to run together side-by-side, if it can.

00:02:29.240 --> 00:02:32.850
Test-frontend on the other hand, has a requirement.

00:02:32.850 --> 00:02:36.930
It requires lint-frontend to have been run first.

00:02:36.930 --> 00:02:40.410
So this job will actually

00:02:40.410 --> 00:02:44.810
wait until lint-frontend is finished and then it will start running.

00:02:44.810 --> 00:02:50.375
You can see how this list of jobs with the requirements independencies,

00:02:50.375 --> 00:02:56.340
it builds a hierarchy of jobs that run in the order

00:02:56.340 --> 00:03:02.375
that we defined here and eventually will leave visualizing this in just a few moments,

00:03:02.375 --> 00:03:04.710
about how that actually works.

