WEBVTT
Kind: captions
Language: en

00:00:01.130 --> 00:00:03.915
Let's build a CI pipeline.

00:00:03.915 --> 00:00:07.560
I'm going to use a clean repository and build something from scratch.

00:00:07.560 --> 00:00:11.460
We're going to include the three most common CI stages,

00:00:11.460 --> 00:00:14.310
compile, test, and analyze.

00:00:14.310 --> 00:00:16.335
In exercise that you just completed,

00:00:16.335 --> 00:00:19.200
you may have used the repository that was provided to

00:00:19.200 --> 00:00:22.755
you or you may have created your own solution.

00:00:22.755 --> 00:00:25.185
I started with my own solution here.

00:00:25.185 --> 00:00:27.530
In order to test this out, we need a few things.

00:00:27.530 --> 00:00:29.055
We need a Git repository,

00:00:29.055 --> 00:00:31.155
we need a CircleCI project,

00:00:31.155 --> 00:00:33.930
and we need some code in the middle.

00:00:33.930 --> 00:00:37.605
I've got a repository here in Git that I've created.

00:00:37.605 --> 00:00:40.080
I've cloned it, I've got some code,

00:00:40.080 --> 00:00:43.275
and now I'm ready to actually connect it in CircleCI.

00:00:43.275 --> 00:00:45.090
Let's go ahead and do that.

00:00:45.090 --> 00:00:48.795
I believe it was called udacity-ci-1.

00:00:48.795 --> 00:00:54.640
Let's set up that project that CircleCI found for me.

00:00:55.280 --> 00:00:59.810
Again, I don't like to use the built-in script that they have,

00:00:59.810 --> 00:01:02.940
so I'm always adding manually.

00:01:04.060 --> 00:01:08.470
Great, so we've got a connection in CircleCI.

00:01:08.470 --> 00:01:11.015
We need to be able to do a few things.

00:01:11.015 --> 00:01:13.895
Like I said before, we want to have a CI project,

00:01:13.895 --> 00:01:18.840
CI server that is able to lint or build, run tests,

00:01:18.840 --> 00:01:21.120
and do some code analysis,

00:01:21.120 --> 00:01:24.300
so we can have a complete CI setup.

00:01:24.300 --> 00:01:25.940
In order to do that,

00:01:25.940 --> 00:01:31.115
I added a few scripts that I can run from the command line.

00:01:31.115 --> 00:01:37.100
I've got my package.json here and I've got a script section where I can build.

00:01:37.100 --> 00:01:41.230
I can start, if I'm actually developing this application.

00:01:41.230 --> 00:01:45.159
I can lint, I can run tests,

00:01:45.159 --> 00:01:48.710
and using my package manager tool npm,

00:01:48.710 --> 00:01:51.965
I can actually run a security audit after the fact.

00:01:51.965 --> 00:01:55.025
Let's try out these scripts in my terminal.

00:01:55.025 --> 00:02:00.190
Should be able to type in npm run build.

00:02:00.190 --> 00:02:06.720
Success. Now, I should be able to also run my tests.

00:02:07.940 --> 00:02:12.100
Great. Now, the third thing I want to be able to do is to

00:02:12.100 --> 00:02:15.835
actually perform a security audit on my dependencies.

00:02:15.835 --> 00:02:19.640
I'm going to type in npm audit.

00:02:19.670 --> 00:02:23.505
Great. So I have zero vulnerabilities.

00:02:23.505 --> 00:02:26.020
These are the exact same commands that I want to be able to

00:02:26.020 --> 00:02:29.125
run in my CircleCI configuration.

00:02:29.125 --> 00:02:34.625
Remember, CircleCI is really just doing the same things that I can do as a developer.

00:02:34.625 --> 00:02:38.325
Let's check out my CircleCI configuration.

00:02:38.325 --> 00:02:41.040
Here we can see that I have a few jobs.

00:02:41.040 --> 00:02:43.435
I've got a build job,

00:02:43.435 --> 00:02:45.550
I've got a test job,

00:02:45.550 --> 00:02:48.140
I've got an analyze job,

00:02:48.140 --> 00:02:50.505
and then I've got my workflows.

00:02:50.505 --> 00:02:52.970
Let's just look at the workflows really quick.

00:02:52.970 --> 00:02:55.025
My_workflow is the name of the workflow,

00:02:55.025 --> 00:02:56.480
and it's got three jobs,

00:02:56.480 --> 00:02:58.070
build, test, and analyze.

00:02:58.070 --> 00:03:00.560
We can see that test requires build.

00:03:00.560 --> 00:03:04.390
That means it's going to run build first and then it's going to run test.

00:03:04.390 --> 00:03:06.840
Analyze requires test.

00:03:06.840 --> 00:03:08.090
That means that test,

00:03:08.090 --> 00:03:11.150
when it finishes, it will finally run the analyze.

00:03:11.150 --> 00:03:14.960
If you visualize this horizontally on a graph,

00:03:14.960 --> 00:03:17.180
it's going to go build and then to the right test,

00:03:17.180 --> 00:03:20.365
and then to the right analyze in that order.

00:03:20.365 --> 00:03:23.180
Let's take a look at these jobs really quick.

00:03:23.180 --> 00:03:25.040
Here's build.

00:03:25.040 --> 00:03:27.080
All three of these, by the way,

00:03:27.080 --> 00:03:30.665
are using the exact same node or a docker image,

00:03:30.665 --> 00:03:32.365
which is node 13.

00:03:32.365 --> 00:03:34.190
First, we're going to check out,

00:03:34.190 --> 00:03:37.794
and we actually do a checkout on all three of these jobs.

00:03:37.794 --> 00:03:41.015
Just a very common step that you need to run,

00:03:41.015 --> 00:03:42.770
and here you can see,

00:03:42.770 --> 00:03:48.885
I'm going to install my npm packages and we're going to save_cache,

00:03:48.885 --> 00:03:50.580
which we've learned about cache in the past.

00:03:50.580 --> 00:03:53.210
We are going to use the npm package is key,

00:03:53.210 --> 00:03:57.280
and then I'm giving it this path to my node modules.

00:03:57.280 --> 00:03:59.310
Then I'm going to run,

00:03:59.310 --> 00:04:01.565
in this case is npm run lint.

00:04:01.565 --> 00:04:03.050
I didn't show that one to you.

00:04:03.050 --> 00:04:07.595
Pretty simple, npm run lint and it's just going to lint the code.

00:04:07.595 --> 00:04:12.650
It finishes even faster than build does, and test,

00:04:12.650 --> 00:04:16.505
very similar, almost exactly the same thing except for in test,

00:04:16.505 --> 00:04:18.440
I'm going to restore_cache.

00:04:18.440 --> 00:04:21.200
I'm restoring cache with the keys npm packages,

00:04:21.200 --> 00:04:26.120
which is the same key that was referenced here at line 11.

00:04:26.120 --> 00:04:29.600
I'm going to install npm packages again.

00:04:29.600 --> 00:04:32.210
But in this case, it's actually going to use the cached version

00:04:32.210 --> 00:04:35.020
instead of downloading them fresh from the Internet.

00:04:35.020 --> 00:04:37.730
Then it's going to run that command that I just

00:04:37.730 --> 00:04:40.460
showed you that I can run my own terminal,

00:04:40.460 --> 00:04:43.850
and then my analyze is going to do very much the same thing.

00:04:43.850 --> 00:04:45.545
Is going to check it out, restore cache.

00:04:45.545 --> 00:04:50.104
In this case, I actually don't need to restore cache or even run npm install,

00:04:50.104 --> 00:04:54.610
because this npm audit actually just runs without installing any dependencies.

00:04:54.610 --> 00:05:01.265
These three jobs are going to run in my CircleCI server.

00:05:01.265 --> 00:05:05.060
All I have got to do now is make a small change to my code, check it in,

00:05:05.060 --> 00:05:08.985
and watch the build run. Let's take a look.

00:05:08.985 --> 00:05:18.480
I'm going to add a ReadMe file. Hello world.

00:05:26.510 --> 00:05:31.470
Now, that is now pushed up into CircleCI.

00:05:31.470 --> 00:05:34.005
Let's take a look at our build.

00:05:34.005 --> 00:05:37.005
Here is my build running in CircleCI.

00:05:37.005 --> 00:05:41.030
If I click here, I should be able to see that the build is running,

00:05:41.030 --> 00:05:43.805
its 16-17 seconds into it.

00:05:43.805 --> 00:05:46.145
Then test is just waiting patiently here

00:05:46.145 --> 00:05:49.640
for its chance to run and then analyze will also wait.

00:05:49.640 --> 00:05:51.020
Just like I said,

00:05:51.020 --> 00:05:52.910
when you visualize these horizontally,

00:05:52.910 --> 00:05:55.415
when you set up that require structure,

00:05:55.415 --> 00:05:56.900
then basically one goes after the other.

00:05:56.900 --> 00:06:01.650
It just ends up with a linear visualization.

00:06:01.730 --> 00:06:05.250
There we have our finished CI build,

00:06:05.250 --> 00:06:09.930
and all three of our jobs have passed with flying colors.

