WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.865
Going back to our script,

00:00:02.865 --> 00:00:04.860
we have similar rules.

00:00:04.860 --> 00:00:09.339
We have a port 80 rule for this resource,

00:00:10.039 --> 00:00:14.609
and we have the same thing for ingress and egress so no problem.

00:00:14.609 --> 00:00:18.579
There's inbound and outbound on that particular port.

00:00:18.800 --> 00:00:23.355
Now, we have another security group that we're creating and it goes from port

00:00:23.355 --> 00:00:27.495
8080 to port 8080 with just that single port.

00:00:27.495 --> 00:00:28.980
And in this case,

00:00:28.980 --> 00:00:32.490
I have an additional rule that is not in the other security group which

00:00:32.490 --> 00:00:37.859
is from port 22 to port 22 allow traffic from anywhere.

00:00:37.859 --> 00:00:42.079
In this case, I'm opening an SSH port which is what I'm going to use

00:00:42.079 --> 00:00:45.914
to connect to a Linux server to be able to troubleshoot,

00:00:45.914 --> 00:00:47.715
manage, or install software.

00:00:47.715 --> 00:00:51.560
Ideally, you would not have this port open

00:00:51.560 --> 00:00:55.565
or any other port other than the service port for your application.

00:00:55.564 --> 00:00:58.954
In this case, port 8080 will be

00:00:58.954 --> 00:01:01.159
the only necessary port to have

00:01:01.159 --> 00:01:03.949
open because that's what you're going to use to provide your service,

00:01:03.950 --> 00:01:08.204
but again, sometimes you need access to troubleshoot and understand problems,

00:01:08.204 --> 00:01:13.174
maybe just look at a log file or do some kind of log analysis.

00:01:13.174 --> 00:01:15.590
So there are situations where you would need

00:01:15.590 --> 00:01:18.200
that port 22 open to be able to get in there,

00:01:18.200 --> 00:01:20.855
just like if it was a Windows server,

00:01:20.855 --> 00:01:24.920
you would have a port open so that you can do a remote desktop connection

00:01:24.920 --> 00:01:29.620
and go into that server and make some tweaks as necessary.

00:01:29.620 --> 00:01:34.520
Now, once you know how everything works in your application and everything is fine,

00:01:34.519 --> 00:01:38.719
you want to come here and close that port for good so that way you don't even

00:01:38.719 --> 00:01:45.209
have the option of somebody breaking into your server and stealing your data.

00:01:53.239 --> 00:01:56.129
This last egress rule it says,

00:01:56.129 --> 00:02:00.269
from port zero to all the way to the end have everything open,

00:02:00.269 --> 00:02:03.310
and this is okay because this is an outbound traffic rule.

00:02:03.310 --> 00:02:07.969
So if your machine is trying to connect or download some software patches or something,

00:02:07.969 --> 00:02:11.900
you want it to be able to access the Internet unrestricted.

00:02:13.729 --> 00:02:17.090
Again, as long as it's an outbound rule, it's fine,

00:02:17.090 --> 00:02:20.275
you don't want that for an inbound rule to just open all ports

00:02:20.275 --> 00:02:24.860
that will be a security risk for something sitting on a public subnet.

00:02:26.389 --> 00:02:30.674
So let's just create this two resources and see what happens.

00:02:30.675 --> 00:02:33.180
I'm going to save our file.

00:02:33.180 --> 00:02:38.430
Now we need the parameters so we're going to copy it over.

00:02:41.090 --> 00:02:44.539
This time our parameter file is going to be very simple.

00:02:44.539 --> 00:02:50.340
It's just this one parameter and you'll see why in a second.

00:02:50.560 --> 00:03:00.420
I'll do "Copy" put it in here and I'll hit "Save."

00:03:00.650 --> 00:03:04.180
Now let's do a create stack.

00:03:07.129 --> 00:03:13.439
We're going do the create stack command but we have to change the values.

00:03:13.439 --> 00:03:20.039
Now, we're going to do a demoserverstack and we're going to

00:03:20.039 --> 00:03:28.114
pass demoservers.yml and the parameter file is demoservers.json.

00:03:28.115 --> 00:03:30.620
I'll hit "Execute "and let's see what happens.

00:03:30.620 --> 00:03:34.969
So I'm going to increase the size of this window and we got a stack ID so we

00:03:34.969 --> 00:03:40.469
can go to our console and verify what happened.

00:03:42.879 --> 00:03:53.944
I'll close this. Now we have a new stack created. Let's take a look.

00:03:53.944 --> 00:03:55.669
It says, "create complete."

00:03:55.669 --> 00:03:58.024
Let's see what the values are.

00:03:58.025 --> 00:04:02.015
The event say that security groups were created.

00:04:02.014 --> 00:04:06.049
So let's go to EC2 and verify that they were actually created.

00:04:06.050 --> 00:04:11.390
EC2 we're going to scroll down in this menu until we see security groups.

00:04:11.389 --> 00:04:14.639
Here we go under network and security.

00:04:15.379 --> 00:04:19.784
We have resources created. Let me see.

00:04:19.785 --> 00:04:23.745
We see a demo server stack web server

00:04:23.745 --> 00:04:27.155
and demo server stack load balancer security groups.

00:04:27.154 --> 00:04:32.479
So we have those and we can better see the ingress and egress rule right here.

00:04:32.480 --> 00:04:36.569
So let's go ahead and expand this a little bit more.

00:04:36.800 --> 00:04:41.360
You can click on "Inbound" and it will show you that

00:04:41.360 --> 00:04:46.194
this security group is allowing port 80 from anywhere.

00:04:46.194 --> 00:04:48.680
If we click on the other one, it says,

00:04:48.680 --> 00:04:54.720
allowing port 8080 from anywhere as well as SSH from anywhere.

00:04:55.180 --> 00:04:57.800
Now keep in mind this is your security groups.

00:04:57.800 --> 00:05:01.370
They're not associated with any other resource so they don't do anything

00:05:01.370 --> 00:05:05.090
so don't be concerned that we just open ports into something,

00:05:05.089 --> 00:05:08.839
because again, these are not associated with any of your resources yet.

00:05:08.839 --> 00:05:11.089
Once we attach it to a server,

00:05:11.089 --> 00:05:16.709
the server will gain this ingress and egress rules.

