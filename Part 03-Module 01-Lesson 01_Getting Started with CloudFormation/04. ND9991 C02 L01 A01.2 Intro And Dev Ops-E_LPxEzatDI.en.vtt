WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:05.025
So what exactly is Cloud DevOps trying to solve?

00:00:05.025 --> 00:00:07.800
I'll give you a few examples from the real world.

00:00:07.799 --> 00:00:11.085
Number one is unpredictable deployments.

00:00:11.085 --> 00:00:15.630
In the past, you would have a deployment done by

00:00:15.630 --> 00:00:20.925
an operational team that was not involved at all in the creation of the software,

00:00:20.925 --> 00:00:23.940
so they're not entirely sure how this is going to go.

00:00:23.940 --> 00:00:26.609
So they just receive specifications from

00:00:26.609 --> 00:00:30.609
developers and they do their best to get things running.

00:00:31.010 --> 00:00:35.414
You also have a case of a mismatch environments.

00:00:35.414 --> 00:00:39.500
What that means is, you will have a specific hardware running

00:00:39.500 --> 00:00:42.724
production workloads and a specific hardware

00:00:42.723 --> 00:00:45.304
that the developers used to create the application,

00:00:45.304 --> 00:00:50.164
usually their work laptops or some development server or environment.

00:00:50.164 --> 00:00:52.119
Now there's a risk here,

00:00:52.119 --> 00:00:57.919
usually production would have certain specification regarding CPU, memory,

00:00:57.920 --> 00:01:03.090
and storage and it might be different when it comes to development of

00:01:03.090 --> 00:01:05.570
probably motor machine or just different and there

00:01:05.569 --> 00:01:08.629
might be also differences when it comes to the operating system.

00:01:08.629 --> 00:01:10.519
That's a little bit dangerous because that creates

00:01:10.519 --> 00:01:14.629
a situation where you could have a deployment that used to

00:01:14.629 --> 00:01:18.409
work perfectly in the development environment and is tested by the developers

00:01:18.409 --> 00:01:22.560
but when it comes to the actual deployment,

00:01:22.560 --> 00:01:25.140
it's like there's a little bit of difference in performance.

00:01:25.140 --> 00:01:29.644
There is something wrong here and that's created by a mismatched environment.

00:01:29.644 --> 00:01:34.759
Ideally, you want to have perfectly matching environments when it comes to

00:01:34.760 --> 00:01:38.090
the development team and a production team and that only gets done

00:01:38.090 --> 00:01:43.109
by integrating those teams together and having them communicate effectively.

00:01:44.049 --> 00:01:49.149
You also have the possibility of configuration drift.

00:01:49.150 --> 00:01:53.045
Configuration drift is when you have a problem,

00:01:53.045 --> 00:01:58.075
let's say in production and in production, something breaks,

00:01:58.075 --> 00:02:03.079
you call the operational team and they come in in the middle of the night, they fix it,

00:02:03.079 --> 00:02:05.750
they make a change in that production server

00:02:05.750 --> 00:02:09.354
in the middle of the night and now everything is working again.

00:02:09.354 --> 00:02:15.349
The problem is, this change was done manually and now

00:02:15.349 --> 00:02:18.109
the configuration that you have in this server does not

00:02:18.110 --> 00:02:21.575
match what we have in the development environment.

00:02:21.574 --> 00:02:24.769
Now, that's terrible because on the next update,

00:02:24.770 --> 00:02:26.960
in the next feature of this software,

00:02:26.960 --> 00:02:31.504
now you have a completely mismatch configuration that may not

00:02:31.504 --> 00:02:34.710
reflect what the development team expects

00:02:34.710 --> 00:02:38.939
and now you have this situation which is called configuration drift.

